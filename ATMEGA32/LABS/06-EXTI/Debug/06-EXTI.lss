
06-EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000210a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000210a  0000219e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  000021a6  2**0
                  ALLOC
  3 .stab         000019bc  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4a  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000047ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000048ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000066a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008340  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000084a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000872d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_1>
       8:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_2>
       c:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e0       	ldi	r30, 0x0A	; 10
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 c5 0b 	call	0x178a	; 0x178a <main>
      8a:	0c 94 83 10 	jmp	0x2106	; 0x2106 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinDirection>:
		/*		- Copy_u8Port: The port to set the pin direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*		- Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*		- Copy_u8Direction: The desired direction (DIO_u8PIN_OUTPUT or DIO_u8PIN_INPUT).							*/
		/********************************************************************************************************************/
		void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
		{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DIO_voidSetPinDirection+0x22>
     b66:	ee c0       	rjmp	.+476    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <DIO_voidSetPinDirection+0x2a>
     b6e:	ea c0       	rjmp	.+468    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
			{
				if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	09 f0       	breq	.+2      	; 0xb78 <DIO_voidSetPinDirection+0x32>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <DIO_voidSetPinDirection+0x110>
				{
					switch(Copy_u8Port)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3f 83       	std	Y+7, r19	; 0x07
     b80:	2e 83       	std	Y+6, r18	; 0x06
     b82:	8e 81       	ldd	r24, Y+6	; 0x06
     b84:	9f 81       	ldd	r25, Y+7	; 0x07
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	49 f1       	breq	.+82     	; 0xbde <DIO_voidSetPinDirection+0x98>
     b8c:	2e 81       	ldd	r18, Y+6	; 0x06
     b8e:	3f 81       	ldd	r19, Y+7	; 0x07
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	2c f4       	brge	.+10     	; 0xba0 <DIO_voidSetPinDirection+0x5a>
     b96:	8e 81       	ldd	r24, Y+6	; 0x06
     b98:	9f 81       	ldd	r25, Y+7	; 0x07
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <DIO_voidSetPinDirection+0x70>
     b9e:	d2 c0       	rjmp	.+420    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
     ba0:	2e 81       	ldd	r18, Y+6	; 0x06
     ba2:	3f 81       	ldd	r19, Y+7	; 0x07
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	71 f1       	breq	.+92     	; 0xc06 <DIO_voidSetPinDirection+0xc0>
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	9f 81       	ldd	r25, Y+7	; 0x07
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	91 05       	cpc	r25, r1
     bb2:	e9 f1       	breq	.+122    	; 0xc2e <DIO_voidSetPinDirection+0xe8>
     bb4:	c7 c0       	rjmp	.+398    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(DDRA , Copy_u8Pin); 	break;
     bb6:	aa e3       	ldi	r26, 0x3A	; 58
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e3       	ldi	r30, 0x3A	; 58
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	48 2f       	mov	r20, r24
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_voidSetPinDirection+0x8e>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_voidSetPinDirection+0x8a>
     bd8:	84 2b       	or	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	b3 c0       	rjmp	.+358    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  SET_BIT(DDRB , Copy_u8Pin); 	break;
     bde:	a7 e3       	ldi	r26, 0x37	; 55
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e3       	ldi	r30, 0x37	; 55
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_voidSetPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_voidSetPinDirection+0xb2>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	9f c0       	rjmp	.+318    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  SET_BIT(DDRC , Copy_u8Pin); 	break;
     c06:	a4 e3       	ldi	r26, 0x34	; 52
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_voidSetPinDirection+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_voidSetPinDirection+0xda>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	8b c0       	rjmp	.+278    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  SET_BIT(DDRD , Copy_u8Pin); 	break;
     c2e:	a1 e3       	ldi	r26, 0x31	; 49
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e1 e3       	ldi	r30, 0x31	; 49
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_voidSetPinDirection+0x106>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_voidSetPinDirection+0x102>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	77 c0       	rjmp	.+238    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						default       :  								break;
					}
				}
				else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 23       	and	r24, r24
     c5a:	09 f0       	breq	.+2      	; 0xc5e <DIO_voidSetPinDirection+0x118>
     c5c:	73 c0       	rjmp	.+230    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
				{
					switch(Copy_u8Port)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3d 83       	std	Y+5, r19	; 0x05
     c66:	2c 83       	std	Y+4, r18	; 0x04
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	59 f1       	breq	.+86     	; 0xcc8 <DIO_voidSetPinDirection+0x182>
     c72:	2c 81       	ldd	r18, Y+4	; 0x04
     c74:	3d 81       	ldd	r19, Y+5	; 0x05
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	2c f4       	brge	.+10     	; 0xc86 <DIO_voidSetPinDirection+0x140>
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	9d 81       	ldd	r25, Y+5	; 0x05
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	69 f0       	breq	.+26     	; 0xc9e <DIO_voidSetPinDirection+0x158>
     c84:	5f c0       	rjmp	.+190    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
     c86:	2c 81       	ldd	r18, Y+4	; 0x04
     c88:	3d 81       	ldd	r19, Y+5	; 0x05
     c8a:	22 30       	cpi	r18, 0x02	; 2
     c8c:	31 05       	cpc	r19, r1
     c8e:	89 f1       	breq	.+98     	; 0xcf2 <DIO_voidSetPinDirection+0x1ac>
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	91 05       	cpc	r25, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <DIO_voidSetPinDirection+0x156>
     c9a:	40 c0       	rjmp	.+128    	; 0xd1c <DIO_voidSetPinDirection+0x1d6>
     c9c:	53 c0       	rjmp	.+166    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(DDRA , Copy_u8Pin); 	break;
     c9e:	aa e3       	ldi	r26, 0x3A	; 58
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ea e3       	ldi	r30, 0x3A	; 58
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_voidSetPinDirection+0x176>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_voidSetPinDirection+0x172>
     cc0:	80 95       	com	r24
     cc2:	84 23       	and	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	3e c0       	rjmp	.+124    	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(DDRB , Copy_u8Pin); 	break;
     cc8:	a7 e3       	ldi	r26, 0x37	; 55
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e3       	ldi	r30, 0x37	; 55
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_voidSetPinDirection+0x1a0>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_voidSetPinDirection+0x19c>
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	29 c0       	rjmp	.+82     	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(DDRC , Copy_u8Pin); 	break;
     cf2:	a4 e3       	ldi	r26, 0x34	; 52
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e3       	ldi	r30, 0x34	; 52
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDirection+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDirection+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(DDRD , Copy_u8Pin); 	break;
     d1c:	a1 e3       	ldi	r26, 0x31	; 49
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e1 e3       	ldi	r30, 0x31	; 49
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_voidSetPinDirection+0x1f4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_voidSetPinDirection+0x1f0>
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	8c 93       	st	X, r24
						default       :  								break;
					}
				}
			}
		}
     d44:	27 96       	adiw	r28, 0x07	; 7
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <DIO_voidSetPortDirection>:
		/*   Parameters:																								*/
		/*        - Copy_u8Port: The port to set the direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).*/
		/*        - Copy_u8Direction: The desired direction (DIO_PORT_OUTPUT or DIO_PORT_INPUT).						*/
		/****************************************************************************************************************/
		void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
		{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <DIO_voidSetPortDirection+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <DIO_voidSetPortDirection+0x8>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	90 f5       	brcc	.+100    	; 0xdd0 <DIO_voidSetPortDirection+0x7a>
			{
				switch(Copy_u8Port)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3c 83       	std	Y+4, r19	; 0x04
     d74:	2b 83       	std	Y+3, r18	; 0x03
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	91 05       	cpc	r25, r1
     d7e:	d1 f0       	breq	.+52     	; 0xdb4 <DIO_voidSetPortDirection+0x5e>
     d80:	2b 81       	ldd	r18, Y+3	; 0x03
     d82:	3c 81       	ldd	r19, Y+4	; 0x04
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	2c f4       	brge	.+10     	; 0xd94 <DIO_voidSetPortDirection+0x3e>
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	61 f0       	breq	.+24     	; 0xdaa <DIO_voidSetPortDirection+0x54>
     d92:	1e c0       	rjmp	.+60     	; 0xdd0 <DIO_voidSetPortDirection+0x7a>
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	3c 81       	ldd	r19, Y+4	; 0x04
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	81 f0       	breq	.+32     	; 0xdbe <DIO_voidSetPortDirection+0x68>
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	91 05       	cpc	r25, r1
     da6:	81 f0       	breq	.+32     	; 0xdc8 <DIO_voidSetPortDirection+0x72>
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <DIO_voidSetPortDirection+0x7a>
				{
					case DIO_u8PORTA:  DDRA = Copy_u8Direction; 		break;
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	80 83       	st	Z, r24
     db2:	0e c0       	rjmp	.+28     	; 0xdd0 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTB:  DDRB = Copy_u8Direction; 		break;
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	80 83       	st	Z, r24
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTC:  DDRC = Copy_u8Direction; 		break;
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	80 83       	st	Z, r24
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTD:  DDRD = Copy_u8Direction; 		break;
     dc8:	e1 e3       	ldi	r30, 0x31	; 49
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	80 83       	st	Z, r24
					default       :  									break;
				}
			}
		}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <DIO_voidSetPinValue>:
		/*        - Copy_u8Port: The port to set the pin value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).		*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*        - Copy_u8PinValue: The desired value (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).										*/
		/************************************************************************************************************************/
		void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
		{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	27 97       	sbiw	r28, 0x07	; 7
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	6a 83       	std	Y+2, r22	; 0x02
     df6:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <DIO_voidSetPinValue+0x22>
     dfe:	ee c0       	rjmp	.+476    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	88 30       	cpi	r24, 0x08	; 8
     e04:	08 f0       	brcs	.+2      	; 0xe08 <DIO_voidSetPinValue+0x2a>
     e06:	ea c0       	rjmp	.+468    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
			{
				if(Copy_u8PinValue == DIO_u8PIN_HIGH)
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	09 f0       	breq	.+2      	; 0xe10 <DIO_voidSetPinValue+0x32>
     e0e:	6f c0       	rjmp	.+222    	; 0xeee <DIO_voidSetPinValue+0x110>
				{
					switch(Copy_u8Port)
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	3f 83       	std	Y+7, r19	; 0x07
     e18:	2e 83       	std	Y+6, r18	; 0x06
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	91 05       	cpc	r25, r1
     e22:	49 f1       	breq	.+82     	; 0xe76 <DIO_voidSetPinValue+0x98>
     e24:	2e 81       	ldd	r18, Y+6	; 0x06
     e26:	3f 81       	ldd	r19, Y+7	; 0x07
     e28:	22 30       	cpi	r18, 0x02	; 2
     e2a:	31 05       	cpc	r19, r1
     e2c:	2c f4       	brge	.+10     	; 0xe38 <DIO_voidSetPinValue+0x5a>
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	9f 81       	ldd	r25, Y+7	; 0x07
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	61 f0       	breq	.+24     	; 0xe4e <DIO_voidSetPinValue+0x70>
     e36:	d2 c0       	rjmp	.+420    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
     e38:	2e 81       	ldd	r18, Y+6	; 0x06
     e3a:	3f 81       	ldd	r19, Y+7	; 0x07
     e3c:	22 30       	cpi	r18, 0x02	; 2
     e3e:	31 05       	cpc	r19, r1
     e40:	71 f1       	breq	.+92     	; 0xe9e <DIO_voidSetPinValue+0xc0>
     e42:	8e 81       	ldd	r24, Y+6	; 0x06
     e44:	9f 81       	ldd	r25, Y+7	; 0x07
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	91 05       	cpc	r25, r1
     e4a:	e9 f1       	breq	.+122    	; 0xec6 <DIO_voidSetPinValue+0xe8>
     e4c:	c7 c0       	rjmp	.+398    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(PORTA , Copy_u8Pin); 	break;
     e4e:	ab e3       	ldi	r26, 0x3B	; 59
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	eb e3       	ldi	r30, 0x3B	; 59
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_voidSetPinValue+0x8e>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_voidSetPinValue+0x8a>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	b3 c0       	rjmp	.+358    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  SET_BIT(PORTB , Copy_u8Pin); 	break;
     e76:	a8 e3       	ldi	r26, 0x38	; 56
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e8 e3       	ldi	r30, 0x38	; 56
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_voidSetPinValue+0xb6>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_voidSetPinValue+0xb2>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	9f c0       	rjmp	.+318    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  SET_BIT(PORTC , Copy_u8Pin); 	break;
     e9e:	a5 e3       	ldi	r26, 0x35	; 53
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e3       	ldi	r30, 0x35	; 53
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_voidSetPinValue+0xde>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_voidSetPinValue+0xda>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	8b c0       	rjmp	.+278    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  SET_BIT(PORTD , Copy_u8Pin); 	break;
     ec6:	a2 e3       	ldi	r26, 0x32	; 50
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e2 e3       	ldi	r30, 0x32	; 50
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_voidSetPinValue+0x106>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_voidSetPinValue+0x102>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	77 c0       	rjmp	.+238    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						default       	:  									break;
					}
				}
				else if(Copy_u8PinValue == DIO_u8PIN_LOW)
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 23       	and	r24, r24
     ef2:	09 f0       	breq	.+2      	; 0xef6 <DIO_voidSetPinValue+0x118>
     ef4:	73 c0       	rjmp	.+230    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
				{
					switch(Copy_u8Port)
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	3d 83       	std	Y+5, r19	; 0x05
     efe:	2c 83       	std	Y+4, r18	; 0x04
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	59 f1       	breq	.+86     	; 0xf60 <DIO_voidSetPinValue+0x182>
     f0a:	2c 81       	ldd	r18, Y+4	; 0x04
     f0c:	3d 81       	ldd	r19, Y+5	; 0x05
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	2c f4       	brge	.+10     	; 0xf1e <DIO_voidSetPinValue+0x140>
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	69 f0       	breq	.+26     	; 0xf36 <DIO_voidSetPinValue+0x158>
     f1c:	5f c0       	rjmp	.+190    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	89 f1       	breq	.+98     	; 0xf8a <DIO_voidSetPinValue+0x1ac>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_voidSetPinValue+0x156>
     f32:	40 c0       	rjmp	.+128    	; 0xfb4 <DIO_voidSetPinValue+0x1d6>
     f34:	53 c0       	rjmp	.+166    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(PORTA , Copy_u8Pin); 	break;
     f36:	ab e3       	ldi	r26, 0x3B	; 59
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_voidSetPinValue+0x176>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_voidSetPinValue+0x172>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	3e c0       	rjmp	.+124    	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(PORTB , Copy_u8Pin); 	break;
     f60:	a8 e3       	ldi	r26, 0x38	; 56
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e3       	ldi	r30, 0x38	; 56
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_voidSetPinValue+0x1a0>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_voidSetPinValue+0x19c>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	29 c0       	rjmp	.+82     	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(PORTC , Copy_u8Pin); 	break;
     f8a:	a5 e3       	ldi	r26, 0x35	; 53
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e5 e3       	ldi	r30, 0x35	; 53
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_voidSetPinValue+0x1ca>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_voidSetPinValue+0x1c6>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(PORTD , Copy_u8Pin); 	break;
     fb4:	a2 e3       	ldi	r26, 0x32	; 50
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e2 e3       	ldi	r30, 0x32	; 50
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_voidSetPinValue+0x1f4>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_voidSetPinValue+0x1f0>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
						default       	:  									break;
					}
				}
			}
		}
     fdc:	27 96       	adiw	r28, 0x07	; 7
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <DIO_voidSetPortValue>:
		/*    Parameters:																								*/
		/*        - Copy_u8Port: The port to set the value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8PortVALUE: The desired value (DIO_u8PORT_HIGH or DIO_u8PORT_LOW).							*/
		/****************************************************************************************************************/
		void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8PortValue)
		{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <DIO_voidSetPortValue+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <DIO_voidSetPortValue+0x8>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	90 f5       	brcc	.+100    	; 0x1068 <DIO_voidSetPortValue+0x7a>
			{
				switch(Copy_u8Port)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3c 83       	std	Y+4, r19	; 0x04
    100c:	2b 83       	std	Y+3, r18	; 0x03
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	d1 f0       	breq	.+52     	; 0x104c <DIO_voidSetPortValue+0x5e>
    1018:	2b 81       	ldd	r18, Y+3	; 0x03
    101a:	3c 81       	ldd	r19, Y+4	; 0x04
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	2c f4       	brge	.+10     	; 0x102c <DIO_voidSetPortValue+0x3e>
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	61 f0       	breq	.+24     	; 0x1042 <DIO_voidSetPortValue+0x54>
    102a:	1e c0       	rjmp	.+60     	; 0x1068 <DIO_voidSetPortValue+0x7a>
    102c:	2b 81       	ldd	r18, Y+3	; 0x03
    102e:	3c 81       	ldd	r19, Y+4	; 0x04
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	81 f0       	breq	.+32     	; 0x1056 <DIO_voidSetPortValue+0x68>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	81 f0       	breq	.+32     	; 0x1060 <DIO_voidSetPortValue+0x72>
    1040:	13 c0       	rjmp	.+38     	; 0x1068 <DIO_voidSetPortValue+0x7a>
				{
					case DIO_u8PORTA:  	PORTA = Copy_u8PortValue; 		break;
    1042:	eb e3       	ldi	r30, 0x3B	; 59
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	80 83       	st	Z, r24
    104a:	0e c0       	rjmp	.+28     	; 0x1068 <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTB:  	PORTB = Copy_u8PortValue; 		break;
    104c:	e8 e3       	ldi	r30, 0x38	; 56
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	80 83       	st	Z, r24
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTC:  	PORTC = Copy_u8PortValue; 		break;
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	80 83       	st	Z, r24
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTD:  	PORTD = Copy_u8PortValue; 		break;
    1060:	e2 e3       	ldi	r30, 0x32	; 50
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 83       	st	Z, r24
					default       	: 									break;
				}
			}
		}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_u8GetPinValue>:
		/*        - Copy_u8Port: The port to read the pin value from (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.														*/
		/*    Returns: The value of the pin (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).												*/
		/********************************************************************************************************************/
		u8 	 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <DIO_u8GetPinValue+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_u8GetPinValue+0x8>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <DIO_u8GetPinValue+0xa>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	6b 83       	std	Y+3, r22	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	08 f0       	brcs	.+2      	; 0x1090 <DIO_u8GetPinValue+0x1a>
    108e:	6e c0       	rjmp	.+220    	; 0x116c <DIO_u8GetPinValue+0xf6>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 30       	cpi	r24, 0x08	; 8
    1094:	08 f0       	brcs	.+2      	; 0x1098 <DIO_u8GetPinValue+0x22>
    1096:	6a c0       	rjmp	.+212    	; 0x116c <DIO_u8GetPinValue+0xf6>
			{
				u8 Local_u8PinValue;

				switch(Copy_u8Port)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3e 83       	std	Y+6, r19	; 0x06
    10a0:	2d 83       	std	Y+5, r18	; 0x05
    10a2:	4d 81       	ldd	r20, Y+5	; 0x05
    10a4:	5e 81       	ldd	r21, Y+6	; 0x06
    10a6:	41 30       	cpi	r20, 0x01	; 1
    10a8:	51 05       	cpc	r21, r1
    10aa:	41 f1       	breq	.+80     	; 0x10fc <DIO_u8GetPinValue+0x86>
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	91 05       	cpc	r25, r1
    10b4:	34 f4       	brge	.+12     	; 0x10c2 <DIO_u8GetPinValue+0x4c>
    10b6:	2d 81       	ldd	r18, Y+5	; 0x05
    10b8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ba:	21 15       	cp	r18, r1
    10bc:	31 05       	cpc	r19, r1
    10be:	61 f0       	breq	.+24     	; 0x10d8 <DIO_u8GetPinValue+0x62>
    10c0:	52 c0       	rjmp	.+164    	; 0x1166 <DIO_u8GetPinValue+0xf0>
    10c2:	4d 81       	ldd	r20, Y+5	; 0x05
    10c4:	5e 81       	ldd	r21, Y+6	; 0x06
    10c6:	42 30       	cpi	r20, 0x02	; 2
    10c8:	51 05       	cpc	r21, r1
    10ca:	51 f1       	breq	.+84     	; 0x1120 <DIO_u8GetPinValue+0xaa>
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	b9 f1       	breq	.+110    	; 0x1144 <DIO_u8GetPinValue+0xce>
    10d6:	47 c0       	rjmp	.+142    	; 0x1166 <DIO_u8GetPinValue+0xf0>
				{
					case DIO_u8PORTA: 	Local_u8PinValue = GET_BIT(PINA , Copy_u8Pin); 		break;
    10d8:	e9 e3       	ldi	r30, 0x39	; 57
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_u8GetPinValue+0x7a>
    10ec:	55 95       	asr	r21
    10ee:	47 95       	ror	r20
    10f0:	8a 95       	dec	r24
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_u8GetPinValue+0x76>
    10f4:	ca 01       	movw	r24, r20
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	35 c0       	rjmp	.+106    	; 0x1166 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTB: 	Local_u8PinValue = GET_BIT(PINB , Copy_u8Pin); 		break;
    10fc:	e6 e3       	ldi	r30, 0x36	; 54
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_u8GetPinValue+0x9e>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_u8GetPinValue+0x9a>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	23 c0       	rjmp	.+70     	; 0x1166 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTC: 	Local_u8PinValue = GET_BIT(PINC , Copy_u8Pin); 		break;
    1120:	e3 e3       	ldi	r30, 0x33	; 51
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_u8GetPinValue+0xc2>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_u8GetPinValue+0xbe>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	11 c0       	rjmp	.+34     	; 0x1166 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTD: 	Local_u8PinValue = GET_BIT(PIND , Copy_u8Pin); 		break;
    1144:	e0 e3       	ldi	r30, 0x30	; 48
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_u8GetPinValue+0xe6>
    1158:	55 95       	asr	r21
    115a:	47 95       	ror	r20
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_u8GetPinValue+0xe2>
    1160:	ca 01       	movw	r24, r20
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
					default      	: 														break;
				}

				return Local_u8PinValue;
    1166:	59 81       	ldd	r21, Y+1	; 0x01
    1168:	5c 83       	std	Y+4, r21	; 0x04
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8GetPinValue+0xfa>
			}

			else
			{
				return	-1;
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	8c 83       	std	Y+4, r24	; 0x04
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
			}
		}
    1172:	26 96       	adiw	r28, 0x06	; 6
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_voidTogglePin>:
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pin to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) to be toggled.																	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePin(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_voidTogglePin+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_voidTogglePin+0x8>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	08 f0       	brcs	.+2      	; 0x119c <DIO_voidTogglePin+0x18>
    119a:	72 c0       	rjmp	.+228    	; 0x1280 <DIO_voidTogglePin+0xfc>
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_voidTogglePin+0x20>
    11a2:	6e c0       	rjmp	.+220    	; 0x1280 <DIO_voidTogglePin+0xfc>
			{
				switch (Copy_u8Port)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3c 83       	std	Y+4, r19	; 0x04
    11ac:	2b 83       	std	Y+3, r18	; 0x03
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	49 f1       	breq	.+82     	; 0x120a <DIO_voidTogglePin+0x86>
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <DIO_voidTogglePin+0x48>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <DIO_voidTogglePin+0x5e>
    11ca:	5a c0       	rjmp	.+180    	; 0x1280 <DIO_voidTogglePin+0xfc>
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	3c 81       	ldd	r19, Y+4	; 0x04
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	71 f1       	breq	.+92     	; 0x1232 <DIO_voidTogglePin+0xae>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	e9 f1       	breq	.+122    	; 0x125a <DIO_voidTogglePin+0xd6>
    11e0:	4f c0       	rjmp	.+158    	; 0x1280 <DIO_voidTogglePin+0xfc>
				{
					case DIO_u8PORTA : 	TOG_BIT(PORTA , Copy_u8Pin); 		break ;
    11e2:	ab e3       	ldi	r26, 0x3B	; 59
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_voidTogglePin+0x7c>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_voidTogglePin+0x78>
    1204:	84 27       	eor	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	3b c0       	rjmp	.+118    	; 0x1280 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTB : 	TOG_BIT(PORTB , Copy_u8Pin); 		break ;
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_voidTogglePin+0xa4>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_voidTogglePin+0xa0>
    122c:	84 27       	eor	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTC : 	TOG_BIT(PORTC , Copy_u8Pin); 		break ;
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_voidTogglePin+0xcc>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_voidTogglePin+0xc8>
    1254:	84 27       	eor	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTD :	TOG_BIT(PORTD , Copy_u8Pin); 		break ;
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_voidTogglePin+0xf4>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_voidTogglePin+0xf0>
    127c:	84 27       	eor	r24, r20
    127e:	8c 93       	st	X, r24
					default 	   	 : 							 			break ;
				}
			}
		}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <DIO_voidTogglePort>:
		/*    Description: Toggles the values of the entire port.																	*/
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pins to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePort(u8 Copy_u8Port)
		{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_voidTogglePort+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <DIO_voidTogglePort+0x16>
    12a2:	3e c0       	rjmp	.+124    	; 0x1320 <DIO_voidTogglePort+0x92>
			{
				switch (Copy_u8Port)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3b 83       	std	Y+3, r19	; 0x03
    12ac:	2a 83       	std	Y+2, r18	; 0x02
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	9b 81       	ldd	r25, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	e9 f0       	breq	.+58     	; 0x12f2 <DIO_voidTogglePort+0x64>
    12b8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ba:	3b 81       	ldd	r19, Y+3	; 0x03
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_voidTogglePort+0x3e>
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <DIO_voidTogglePort+0x54>
    12ca:	2a c0       	rjmp	.+84     	; 0x1320 <DIO_voidTogglePort+0x92>
    12cc:	2a 81       	ldd	r18, Y+2	; 0x02
    12ce:	3b 81       	ldd	r19, Y+3	; 0x03
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	b1 f0       	breq	.+44     	; 0x1302 <DIO_voidTogglePort+0x74>
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	9b 81       	ldd	r25, Y+3	; 0x03
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	c9 f0       	breq	.+50     	; 0x1312 <DIO_voidTogglePort+0x84>
    12e0:	1f c0       	rjmp	.+62     	; 0x1320 <DIO_voidTogglePort+0x92>
				{
					case DIO_u8PORTA : 	TOG_REG(PORTA , DIO_u8PORT_HIGH); 		break ;
    12e2:	ab e3       	ldi	r26, 0x3B	; 59
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 95       	com	r24
    12ee:	8c 93       	st	X, r24
    12f0:	17 c0       	rjmp	.+46     	; 0x1320 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTB : 	TOG_REG(PORTB , DIO_u8PORT_HIGH); 		break ;
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 95       	com	r24
    12fe:	8c 93       	st	X, r24
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTC : 	TOG_REG(PORTC , DIO_u8PORT_HIGH); 		break ;
    1302:	a5 e3       	ldi	r26, 0x35	; 53
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 95       	com	r24
    130e:	8c 93       	st	X, r24
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTD :	TOG_REG(PORTD , DIO_u8PORT_HIGH); 		break ;
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 95       	com	r24
    131e:	8c 93       	st	X, r24
					default 	     :	 										break ;
				}
			}
		}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <EXTI_voidINTInit>:
static void (*EXTI_CallBackPtr[3])(void) = {NULL, NULL, NULL} ;   // ARRAY OF 3 POINTERS TO FUNCTION


/*External Interrupt Initialization*/
void EXTI_voidINTInit()
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
		/* Interrupt 0 Initialization*/
	#if		INT0_STATE == EXTI_ENABLED
			/*Enable INT0*/
			SET_BIT(GICR , GICR_INT0);
    1334:	ab e5       	ldi	r26, 0x5B	; 91
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	eb e5       	ldi	r30, 0x5B	; 91
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 64       	ori	r24, 0x40	; 64
    1340:	8c 93       	st	X, r24
			#elif	INT0_SENSE_CONTROL_OPTION == EXTI_LOGICAL_CHANGE
					SET_BIT(MCUCR , MCUCR_ISC00);
					CLR_BIT(MCUCR , MCUCR_ISC01);

			#elif	INT0_SENSE_CONTROL_OPTION == EXTI_FALLING_EDGE
					CLR_BIT(MCUCR , MCUCR_ISC00);
    1342:	a5 e5       	ldi	r26, 0x55	; 85
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e5       	ldi	r30, 0x55	; 85
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	8c 93       	st	X, r24
					SET_BIT(MCUCR , MCUCR_ISC01);
    1350:	a5 e5       	ldi	r26, 0x55	; 85
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e5       	ldi	r30, 0x55	; 85
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	8c 93       	st	X, r24


		/*Interrupt 1 Initialization */
	#if		INT1_STATE == EXTI_ENABLED
			/*Enable INT1*/
			SET_BIT(GICR , GICR_INT1);
    135e:	ab e5       	ldi	r26, 0x5B	; 91
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	eb e5       	ldi	r30, 0x5B	; 91
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 68       	ori	r24, 0x80	; 128
    136a:	8c 93       	st	X, r24
			#elif	INT1_SENSE_CONTROL_OPTION == EXTI_LOGICAL_CHANGE
					SET_BIT(MCUCR , MCUCR_ISC10);
					CLR_BIT(MCUCR , MCUCR_ISC11);

			#elif	INT1_SENSE_CONTROL_OPTION == EXTI_FALLING_EDGE
					CLR_BIT(MCUCR , MCUCR_ISC10);
    136c:	a5 e5       	ldi	r26, 0x55	; 85
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e5       	ldi	r30, 0x55	; 85
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	8c 93       	st	X, r24
					SET_BIT(MCUCR , MCUCR_ISC11);
    137a:	a5 e5       	ldi	r26, 0x55	; 85
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e5       	ldi	r30, 0x55	; 85
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	8c 93       	st	X, r24


		/*Interrupt 2 Initialization */
	#if		INT2_STATE == EXTI_ENABLED
			/*Enable INT2*/
			SET_BIT(GICR , GICR_INT2);
    1388:	ab e5       	ldi	r26, 0x5B	; 91
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	eb e5       	ldi	r30, 0x5B	; 91
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 62       	ori	r24, 0x20	; 32
    1394:	8c 93       	st	X, r24

			/*Configure Sense Control Option*/
			#if		INT2_SENSE_CONTROL_OPTION == EXTI_FALLING_EDGE
					CLR_BIT(MCUCSR , MCUCSR_ISC2);
    1396:	a4 e5       	ldi	r26, 0x54	; 84
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e4 e5       	ldi	r30, 0x54	; 84
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8f 7b       	andi	r24, 0xBF	; 191
    13a2:	8c 93       	st	X, r24
			CLR_BIT(GICR , GICR_INT2);

	#else
		#error "Wrong EXTI_STATE_INT2 configuration option"
	#endif
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <EXTI0_voidSetTriggerSource>:




void EXTI0_voidSetTriggerSource(u8 copy_u8SenseOption)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <EXTI0_voidSetTriggerSource+0x6>
    13b0:	0f 92       	push	r0
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8SenseOption)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3b 83       	std	Y+3, r19	; 0x03
    13c0:	2a 83       	std	Y+2, r18	; 0x02
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	91 05       	cpc	r25, r1
    13ca:	29 f1       	breq	.+74     	; 0x1416 <EXTI0_voidSetTriggerSource+0x6c>
    13cc:	2a 81       	ldd	r18, Y+2	; 0x02
    13ce:	3b 81       	ldd	r19, Y+3	; 0x03
    13d0:	23 30       	cpi	r18, 0x03	; 3
    13d2:	31 05       	cpc	r19, r1
    13d4:	34 f4       	brge	.+12     	; 0x13e2 <EXTI0_voidSetTriggerSource+0x38>
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	61 f0       	breq	.+24     	; 0x13f8 <EXTI0_voidSetTriggerSource+0x4e>
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <EXTI0_voidSetTriggerSource+0xc4>
    13e2:	2a 81       	ldd	r18, Y+2	; 0x02
    13e4:	3b 81       	ldd	r19, Y+3	; 0x03
    13e6:	23 30       	cpi	r18, 0x03	; 3
    13e8:	31 05       	cpc	r19, r1
    13ea:	21 f1       	breq	.+72     	; 0x1434 <EXTI0_voidSetTriggerSource+0x8a>
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	91 05       	cpc	r25, r1
    13f4:	71 f1       	breq	.+92     	; 0x1452 <EXTI0_voidSetTriggerSource+0xa8>
    13f6:	3b c0       	rjmp	.+118    	; 0x146e <EXTI0_voidSetTriggerSource+0xc4>
	{
		case EXTI_LOW_LEVEL			:	CLR_BIT(MCUCR , MCUCR_ISC00);
    13f8:	a5 e5       	ldi	r26, 0x55	; 85
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e5       	ldi	r30, 0x55	; 85
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8e 7f       	andi	r24, 0xFE	; 254
    1404:	8c 93       	st	X, r24
										CLR_BIT(MCUCR , MCUCR_ISC01);
    1406:	a5 e5       	ldi	r26, 0x55	; 85
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e5       	ldi	r30, 0x55	; 85
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8d 7f       	andi	r24, 0xFD	; 253
    1412:	8c 93       	st	X, r24
    1414:	2c c0       	rjmp	.+88     	; 0x146e <EXTI0_voidSetTriggerSource+0xc4>
										break;

		case EXTI_LOGICAL_CHANGE	:	SET_BIT(MCUCR , MCUCR_ISC00);
    1416:	a5 e5       	ldi	r26, 0x55	; 85
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e5       	ldi	r30, 0x55	; 85
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
										CLR_BIT(MCUCR , MCUCR_ISC01);
    1424:	a5 e5       	ldi	r26, 0x55	; 85
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e5 e5       	ldi	r30, 0x55	; 85
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8d 7f       	andi	r24, 0xFD	; 253
    1430:	8c 93       	st	X, r24
    1432:	1d c0       	rjmp	.+58     	; 0x146e <EXTI0_voidSetTriggerSource+0xc4>
										break;

		case EXTI_FALLING_EDGE		:	CLR_BIT(MCUCR , MCUCR_ISC00);
    1434:	a5 e5       	ldi	r26, 0x55	; 85
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e5       	ldi	r30, 0x55	; 85
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	8c 93       	st	X, r24
										SET_BIT(MCUCR , MCUCR_ISC01);
    1442:	a5 e5       	ldi	r26, 0x55	; 85
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e5       	ldi	r30, 0x55	; 85
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	82 60       	ori	r24, 0x02	; 2
    144e:	8c 93       	st	X, r24
    1450:	0e c0       	rjmp	.+28     	; 0x146e <EXTI0_voidSetTriggerSource+0xc4>
										break;

		case EXTI_RISING_EDGE		:	SET_BIT(MCUCR , MCUCR_ISC00);
    1452:	a5 e5       	ldi	r26, 0x55	; 85
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e5       	ldi	r30, 0x55	; 85
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	8c 93       	st	X, r24
										SET_BIT(MCUCR , MCUCR_ISC01);
    1460:	a5 e5       	ldi	r26, 0x55	; 85
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e5       	ldi	r30, 0x55	; 85
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	8c 93       	st	X, r24
										break;

		default       				:  	break;
	}
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <EXTI1_voidSetTriggerSource>:

void EXTI1_voidSetTriggerSource(u8 copy_u8SenseOption)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <EXTI1_voidSetTriggerSource+0x6>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8SenseOption)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3b 83       	std	Y+3, r19	; 0x03
    1490:	2a 83       	std	Y+2, r18	; 0x02
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	91 05       	cpc	r25, r1
    149a:	29 f1       	breq	.+74     	; 0x14e6 <EXTI1_voidSetTriggerSource+0x6c>
    149c:	2a 81       	ldd	r18, Y+2	; 0x02
    149e:	3b 81       	ldd	r19, Y+3	; 0x03
    14a0:	23 30       	cpi	r18, 0x03	; 3
    14a2:	31 05       	cpc	r19, r1
    14a4:	34 f4       	brge	.+12     	; 0x14b2 <EXTI1_voidSetTriggerSource+0x38>
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <EXTI1_voidSetTriggerSource+0x4e>
    14b0:	46 c0       	rjmp	.+140    	; 0x153e <EXTI1_voidSetTriggerSource+0xc4>
    14b2:	2a 81       	ldd	r18, Y+2	; 0x02
    14b4:	3b 81       	ldd	r19, Y+3	; 0x03
    14b6:	23 30       	cpi	r18, 0x03	; 3
    14b8:	31 05       	cpc	r19, r1
    14ba:	21 f1       	breq	.+72     	; 0x1504 <EXTI1_voidSetTriggerSource+0x8a>
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	91 05       	cpc	r25, r1
    14c4:	71 f1       	breq	.+92     	; 0x1522 <EXTI1_voidSetTriggerSource+0xa8>
    14c6:	3b c0       	rjmp	.+118    	; 0x153e <EXTI1_voidSetTriggerSource+0xc4>
	{
		case EXTI_LOW_LEVEL			:	CLR_BIT(MCUCR , MCUCR_ISC10);
    14c8:	a5 e5       	ldi	r26, 0x55	; 85
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e5       	ldi	r30, 0x55	; 85
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	8c 93       	st	X, r24
										CLR_BIT(MCUCR , MCUCR_ISC11);
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	8c 93       	st	X, r24
    14e4:	2c c0       	rjmp	.+88     	; 0x153e <EXTI1_voidSetTriggerSource+0xc4>
										break;

		case EXTI_LOGICAL_CHANGE	:	SET_BIT(MCUCR , MCUCR_ISC10);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	84 60       	ori	r24, 0x04	; 4
    14f2:	8c 93       	st	X, r24
										CLR_BIT(MCUCR , MCUCR_ISC11);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	8c 93       	st	X, r24
    1502:	1d c0       	rjmp	.+58     	; 0x153e <EXTI1_voidSetTriggerSource+0xc4>
										break;

		case EXTI_FALLING_EDGE		:	CLR_BIT(MCUCR , MCUCR_ISC10);
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8b 7f       	andi	r24, 0xFB	; 251
    1510:	8c 93       	st	X, r24
										SET_BIT(MCUCR , MCUCR_ISC11);
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	88 60       	ori	r24, 0x08	; 8
    151e:	8c 93       	st	X, r24
    1520:	0e c0       	rjmp	.+28     	; 0x153e <EXTI1_voidSetTriggerSource+0xc4>
										break;

		case EXTI_RISING_EDGE		:	SET_BIT(MCUCR , MCUCR_ISC10);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	84 60       	ori	r24, 0x04	; 4
    152e:	8c 93       	st	X, r24
										SET_BIT(MCUCR , MCUCR_ISC11);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 60       	ori	r24, 0x08	; 8
    153c:	8c 93       	st	X, r24
										break;

		default       				:  	break;
	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <EXTI2_voidSetTriggerSource>:

void EXTI2_voidSetTriggerSource(u8 copy_u8SenseOption)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <EXTI2_voidSetTriggerSource+0x6>
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8SenseOption)
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3b 83       	std	Y+3, r19	; 0x03
    1560:	2a 83       	std	Y+2, r18	; 0x02
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	31 f0       	breq	.+12     	; 0x1578 <EXTI2_voidSetTriggerSource+0x2e>
    156c:	2a 81       	ldd	r18, Y+2	; 0x02
    156e:	3b 81       	ldd	r19, Y+3	; 0x03
    1570:	24 30       	cpi	r18, 0x04	; 4
    1572:	31 05       	cpc	r19, r1
    1574:	49 f0       	breq	.+18     	; 0x1588 <EXTI2_voidSetTriggerSource+0x3e>
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <EXTI2_voidSetTriggerSource+0x4c>
	{
		case EXTI_FALLING_EDGE		:	CLR_BIT(MCUCSR , MCUCSR_ISC2);
    1578:	a4 e5       	ldi	r26, 0x54	; 84
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e4 e5       	ldi	r30, 0x54	; 84
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8f 7b       	andi	r24, 0xBF	; 191
    1584:	8c 93       	st	X, r24
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <EXTI2_voidSetTriggerSource+0x4c>
										break;

		case EXTI_RISING_EDGE		:	SET_BIT(MCUCSR , MCUCSR_ISC2);
    1588:	a4 e5       	ldi	r26, 0x54	; 84
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e4 e5       	ldi	r30, 0x54	; 84
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 64       	ori	r24, 0x40	; 64
    1594:	8c 93       	st	X, r24
										break;

		default       				:  	break;
	}
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <EXTI_voidCallBackINT0>:




void EXTI_voidCallBackINT0(void (*Copy_pvFunction) (void))		//Make "Copy_pvFunction" as global to be seen by ISR functions.
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <EXTI_voidCallBackINT0+0x6>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
	EXTI_CallBackPtr[0] = Copy_pvFunction;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	90 93 69 00 	sts	0x0069, r25
    15b8:	80 93 68 00 	sts	0x0068, r24
	//CallBackPtr0 = Copy_pvFunction;
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <EXTI_voidCallBackINT1>:

void EXTI_voidCallBackINT1(void (*Copy_pvFunction) (void))		//Make "Copy_pvFunction" as global to be seen by ISR functions.
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <EXTI_voidCallBackINT1+0x6>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
	EXTI_CallBackPtr[1] = Copy_pvFunction;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	90 93 6b 00 	sts	0x006B, r25
    15dc:	80 93 6a 00 	sts	0x006A, r24
	//CallBackPtr1 = Copy_pvFunction;
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <EXTI_voidCallBackINT2>:

void EXTI_voidCallBackINT2(void (*Copy_pvFunction) (void))		//Make "Copy_pvFunction" as global to be seen by ISR functions.
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <EXTI_voidCallBackINT2+0x6>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
	EXTI_CallBackPtr[2] = Copy_pvFunction;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	90 93 6d 00 	sts	0x006D, r25
    1600:	80 93 6c 00 	sts	0x006C, r24
	//CallBackPtr2 = Copy_pvFunction;
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <__vector_1>:


/*To handle ISR  of INT0 */
void __vector_1(void) __attribute__((signal));		//Save this form "void __vector_no(void) __attribute__((signal));".		// to prevent the compiler optimization
void __vector_1(void)
{
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBackPtr[0] != NULL)
    1638:	80 91 68 00 	lds	r24, 0x0068
    163c:	90 91 69 00 	lds	r25, 0x0069
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 f0       	breq	.+24     	; 0x165c <__vector_1+0x4e>
	{
		/*Clear INT0 Flag*/
		SET_BIT(GIFR , GIFR_INTF0);
    1644:	aa e5       	ldi	r26, 0x5A	; 90
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ea e5       	ldi	r30, 0x5A	; 90
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	80 64       	ori	r24, 0x40	; 64
    1650:	8c 93       	st	X, r24

		EXTI_CallBackPtr[0]( );			// We put () because this is pointer to call function.
    1652:	e0 91 68 00 	lds	r30, 0x0068
    1656:	f0 91 69 00 	lds	r31, 0x0069
    165a:	09 95       	icall
	}
	else
	{
		// DO NOTHING
	}
}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_2>:


/*To handle ISR  of INT1*/
void __vector_2(void) __attribute__((signal));		//Save this form "void __vector_no(void) __attribute__((signal));".
void __vector_2(void)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBackPtr[1] != NULL)
    16ac:	80 91 6a 00 	lds	r24, 0x006A
    16b0:	90 91 6b 00 	lds	r25, 0x006B
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <__vector_2+0x4e>
	{
		/*Clear INT1 Flag*/
		SET_BIT(GIFR , GIFR_INTF1);
    16b8:	aa e5       	ldi	r26, 0x5A	; 90
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ea e5       	ldi	r30, 0x5A	; 90
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 68       	ori	r24, 0x80	; 128
    16c4:	8c 93       	st	X, r24

		EXTI_CallBackPtr[1]( );			// We put () because this is pointer to call function.
    16c6:	e0 91 6a 00 	lds	r30, 0x006A
    16ca:	f0 91 6b 00 	lds	r31, 0x006B
    16ce:	09 95       	icall
	}
	else
	{
		// DO NOTHING
	}
}
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <__vector_3>:


/*To handle ISR  of INT2*/
void __vector_3(void) __attribute__((signal));		//Save this form "void __vector_no(void) __attribute__((signal));".
void __vector_3(void)
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBackPtr[2] != NULL)
    1720:	80 91 6c 00 	lds	r24, 0x006C
    1724:	90 91 6d 00 	lds	r25, 0x006D
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	61 f0       	breq	.+24     	; 0x1744 <__vector_3+0x4e>
	{
		/*Clear INT2 Flag*/
		SET_BIT(GIFR , GIFR_INTF2);
    172c:	aa e5       	ldi	r26, 0x5A	; 90
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ea e5       	ldi	r30, 0x5A	; 90
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 62       	ori	r24, 0x20	; 32
    1738:	8c 93       	st	X, r24

		EXTI_CallBackPtr[2]();			// We put () because this is pointer to call function.
    173a:	e0 91 6c 00 	lds	r30, 0x006C
    173e:	f0 91 6d 00 	lds	r31, 0x006D
    1742:	09 95       	icall
	}
	else
	{
		// DO NOTHING
	}
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	ff 91       	pop	r31
    174a:	ef 91       	pop	r30
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	7f 91       	pop	r23
    1756:	6f 91       	pop	r22
    1758:	5f 91       	pop	r21
    175a:	4f 91       	pop	r20
    175c:	3f 91       	pop	r19
    175e:	2f 91       	pop	r18
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <GIE_voidEnableGlobal>:
#include "GIE_Register.h"



void GIE_voidEnableGlobal  ( void )
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
	__asm volatile ("SEI"); 						// ASSEMBLY INSTRUCTION
    1772:	78 94       	sei
	/* SET_BIT(SREG, SREG_I); ANOTHER WAY WITHOUT USING ASSEMBLY LANGUAGE*/
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <GIE_voidDisableGlobal>:


void GIE_voidDisableGlobal ( void )
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	__asm volatile ("CLI");
    1782:	f8 94       	cli
	/* CLR_BIT(SREG, SREG_I); ANOTHER WAY WITHOUT USING ASSEMBLY LANGUAGE*/
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <main>:
#include "util/delay.h"



int main()
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	#if		MAIN_APP == EXTI_TEST
			EXTI_test();
    1792:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <EXTI_test>
	#else
	#endif



	return 0;
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <EXTI_test>:
#include "util/delay.h"



void EXTI_test(void)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
	//Set INT0 Directions -> Pull up
	DIO_voidSetPinDirection(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_INPUT);
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	62 e0       	ldi	r22, 0x02	; 2
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_HIGH);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	62 e0       	ldi	r22, 0x02	; 2
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>

	//Set INT1 Directions -> Pull up
	DIO_voidSetPinDirection(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8PIN_INPUT);
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	63 e0       	ldi	r22, 0x03	; 3
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8PIN_HIGH);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	//Set INT2 Directions -> Pull up
	DIO_voidSetPinDirection(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_INPUT);	//PULL UP Button 2
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_HIGH);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>


	DIO_voidSetPinDirection(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_OUTPUT);	//LED
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPortDirection(DIO_u8PORTC, DIO_u8PORT_OUTPUT);				//LEDS
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	6f ef       	ldi	r22, 0xFF	; 255
    17fe:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>


	GIE_voidEnableGlobal();
    1802:	0e 94 b5 0b 	call	0x176a	; 0x176a <GIE_voidEnableGlobal>
	EXTI_voidINTInit();
    1806:	0e 94 96 09 	call	0x132c	; 0x132c <EXTI_voidINTInit>
	EXTI0_voidSetTriggerSource(EXTI_RISING_EDGE);
    180a:	84 e0       	ldi	r24, 0x04	; 4
    180c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <EXTI0_voidSetTriggerSource>
	EXTI1_voidSetTriggerSource(EXTI_RISING_EDGE);		// Don't to enable the interrupt 1 from config file
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	0e 94 3d 0a 	call	0x147a	; 0x147a <EXTI1_voidSetTriggerSource>
	EXTI2_voidSetTriggerSource(EXTI_RISING_EDGE);		// Don't to enable the interrupt 2 from config file
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	0e 94 a5 0a 	call	0x154a	; 0x154a <EXTI2_voidSetTriggerSource>

	EXTI_voidCallBackINT0(Led3456);
    181c:	89 e5       	ldi	r24, 0x59	; 89
    181e:	9e e0       	ldi	r25, 0x0E	; 14
    1820:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EXTI_voidCallBackINT0>
	EXTI_voidCallBackINT1(Led12);
    1824:	81 eb       	ldi	r24, 0xB1	; 177
    1826:	9d e0       	ldi	r25, 0x0D	; 13
    1828:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <EXTI_voidCallBackINT1>
	EXTI_voidCallBackINT2(Led0);
    182c:	89 e0       	ldi	r24, 0x09	; 9
    182e:	9d e0       	ldi	r25, 0x0D	; 13
    1830:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <EXTI_voidCallBackINT2>


	while(1)
	{

		DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_HIGH);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a8 ec       	ldi	r26, 0xC8	; 200
    1844:	b2 e4       	ldi	r27, 0x42	; 66
    1846:	89 8f       	std	Y+25, r24	; 0x19
    1848:	9a 8f       	std	Y+26, r25	; 0x1a
    184a:	ab 8f       	std	Y+27, r26	; 0x1b
    184c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184e:	69 8d       	ldd	r22, Y+25	; 0x19
    1850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	55 e4       	ldi	r21, 0x45	; 69
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8d 8b       	std	Y+21, r24	; 0x15
    1868:	9e 8b       	std	Y+22, r25	; 0x16
    186a:	af 8b       	std	Y+23, r26	; 0x17
    186c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	2c f4       	brge	.+10     	; 0x1890 <EXTI_test+0xf0>
		__ticks = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 8b       	std	Y+20, r25	; 0x14
    188c:	8b 8b       	std	Y+19, r24	; 0x13
    188e:	3f c0       	rjmp	.+126    	; 0x190e <EXTI_test+0x16e>
	else if (__tmp > 65535)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	4c f5       	brge	.+82     	; 0x18fa <EXTI_test+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a8:	69 8d       	ldd	r22, Y+25	; 0x19
    18aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <EXTI_test+0x150>
    18d2:	80 e9       	ldi	r24, 0x90	; 144
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	9a 8b       	std	Y+18, r25	; 0x12
    18d8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18da:	89 89       	ldd	r24, Y+17	; 0x11
    18dc:	9a 89       	ldd	r25, Y+18	; 0x12
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <EXTI_test+0x13e>
    18e2:	9a 8b       	std	Y+18, r25	; 0x12
    18e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <EXTI_test+0x132>
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <EXTI_test+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	98 8b       	std	Y+16, r25	; 0x10
    1914:	8f 87       	std	Y+15, r24	; 0x0f
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	98 89       	ldd	r25, Y+16	; 0x10
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <EXTI_test+0x17a>
    191e:	98 8b       	std	Y+16, r25	; 0x10
    1920:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_LOW);
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a8 ec       	ldi	r26, 0xC8	; 200
    1932:	b2 e4       	ldi	r27, 0x42	; 66
    1934:	8b 87       	std	Y+11, r24	; 0x0b
    1936:	9c 87       	std	Y+12, r25	; 0x0c
    1938:	ad 87       	std	Y+13, r26	; 0x0d
    193a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193c:	6b 85       	ldd	r22, Y+11	; 0x0b
    193e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1940:	8d 85       	ldd	r24, Y+13	; 0x0d
    1942:	9e 85       	ldd	r25, Y+14	; 0x0e
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4a e7       	ldi	r20, 0x7A	; 122
    194a:	55 e4       	ldi	r21, 0x45	; 69
    194c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	8f 83       	std	Y+7, r24	; 0x07
    1956:	98 87       	std	Y+8, r25	; 0x08
    1958:	a9 87       	std	Y+9, r26	; 0x09
    195a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1970:	88 23       	and	r24, r24
    1972:	2c f4       	brge	.+10     	; 0x197e <EXTI_test+0x1de>
		__ticks = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <EXTI_test+0x25c>
	else if (__tmp > 65535)
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	4f e7       	ldi	r20, 0x7F	; 127
    198c:	57 e4       	ldi	r21, 0x47	; 71
    198e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1992:	18 16       	cp	r1, r24
    1994:	4c f5       	brge	.+82     	; 0x19e8 <EXTI_test+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1996:	6b 85       	ldd	r22, Y+11	; 0x0b
    1998:	7c 85       	ldd	r23, Y+12	; 0x0c
    199a:	8d 85       	ldd	r24, Y+13	; 0x0d
    199c:	9e 85       	ldd	r25, Y+14	; 0x0e
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e2       	ldi	r20, 0x20	; 32
    19a4:	51 e4       	ldi	r21, 0x41	; 65
    19a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	0f c0       	rjmp	.+30     	; 0x19de <EXTI_test+0x23e>
    19c0:	80 e9       	ldi	r24, 0x90	; 144
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	9c 83       	std	Y+4, r25	; 0x04
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <EXTI_test+0x22c>
    19d0:	9c 83       	std	Y+4, r25	; 0x04
    19d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <EXTI_test+0x220>
    19e6:	26 cf       	rjmp	.-436    	; 0x1834 <EXTI_test+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <EXTI_test+0x268>
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	11 cf       	rjmp	.-478    	; 0x1834 <EXTI_test+0x94>

00001a12 <Led0>:
}



void Led0(void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN0 , DIO_u8PIN_HIGH);
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN1 , DIO_u8PIN_LOW);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN2 , DIO_u8PIN_LOW);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	62 e0       	ldi	r22, 0x02	; 2
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN3 , DIO_u8PIN_LOW);
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	63 e0       	ldi	r22, 0x03	; 3
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN4 , DIO_u8PIN_LOW);
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	64 e0       	ldi	r22, 0x04	; 4
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN5 , DIO_u8PIN_LOW);
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	65 e0       	ldi	r22, 0x05	; 5
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN6 , DIO_u8PIN_LOW);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	66 e0       	ldi	r22, 0x06	; 6
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	aa ef       	ldi	r26, 0xFA	; 250
    1a72:	b3 e4       	ldi	r27, 0x43	; 67
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <Led0+0xac>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <Led0+0x12a>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <Led0+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <Led0+0x10c>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <Led0+0xfa>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <Led0+0xee>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <Led0+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <Led0+0x136>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    1b50:	2e 96       	adiw	r28, 0x0e	; 14
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <Led12>:

void Led12(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN0 , DIO_u8PIN_LOW);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN1 , DIO_u8PIN_HIGH);
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN2 , DIO_u8PIN_HIGH);
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN3 , DIO_u8PIN_LOW);
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	63 e0       	ldi	r22, 0x03	; 3
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN4 , DIO_u8PIN_LOW);
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	64 e0       	ldi	r22, 0x04	; 4
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN5 , DIO_u8PIN_LOW);
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	65 e0       	ldi	r22, 0x05	; 5
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN6 , DIO_u8PIN_LOW);
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	66 e0       	ldi	r22, 0x06	; 6
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	aa ef       	ldi	r26, 0xFA	; 250
    1bc2:	b3 e4       	ldi	r27, 0x43	; 67
    1bc4:	8b 87       	std	Y+11, r24	; 0x0b
    1bc6:	9c 87       	std	Y+12, r25	; 0x0c
    1bc8:	ad 87       	std	Y+13, r26	; 0x0d
    1bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	55 e4       	ldi	r21, 0x45	; 69
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8f 83       	std	Y+7, r24	; 0x07
    1be6:	98 87       	std	Y+8, r25	; 0x08
    1be8:	a9 87       	std	Y+9, r26	; 0x09
    1bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <Led12+0xac>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <Led12+0x12a>
	else if (__tmp > 65535)
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <Led12+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <Led12+0x10c>
    1c50:	80 e9       	ldi	r24, 0x90	; 144
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <Led12+0xfa>
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <Led12+0xee>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <Led12+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <Led12+0x136>
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    1ca0:	2e 96       	adiw	r28, 0x0e	; 14
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <Led3456>:


void Led3456(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	2e 97       	sbiw	r28, 0x0e	; 14
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN0 , DIO_u8PIN_LOW);
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN1 , DIO_u8PIN_LOW);
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN2 , DIO_u8PIN_LOW);
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN3 , DIO_u8PIN_HIGH);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	63 e0       	ldi	r22, 0x03	; 3
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN4 , DIO_u8PIN_HIGH);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN5 , DIO_u8PIN_HIGH);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	65 e0       	ldi	r22, 0x05	; 5
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8PORTC , DIO_u8PIN6 , DIO_u8PIN_HIGH);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	aa ef       	ldi	r26, 0xFA	; 250
    1d12:	b3 e4       	ldi	r27, 0x43	; 67
    1d14:	8b 87       	std	Y+11, r24	; 0x0b
    1d16:	9c 87       	std	Y+12, r25	; 0x0c
    1d18:	ad 87       	std	Y+13, r26	; 0x0d
    1d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	55 e4       	ldi	r21, 0x45	; 69
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8f 83       	std	Y+7, r24	; 0x07
    1d36:	98 87       	std	Y+8, r25	; 0x08
    1d38:	a9 87       	std	Y+9, r26	; 0x09
    1d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <Led3456+0xac>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <Led3456+0x12a>
	else if (__tmp > 65535)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <Led3456+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <Led3456+0x10c>
    1da0:	80 e9       	ldi	r24, 0x90	; 144
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	8b 83       	std	Y+3, r24	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <Led3456+0xfa>
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <Led3456+0xee>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <Led3456+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <Led3456+0x136>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    1df0:	2e 96       	adiw	r28, 0x0e	; 14
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <EXTI_nesting>:
#include "../EXTI_driver/EXTI_interface.h"
#include "util/delay.h"


void EXTI_nesting(void)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	6c 97       	sbiw	r28, 0x1c	; 28
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
	//Set INT0 Directions -> Pull up
	DIO_voidSetPinDirection(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_INPUT);
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8PIN_HIGH);
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>

	//Set INT1 Directions -> Pull up
	DIO_voidSetPinDirection(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8PIN_INPUT);
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	63 e0       	ldi	r22, 0x03	; 3
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8PIN_HIGH);
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>


	//Set Led1 Directions -> Output
	DIO_voidSetPinDirection(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_OUTPUT);
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_LOW);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>

	//Set Led2 Directions -> Output
	DIO_voidSetPinDirection(DIO_u8PORTA , DIO_u8PIN1 , DIO_u8PIN_OUTPUT);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN1 , DIO_u8PIN_LOW);
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>


	GIE_voidEnableGlobal();
    1e66:	0e 94 b5 0b 	call	0x176a	; 0x176a <GIE_voidEnableGlobal>
	EXTI_voidINTInit();
    1e6a:	0e 94 96 09 	call	0x132c	; 0x132c <EXTI_voidINTInit>
	EXTI0_voidSetTriggerSource(EXTI_FALLING_EDGE);
    1e6e:	83 e0       	ldi	r24, 0x03	; 3
    1e70:	0e 94 d5 09 	call	0x13aa	; 0x13aa <EXTI0_voidSetTriggerSource>
	EXTI1_voidSetTriggerSource(EXTI_RISING_EDGE);		// Don't to enable the interrupt 1 from config file
    1e74:	84 e0       	ldi	r24, 0x04	; 4
    1e76:	0e 94 3d 0a 	call	0x147a	; 0x147a <EXTI1_voidSetTriggerSource>

	EXTI_voidCallBackINT0(LedON);
    1e7a:	84 e3       	ldi	r24, 0x34	; 52
    1e7c:	90 e1       	ldi	r25, 0x10	; 16
    1e7e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EXTI_voidCallBackINT0>
	EXTI_voidCallBackINT1(LedOFF);
    1e82:	80 e4       	ldi	r24, 0x40	; 64
    1e84:	90 e1       	ldi	r25, 0x10	; 16
    1e86:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <EXTI_voidCallBackINT1>


	while(1)
	{
		DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN1 , DIO_u8PIN_HIGH);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a8 e4       	ldi	r26, 0x48	; 72
    1e9a:	b3 e4       	ldi	r27, 0x43	; 67
    1e9c:	89 8f       	std	Y+25, r24	; 0x19
    1e9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ea2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	55 e4       	ldi	r21, 0x45	; 69
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8d 8b       	std	Y+21, r24	; 0x15
    1ebe:	9e 8b       	std	Y+22, r25	; 0x16
    1ec0:	af 8b       	std	Y+23, r26	; 0x17
    1ec2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <EXTI_nesting+0xe4>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 8b       	std	Y+20, r25	; 0x14
    1ee2:	8b 8b       	std	Y+19, r24	; 0x13
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <EXTI_nesting+0x162>
	else if (__tmp > 65535)
    1ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eea:	8f 89       	ldd	r24, Y+23	; 0x17
    1eec:	98 8d       	ldd	r25, Y+24	; 0x18
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <EXTI_nesting+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	69 8d       	ldd	r22, Y+25	; 0x19
    1f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <EXTI_nesting+0x144>
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	9a 8b       	std	Y+18, r25	; 0x12
    1f2e:	89 8b       	std	Y+17, r24	; 0x11
    1f30:	89 89       	ldd	r24, Y+17	; 0x11
    1f32:	9a 89       	ldd	r25, Y+18	; 0x12
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <EXTI_nesting+0x132>
    1f38:	9a 8b       	std	Y+18, r25	; 0x12
    1f3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9c 8b       	std	Y+20, r25	; 0x14
    1f44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <EXTI_nesting+0x126>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <EXTI_nesting+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
    1f64:	8b 89       	ldd	r24, Y+19	; 0x13
    1f66:	9c 89       	ldd	r25, Y+20	; 0x14
    1f68:	98 8b       	std	Y+16, r25	; 0x10
    1f6a:	8f 87       	std	Y+15, r24	; 0x0f
    1f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6e:	98 89       	ldd	r25, Y+16	; 0x10
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <EXTI_nesting+0x16e>
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN1 , DIO_u8PIN_LOW);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	61 e0       	ldi	r22, 0x01	; 1
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a8 e4       	ldi	r26, 0x48	; 72
    1f88:	b3 e4       	ldi	r27, 0x43	; 67
    1f8a:	8b 87       	std	Y+11, r24	; 0x0b
    1f8c:	9c 87       	std	Y+12, r25	; 0x0c
    1f8e:	ad 87       	std	Y+13, r26	; 0x0d
    1f90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a e7       	ldi	r20, 0x7A	; 122
    1fa0:	55 e4       	ldi	r21, 0x45	; 69
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8f 83       	std	Y+7, r24	; 0x07
    1fac:	98 87       	std	Y+8, r25	; 0x08
    1fae:	a9 87       	std	Y+9, r26	; 0x09
    1fb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e8       	ldi	r20, 0x80	; 128
    1fc0:	5f e3       	ldi	r21, 0x3F	; 63
    1fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc6:	88 23       	and	r24, r24
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <EXTI_nesting+0x1d2>
		__ticks = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	3f c0       	rjmp	.+126    	; 0x2052 <EXTI_nesting+0x250>
	else if (__tmp > 65535)
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	4c f5       	brge	.+82     	; 0x203e <EXTI_nesting+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e2       	ldi	r20, 0x20	; 32
    1ffa:	51 e4       	ldi	r21, 0x41	; 65
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <EXTI_nesting+0x232>
    2016:	80 e9       	ldi	r24, 0x90	; 144
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	9c 83       	std	Y+4, r25	; 0x04
    201c:	8b 83       	std	Y+3, r24	; 0x03
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <EXTI_nesting+0x220>
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	69 f7       	brne	.-38     	; 0x2016 <EXTI_nesting+0x214>
    203c:	26 cf       	rjmp	.-436    	; 0x1e8a <EXTI_nesting+0x88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	9a 83       	std	Y+2, r25	; 0x02
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <EXTI_nesting+0x25c>
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	11 cf       	rjmp	.-478    	; 0x1e8a <EXTI_nesting+0x88>

00002068 <LedON>:




void LedON()
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_LOW);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <LedOFF>:

void LedOFF()
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8PIN_HIGH);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 ef 06 	call	0xdde	; 0xdde <DIO_voidSetPinValue>
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <__prologue_saves__>:
    2098:	2f 92       	push	r2
    209a:	3f 92       	push	r3
    209c:	4f 92       	push	r4
    209e:	5f 92       	push	r5
    20a0:	6f 92       	push	r6
    20a2:	7f 92       	push	r7
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	ca 1b       	sub	r28, r26
    20c2:	db 0b       	sbc	r29, r27
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	09 94       	ijmp

000020d0 <__epilogue_restores__>:
    20d0:	2a 88       	ldd	r2, Y+18	; 0x12
    20d2:	39 88       	ldd	r3, Y+17	; 0x11
    20d4:	48 88       	ldd	r4, Y+16	; 0x10
    20d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    20d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    20da:	7d 84       	ldd	r7, Y+13	; 0x0d
    20dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    20de:	9b 84       	ldd	r9, Y+11	; 0x0b
    20e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20e2:	b9 84       	ldd	r11, Y+9	; 0x09
    20e4:	c8 84       	ldd	r12, Y+8	; 0x08
    20e6:	df 80       	ldd	r13, Y+7	; 0x07
    20e8:	ee 80       	ldd	r14, Y+6	; 0x06
    20ea:	fd 80       	ldd	r15, Y+5	; 0x05
    20ec:	0c 81       	ldd	r16, Y+4	; 0x04
    20ee:	1b 81       	ldd	r17, Y+3	; 0x03
    20f0:	aa 81       	ldd	r26, Y+2	; 0x02
    20f2:	b9 81       	ldd	r27, Y+1	; 0x01
    20f4:	ce 0f       	add	r28, r30
    20f6:	d1 1d       	adc	r29, r1
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	ed 01       	movw	r28, r26
    2104:	08 95       	ret

00002106 <_exit>:
    2106:	f8 94       	cli

00002108 <__stop_program>:
    2108:	ff cf       	rjmp	.-2      	; 0x2108 <__stop_program>
