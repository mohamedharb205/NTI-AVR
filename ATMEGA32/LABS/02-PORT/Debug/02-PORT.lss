
02-PORT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000005e8  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000072a  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PORT_voidInit>:




void PORT_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA  = PORTA_DIR;
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e7       	ldi	r24, 0x70	; 112
  7a:	80 83       	st	Z, r24
	DDRB  = PORTB_DIR;
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	80 83       	st	Z, r24
	DDRC  = PORTC_DIR;
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	10 82       	st	Z, r1
	DDRD  = PORTD_DIR;
  8a:	e1 e3       	ldi	r30, 0x31	; 49
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	10 82       	st	Z, r1

	PORTA = PORTA_VAL;
  90:	eb e3       	ldi	r30, 0x3B	; 59
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e7       	ldi	r24, 0x70	; 112
  96:	80 83       	st	Z, r24
	PORTB = PORTB_VAL;
  98:	e8 e3       	ldi	r30, 0x38	; 56
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 83       	st	Z, r24
	PORTC = PORTC_VAL;
  a0:	e5 e3       	ldi	r30, 0x35	; 53
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
	PORTD = PORTD_VAL;
  a6:	e2 e3       	ldi	r30, 0x32	; 50
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <main>:
#include "util/delay.h"



int main()
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	#if		MAIN_APP == LED_ON
			Led_ON();
  ba:	0e 94 64 00 	call	0xc8	; 0xc8 <Led_ON>
	#else
	#endif



	return 0;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
}
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <Led_ON>:




void Led_ON()
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	// Configuration
	PORT_voidInit();
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <PORT_voidInit>

	while(1)
	{
		asm("NOP");
  d4:	00 00       	nop
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <Led_ON+0xc>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
