
07-KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002868  000028fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800182  00800182  00002a1e  2**0
                  ALLOC
  3 .stab         00002004  00000000  00000000  00002a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f87  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000059ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000094be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a698  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ab4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 13 	call	0x2624	; 0x2624 <main>
      8a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidSetPinDirection>:
		/*		- Copy_u8Port: The port to set the pin direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*		- Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*		- Copy_u8Direction: The desired direction (DIO_u8PIN_OUTPUT or DIO_u8PIN_INPUT).							*/
		/********************************************************************************************************************/
		void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
		{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	08 f0       	brcs	.+2      	; 0xe1a <DIO_voidSetPinDirection+0x22>
     e18:	ee c0       	rjmp	.+476    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <DIO_voidSetPinDirection+0x2a>
     e20:	ea c0       	rjmp	.+468    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
			{
				if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	09 f0       	breq	.+2      	; 0xe2a <DIO_voidSetPinDirection+0x32>
     e28:	6f c0       	rjmp	.+222    	; 0xf08 <DIO_voidSetPinDirection+0x110>
				{
					switch(Copy_u8Port)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	3f 83       	std	Y+7, r19	; 0x07
     e32:	2e 83       	std	Y+6, r18	; 0x06
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	91 05       	cpc	r25, r1
     e3c:	49 f1       	breq	.+82     	; 0xe90 <DIO_voidSetPinDirection+0x98>
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	3f 81       	ldd	r19, Y+7	; 0x07
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	2c f4       	brge	.+10     	; 0xe52 <DIO_voidSetPinDirection+0x5a>
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	61 f0       	breq	.+24     	; 0xe68 <DIO_voidSetPinDirection+0x70>
     e50:	d2 c0       	rjmp	.+420    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     e52:	2e 81       	ldd	r18, Y+6	; 0x06
     e54:	3f 81       	ldd	r19, Y+7	; 0x07
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	71 f1       	breq	.+92     	; 0xeb8 <DIO_voidSetPinDirection+0xc0>
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	91 05       	cpc	r25, r1
     e64:	e9 f1       	breq	.+122    	; 0xee0 <DIO_voidSetPinDirection+0xe8>
     e66:	c7 c0       	rjmp	.+398    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(DDRA , Copy_u8Pin); 	break;
     e68:	aa e3       	ldi	r26, 0x3A	; 58
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_voidSetPinDirection+0x8e>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_voidSetPinDirection+0x8a>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	b3 c0       	rjmp	.+358    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  SET_BIT(DDRB , Copy_u8Pin); 	break;
     e90:	a7 e3       	ldi	r26, 0x37	; 55
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e7 e3       	ldi	r30, 0x37	; 55
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinDirection+0xb6>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinDirection+0xb2>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	9f c0       	rjmp	.+318    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  SET_BIT(DDRC , Copy_u8Pin); 	break;
     eb8:	a4 e3       	ldi	r26, 0x34	; 52
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e4 e3       	ldi	r30, 0x34	; 52
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinDirection+0xde>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinDirection+0xda>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	8b c0       	rjmp	.+278    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  SET_BIT(DDRD , Copy_u8Pin); 	break;
     ee0:	a1 e3       	ldi	r26, 0x31	; 49
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_voidSetPinDirection+0x106>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_voidSetPinDirection+0x102>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	77 c0       	rjmp	.+238    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						default       :  								break;
					}
				}
				else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <DIO_voidSetPinDirection+0x118>
     f0e:	73 c0       	rjmp	.+230    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
				{
					switch(Copy_u8Port)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	59 f1       	breq	.+86     	; 0xf7a <DIO_voidSetPinDirection+0x182>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	2c f4       	brge	.+10     	; 0xf38 <DIO_voidSetPinDirection+0x140>
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f0       	breq	.+26     	; 0xf50 <DIO_voidSetPinDirection+0x158>
     f36:	5f c0       	rjmp	.+190    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	89 f1       	breq	.+98     	; 0xfa4 <DIO_voidSetPinDirection+0x1ac>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <DIO_voidSetPinDirection+0x156>
     f4c:	40 c0       	rjmp	.+128    	; 0xfce <DIO_voidSetPinDirection+0x1d6>
     f4e:	53 c0       	rjmp	.+166    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(DDRA , Copy_u8Pin); 	break;
     f50:	aa e3       	ldi	r26, 0x3A	; 58
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ea e3       	ldi	r30, 0x3A	; 58
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_voidSetPinDirection+0x176>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_voidSetPinDirection+0x172>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	3e c0       	rjmp	.+124    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(DDRB , Copy_u8Pin); 	break;
     f7a:	a7 e3       	ldi	r26, 0x37	; 55
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e3       	ldi	r30, 0x37	; 55
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_voidSetPinDirection+0x1a0>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_voidSetPinDirection+0x19c>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	29 c0       	rjmp	.+82     	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(DDRC , Copy_u8Pin); 	break;
     fa4:	a4 e3       	ldi	r26, 0x34	; 52
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e4 e3       	ldi	r30, 0x34	; 52
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinDirection+0x1ca>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinDirection+0x1c6>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(DDRD , Copy_u8Pin); 	break;
     fce:	a1 e3       	ldi	r26, 0x31	; 49
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e3       	ldi	r30, 0x31	; 49
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_voidSetPinDirection+0x1f4>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_voidSetPinDirection+0x1f0>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
						default       :  								break;
					}
				}
			}
		}
     ff6:	27 96       	adiw	r28, 0x07	; 7
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_voidSetPortDirection>:
		/*   Parameters:																								*/
		/*        - Copy_u8Port: The port to set the direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).*/
		/*        - Copy_u8Direction: The desired direction (DIO_PORT_OUTPUT or DIO_PORT_INPUT).						*/
		/****************************************************************************************************************/
		void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
		{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_voidSetPortDirection+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_voidSetPortDirection+0x8>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	90 f5       	brcc	.+100    	; 0x1082 <DIO_voidSetPortDirection+0x7a>
			{
				switch(Copy_u8Port)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3c 83       	std	Y+4, r19	; 0x04
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	d1 f0       	breq	.+52     	; 0x1066 <DIO_voidSetPortDirection+0x5e>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	2c f4       	brge	.+10     	; 0x1046 <DIO_voidSetPortDirection+0x3e>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	61 f0       	breq	.+24     	; 0x105c <DIO_voidSetPortDirection+0x54>
    1044:	1e c0       	rjmp	.+60     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
    1046:	2b 81       	ldd	r18, Y+3	; 0x03
    1048:	3c 81       	ldd	r19, Y+4	; 0x04
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	81 f0       	breq	.+32     	; 0x1070 <DIO_voidSetPortDirection+0x68>
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	81 f0       	breq	.+32     	; 0x107a <DIO_voidSetPortDirection+0x72>
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
				{
					case DIO_u8PORTA:  DDRA = Copy_u8Direction; 		break;
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
    1064:	0e c0       	rjmp	.+28     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTB:  DDRB = Copy_u8Direction; 		break;
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTC:  DDRC = Copy_u8Direction; 		break;
    1070:	e4 e3       	ldi	r30, 0x34	; 52
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 83       	st	Z, r24
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTD:  DDRD = Copy_u8Direction; 		break;
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	80 83       	st	Z, r24
					default       :  									break;
				}
			}
		}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_voidSetPinValue>:
		/*        - Copy_u8Port: The port to set the pin value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).		*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*        - Copy_u8PinValue: The desired value (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).										*/
		/************************************************************************************************************************/
		void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
		{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	27 97       	sbiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02
    10a8:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <DIO_voidSetPinValue+0x22>
    10b0:	ee c0       	rjmp	.+476    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <DIO_voidSetPinValue+0x2a>
    10b8:	ea c0       	rjmp	.+468    	; 0x128e <DIO_voidSetPinValue+0x1fe>
			{
				if(Copy_u8PinValue == DIO_u8PIN_HIGH)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <DIO_voidSetPinValue+0x32>
    10c0:	6f c0       	rjmp	.+222    	; 0x11a0 <DIO_voidSetPinValue+0x110>
				{
					switch(Copy_u8Port)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3f 83       	std	Y+7, r19	; 0x07
    10ca:	2e 83       	std	Y+6, r18	; 0x06
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	49 f1       	breq	.+82     	; 0x1128 <DIO_voidSetPinValue+0x98>
    10d6:	2e 81       	ldd	r18, Y+6	; 0x06
    10d8:	3f 81       	ldd	r19, Y+7	; 0x07
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <DIO_voidSetPinValue+0x5a>
    10e0:	8e 81       	ldd	r24, Y+6	; 0x06
    10e2:	9f 81       	ldd	r25, Y+7	; 0x07
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <DIO_voidSetPinValue+0x70>
    10e8:	d2 c0       	rjmp	.+420    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    10ea:	2e 81       	ldd	r18, Y+6	; 0x06
    10ec:	3f 81       	ldd	r19, Y+7	; 0x07
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f1       	breq	.+92     	; 0x1150 <DIO_voidSetPinValue+0xc0>
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	e9 f1       	breq	.+122    	; 0x1178 <DIO_voidSetPinValue+0xe8>
    10fe:	c7 c0       	rjmp	.+398    	; 0x128e <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(PORTA , Copy_u8Pin); 	break;
    1100:	ab e3       	ldi	r26, 0x3B	; 59
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_voidSetPinValue+0x8e>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_voidSetPinValue+0x8a>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	b3 c0       	rjmp	.+358    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  SET_BIT(PORTB , Copy_u8Pin); 	break;
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_voidSetPinValue+0xb6>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_voidSetPinValue+0xb2>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	9f c0       	rjmp	.+318    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  SET_BIT(PORTC , Copy_u8Pin); 	break;
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_voidSetPinValue+0xde>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_voidSetPinValue+0xda>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	8b c0       	rjmp	.+278    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  SET_BIT(PORTD , Copy_u8Pin); 	break;
    1178:	a2 e3       	ldi	r26, 0x32	; 50
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_voidSetPinValue+0x106>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_voidSetPinValue+0x102>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	77 c0       	rjmp	.+238    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						default       	:  									break;
					}
				}
				else if(Copy_u8PinValue == DIO_u8PIN_LOW)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 23       	and	r24, r24
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <DIO_voidSetPinValue+0x118>
    11a6:	73 c0       	rjmp	.+230    	; 0x128e <DIO_voidSetPinValue+0x1fe>
				{
					switch(Copy_u8Port)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	59 f1       	breq	.+86     	; 0x1212 <DIO_voidSetPinValue+0x182>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <DIO_voidSetPinValue+0x140>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f0       	breq	.+26     	; 0x11e8 <DIO_voidSetPinValue+0x158>
    11ce:	5f c0       	rjmp	.+190    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	89 f1       	breq	.+98     	; 0x123c <DIO_voidSetPinValue+0x1ac>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_voidSetPinValue+0x156>
    11e4:	40 c0       	rjmp	.+128    	; 0x1266 <DIO_voidSetPinValue+0x1d6>
    11e6:	53 c0       	rjmp	.+166    	; 0x128e <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(PORTA , Copy_u8Pin); 	break;
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	eb e3       	ldi	r30, 0x3B	; 59
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_voidSetPinValue+0x176>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_voidSetPinValue+0x172>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	3e c0       	rjmp	.+124    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(PORTB , Copy_u8Pin); 	break;
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_voidSetPinValue+0x1a0>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_voidSetPinValue+0x19c>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	29 c0       	rjmp	.+82     	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(PORTC , Copy_u8Pin); 	break;
    123c:	a5 e3       	ldi	r26, 0x35	; 53
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_voidSetPinValue+0x1ca>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_voidSetPinValue+0x1c6>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	14 c0       	rjmp	.+40     	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(PORTD , Copy_u8Pin); 	break;
    1266:	a2 e3       	ldi	r26, 0x32	; 50
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_voidSetPinValue+0x1f4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_voidSetPinValue+0x1f0>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
						default       	:  									break;
					}
				}
			}
		}
    128e:	27 96       	adiw	r28, 0x07	; 7
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_voidSetPortValue>:
		/*    Parameters:																								*/
		/*        - Copy_u8Port: The port to set the value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8PortVALUE: The desired value (DIO_u8PORT_HIGH or DIO_u8PORT_LOW).							*/
		/****************************************************************************************************************/
		void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8PortValue)
		{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_voidSetPortValue+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_voidSetPortValue+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	90 f5       	brcc	.+100    	; 0x131a <DIO_voidSetPortValue+0x7a>
			{
				switch(Copy_u8Port)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <DIO_voidSetPortValue+0x5e>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <DIO_voidSetPortValue+0x3e>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <DIO_voidSetPortValue+0x54>
    12dc:	1e c0       	rjmp	.+60     	; 0x131a <DIO_voidSetPortValue+0x7a>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <DIO_voidSetPortValue+0x68>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <DIO_voidSetPortValue+0x72>
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <DIO_voidSetPortValue+0x7a>
				{
					case DIO_u8PORTA:  	PORTA = Copy_u8PortValue; 		break;
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	0e c0       	rjmp	.+28     	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTB:  	PORTB = Copy_u8PortValue; 		break;
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	09 c0       	rjmp	.+18     	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTC:  	PORTC = Copy_u8PortValue; 		break;
    1308:	e5 e3       	ldi	r30, 0x35	; 53
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	04 c0       	rjmp	.+8      	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTD:  	PORTD = Copy_u8PortValue; 		break;
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
					default       	: 									break;
				}
			}
		}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO_u8GetPinValue>:
		/*        - Copy_u8Port: The port to read the pin value from (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.														*/
		/*    Returns: The value of the pin (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).												*/
		/********************************************************************************************************************/
		u8 	 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_u8GetPinValue+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_u8GetPinValue+0x8>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_u8GetPinValue+0xa>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	6b 83       	std	Y+3, r22	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	08 f0       	brcs	.+2      	; 0x1342 <DIO_u8GetPinValue+0x1a>
    1340:	6e c0       	rjmp	.+220    	; 0x141e <DIO_u8GetPinValue+0xf6>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO_u8GetPinValue+0x22>
    1348:	6a c0       	rjmp	.+212    	; 0x141e <DIO_u8GetPinValue+0xf6>
			{
				u8 Local_u8PinValue;

				switch(Copy_u8Port)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	4d 81       	ldd	r20, Y+5	; 0x05
    1356:	5e 81       	ldd	r21, Y+6	; 0x06
    1358:	41 30       	cpi	r20, 0x01	; 1
    135a:	51 05       	cpc	r21, r1
    135c:	41 f1       	breq	.+80     	; 0x13ae <DIO_u8GetPinValue+0x86>
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	91 05       	cpc	r25, r1
    1366:	34 f4       	brge	.+12     	; 0x1374 <DIO_u8GetPinValue+0x4c>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	21 15       	cp	r18, r1
    136e:	31 05       	cpc	r19, r1
    1370:	61 f0       	breq	.+24     	; 0x138a <DIO_u8GetPinValue+0x62>
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <DIO_u8GetPinValue+0xf0>
    1374:	4d 81       	ldd	r20, Y+5	; 0x05
    1376:	5e 81       	ldd	r21, Y+6	; 0x06
    1378:	42 30       	cpi	r20, 0x02	; 2
    137a:	51 05       	cpc	r21, r1
    137c:	51 f1       	breq	.+84     	; 0x13d2 <DIO_u8GetPinValue+0xaa>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	b9 f1       	breq	.+110    	; 0x13f6 <DIO_u8GetPinValue+0xce>
    1388:	47 c0       	rjmp	.+142    	; 0x1418 <DIO_u8GetPinValue+0xf0>
				{
					case DIO_u8PORTA: 	Local_u8PinValue = GET_BIT(PINA , Copy_u8Pin); 		break;
    138a:	e9 e3       	ldi	r30, 0x39	; 57
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0x7a>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0x76>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	35 c0       	rjmp	.+106    	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTB: 	Local_u8PinValue = GET_BIT(PINB , Copy_u8Pin); 		break;
    13ae:	e6 e3       	ldi	r30, 0x36	; 54
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinValue+0x9e>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinValue+0x9a>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	23 c0       	rjmp	.+70     	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTC: 	Local_u8PinValue = GET_BIT(PINC , Copy_u8Pin); 		break;
    13d2:	e3 e3       	ldi	r30, 0x33	; 51
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinValue+0xc2>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinValue+0xbe>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	11 c0       	rjmp	.+34     	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTD: 	Local_u8PinValue = GET_BIT(PIND , Copy_u8Pin); 		break;
    13f6:	e0 e3       	ldi	r30, 0x30	; 48
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8GetPinValue+0xe6>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8GetPinValue+0xe2>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
					default      	: 														break;
				}

				return Local_u8PinValue;
    1418:	59 81       	ldd	r21, Y+1	; 0x01
    141a:	5c 83       	std	Y+4, r21	; 0x04
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8GetPinValue+0xfa>
			}

			else
			{
				return	-1;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	8c 83       	std	Y+4, r24	; 0x04
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
			}
		}
    1424:	26 96       	adiw	r28, 0x06	; 6
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_voidTogglePin>:
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pin to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) to be toggled.																	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePin(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_voidTogglePin+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_voidTogglePin+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	08 f0       	brcs	.+2      	; 0x144e <DIO_voidTogglePin+0x18>
    144c:	72 c0       	rjmp	.+228    	; 0x1532 <DIO_voidTogglePin+0xfc>
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	88 30       	cpi	r24, 0x08	; 8
    1452:	08 f0       	brcs	.+2      	; 0x1456 <DIO_voidTogglePin+0x20>
    1454:	6e c0       	rjmp	.+220    	; 0x1532 <DIO_voidTogglePin+0xfc>
			{
				switch (Copy_u8Port)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	49 f1       	breq	.+82     	; 0x14bc <DIO_voidTogglePin+0x86>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_voidTogglePin+0x48>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <DIO_voidTogglePin+0x5e>
    147c:	5a c0       	rjmp	.+180    	; 0x1532 <DIO_voidTogglePin+0xfc>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	71 f1       	breq	.+92     	; 0x14e4 <DIO_voidTogglePin+0xae>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	e9 f1       	breq	.+122    	; 0x150c <DIO_voidTogglePin+0xd6>
    1492:	4f c0       	rjmp	.+158    	; 0x1532 <DIO_voidTogglePin+0xfc>
				{
					case DIO_u8PORTA : 	TOG_BIT(PORTA , Copy_u8Pin); 		break ;
    1494:	ab e3       	ldi	r26, 0x3B	; 59
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_voidTogglePin+0x7c>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_voidTogglePin+0x78>
    14b6:	84 27       	eor	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	3b c0       	rjmp	.+118    	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTB : 	TOG_BIT(PORTB , Copy_u8Pin); 		break ;
    14bc:	a8 e3       	ldi	r26, 0x38	; 56
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e3       	ldi	r30, 0x38	; 56
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_voidTogglePin+0xa4>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_voidTogglePin+0xa0>
    14de:	84 27       	eor	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTC : 	TOG_BIT(PORTC , Copy_u8Pin); 		break ;
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_voidTogglePin+0xcc>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_voidTogglePin+0xc8>
    1506:	84 27       	eor	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTD :	TOG_BIT(PORTD , Copy_u8Pin); 		break ;
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_voidTogglePin+0xf4>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_voidTogglePin+0xf0>
    152e:	84 27       	eor	r24, r20
    1530:	8c 93       	st	X, r24
					default 	   	 : 							 			break ;
				}
			}
		}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <DIO_voidTogglePort>:
		/*    Description: Toggles the values of the entire port.																	*/
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pins to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePort(u8 Copy_u8Port)
		{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_voidTogglePort+0x6>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	08 f0       	brcs	.+2      	; 0x1556 <DIO_voidTogglePort+0x16>
    1554:	3e c0       	rjmp	.+124    	; 0x15d2 <DIO_voidTogglePort+0x92>
			{
				switch (Copy_u8Port)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3b 83       	std	Y+3, r19	; 0x03
    155e:	2a 83       	std	Y+2, r18	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	e9 f0       	breq	.+58     	; 0x15a4 <DIO_voidTogglePort+0x64>
    156a:	2a 81       	ldd	r18, Y+2	; 0x02
    156c:	3b 81       	ldd	r19, Y+3	; 0x03
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	2c f4       	brge	.+10     	; 0x157e <DIO_voidTogglePort+0x3e>
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	61 f0       	breq	.+24     	; 0x1594 <DIO_voidTogglePort+0x54>
    157c:	2a c0       	rjmp	.+84     	; 0x15d2 <DIO_voidTogglePort+0x92>
    157e:	2a 81       	ldd	r18, Y+2	; 0x02
    1580:	3b 81       	ldd	r19, Y+3	; 0x03
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	b1 f0       	breq	.+44     	; 0x15b4 <DIO_voidTogglePort+0x74>
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	9b 81       	ldd	r25, Y+3	; 0x03
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	c9 f0       	breq	.+50     	; 0x15c4 <DIO_voidTogglePort+0x84>
    1592:	1f c0       	rjmp	.+62     	; 0x15d2 <DIO_voidTogglePort+0x92>
				{
					case DIO_u8PORTA : 	TOG_REG(PORTA , DIO_u8PORT_HIGH); 		break ;
    1594:	ab e3       	ldi	r26, 0x3B	; 59
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e3       	ldi	r30, 0x3B	; 59
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 95       	com	r24
    15a0:	8c 93       	st	X, r24
    15a2:	17 c0       	rjmp	.+46     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTB : 	TOG_REG(PORTB , DIO_u8PORT_HIGH); 		break ;
    15a4:	a8 e3       	ldi	r26, 0x38	; 56
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 e3       	ldi	r30, 0x38	; 56
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 95       	com	r24
    15b0:	8c 93       	st	X, r24
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTC : 	TOG_REG(PORTC , DIO_u8PORT_HIGH); 		break ;
    15b4:	a5 e3       	ldi	r26, 0x35	; 53
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 95       	com	r24
    15c0:	8c 93       	st	X, r24
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTD :	TOG_REG(PORTD , DIO_u8PORT_HIGH); 		break ;
    15c4:	a2 e3       	ldi	r26, 0x32	; 50
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 95       	com	r24
    15d0:	8c 93       	st	X, r24
					default 	     :	 										break ;
				}
			}
		}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <KeyPad_voidInit>:
u8 Cols[4] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN, KEYPAD_COL4_PIN};



void KeyPad_voidInit(void)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <KeyPad_voidInit+0x6>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	for(u8 RowCounter = 0; RowCounter < ROWS_NUM; RowCounter++)
    15e8:	1a 82       	std	Y+2, r1	; 0x02
    15ea:	1b c0       	rjmp	.+54     	; 0x1622 <KeyPad_voidInit+0x44>
	{
		DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, Rows[RowCounter], DIO_u8PIN_OUTPUT);
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	fc 01       	movw	r30, r24
    15f4:	e8 59       	subi	r30, 0x98	; 152
    15f6:	fe 4f       	sbci	r31, 0xFE	; 254
    15f8:	90 81       	ld	r25, Z
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	69 2f       	mov	r22, r25
    15fe:	41 e0       	ldi	r20, 0x01	; 1
    1600:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Rows[RowCounter], DIO_u8PIN_HIGH);
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	fc 01       	movw	r30, r24
    160c:	e8 59       	subi	r30, 0x98	; 152
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	90 81       	ld	r25, Z
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	69 2f       	mov	r22, r25
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>



void KeyPad_voidInit(void)
{
	for(u8 RowCounter = 0; RowCounter < ROWS_NUM; RowCounter++)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	84 30       	cpi	r24, 0x04	; 4
    1626:	10 f3       	brcs	.-60     	; 0x15ec <KeyPad_voidInit+0xe>
	{
		DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, Rows[RowCounter], DIO_u8PIN_OUTPUT);
		DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Rows[RowCounter], DIO_u8PIN_HIGH);
	}

	for(u8 ColCounter = 0; ColCounter < COLS_NUM; ColCounter++)
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	1b c0       	rjmp	.+54     	; 0x1662 <KeyPad_voidInit+0x84>
	{
		DIO_voidSetPinDirection(KEYPAD_COLS_PORT, Cols[ColCounter], DIO_u8PIN_INPUT);
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	fc 01       	movw	r30, r24
    1634:	e4 59       	subi	r30, 0x94	; 148
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	90 81       	ld	r25, Z
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	69 2f       	mov	r22, r25
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_COLS_PORT, Cols[ColCounter], DIO_u8PIN_HIGH);	// PULL UP
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	fc 01       	movw	r30, r24
    164c:	e4 59       	subi	r30, 0x94	; 148
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	90 81       	ld	r25, Z
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	69 2f       	mov	r22, r25
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	{
		DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, Rows[RowCounter], DIO_u8PIN_OUTPUT);
		DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Rows[RowCounter], DIO_u8PIN_HIGH);
	}

	for(u8 ColCounter = 0; ColCounter < COLS_NUM; ColCounter++)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	10 f3       	brcs	.-60     	; 0x162c <KeyPad_voidInit+0x4e>
	{
		DIO_voidSetPinDirection(KEYPAD_COLS_PORT, Cols[ColCounter], DIO_u8PIN_INPUT);
		DIO_voidSetPinValue(KEYPAD_COLS_PORT, Cols[ColCounter], DIO_u8PIN_HIGH);	// PULL UP
	}
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <KeyPad_u8GetPress>:



u8 KeyPad_u8GetPress(void)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	61 97       	sbiw	r28, 0x11	; 17
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Col;
	u8 Local_u8Index = KEYPAD_NOT_PRESSED;
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	88 8b       	std	Y+16, r24	; 0x10

	for(u8 RowCounter = 0; RowCounter < ROWS_NUM; RowCounter++)
    168a:	1f 86       	std	Y+15, r1	; 0x0f
    168c:	96 c0       	rjmp	.+300    	; 0x17ba <KeyPad_u8GetPress+0x148>
	{
		Select_voidLine(Rows[RowCounter]);
    168e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	fc 01       	movw	r30, r24
    1696:	e8 59       	subi	r30, 0x98	; 152
    1698:	fe 4f       	sbci	r31, 0xFE	; 254
    169a:	80 81       	ld	r24, Z
    169c:	0e 94 23 0c 	call	0x1846	; 0x1846 <Select_voidLine>
		Local_u8Col = Read_u8Button(Rows[RowCounter]);
    16a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	fc 01       	movw	r30, r24
    16a8:	e8 59       	subi	r30, 0x98	; 152
    16aa:	fe 4f       	sbci	r31, 0xFE	; 254
    16ac:	80 81       	ld	r24, Z
    16ae:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Read_u8Button>
    16b2:	89 8b       	std	Y+17, r24	; 0x11
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
    16b4:	89 89       	ldd	r24, Y+17	; 0x11
    16b6:	8f 3f       	cpi	r24, 0xFF	; 255
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <KeyPad_u8GetPress+0x5e>
			Local_u8Index = (RowCounter*4) + Local_u8Col;
    16ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	98 2f       	mov	r25, r24
    16ca:	89 89       	ldd	r24, Y+17	; 0x11
    16cc:	89 0f       	add	r24, r25
    16ce:	88 8b       	std	Y+16, r24	; 0x10
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e0       	ldi	r26, 0x00	; 0
    16d6:	b0 e4       	ldi	r27, 0x40	; 64
    16d8:	8b 87       	std	Y+11, r24	; 0x0b
    16da:	9c 87       	std	Y+12, r25	; 0x0c
    16dc:	ad 87       	std	Y+13, r26	; 0x0d
    16de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	55 e4       	ldi	r21, 0x45	; 69
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8f 83       	std	Y+7, r24	; 0x07
    16fa:	98 87       	std	Y+8, r25	; 0x08
    16fc:	a9 87       	std	Y+9, r26	; 0x09
    16fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <KeyPad_u8GetPress+0xb0>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <KeyPad_u8GetPress+0x12e>
	else if (__tmp > 65535)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <KeyPad_u8GetPress+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <KeyPad_u8GetPress+0x110>
    1764:	80 e9       	ldi	r24, 0x90	; 144
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <KeyPad_u8GetPress+0xfe>
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <KeyPad_u8GetPress+0xf2>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <KeyPad_u8GetPress+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <KeyPad_u8GetPress+0x13a>
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
u8 KeyPad_u8GetPress(void)
{
	u8 Local_u8Col;
	u8 Local_u8Index = KEYPAD_NOT_PRESSED;

	for(u8 RowCounter = 0; RowCounter < ROWS_NUM; RowCounter++)
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
    17ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <KeyPad_u8GetPress+0x150>
    17c0:	66 cf       	rjmp	.-308    	; 0x168e <KeyPad_u8GetPress+0x1c>
		Local_u8Col = Read_u8Button(Rows[RowCounter]);
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
			Local_u8Index = (RowCounter*4) + Local_u8Col;
		_delay_ms(2);
	}
	return KeyPad_Char[Local_u8Index];
    17c2:	88 89       	ldd	r24, Y+16	; 0x10
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	fc 01       	movw	r30, r24
    17ca:	ef 58       	subi	r30, 0x8F	; 143
    17cc:	fe 4f       	sbci	r31, 0xFE	; 254
    17ce:	80 81       	ld	r24, Z
}
    17d0:	61 96       	adiw	r28, 0x11	; 17
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <Read_u8Button>:



u8 Read_u8Button(u8 Copy_u8Line)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <Read_u8Button+0x6>
    17e8:	0f 92       	push	r0
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 ColCounter = 0; ColCounter < 4; ColCounter++)
    17f0:	19 82       	std	Y+1, r1	; 0x01
    17f2:	18 c0       	rjmp	.+48     	; 0x1824 <Read_u8Button+0x42>
	{
		if(DIO_u8GetPinValue(KEYPAD_COLS_PORT, Cols[ColCounter]) == DIO_u8PIN_LOW)
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	fc 01       	movw	r30, r24
    17fc:	e4 59       	subi	r30, 0x94	; 148
    17fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1800:	90 81       	ld	r25, Z
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	69 2f       	mov	r22, r25
    1806:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_u8GetPinValue>
    180a:	88 23       	and	r24, r24
    180c:	41 f4       	brne	.+16     	; 0x181e <Read_u8Button+0x3c>
		{
			DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Copy_u8Line, DIO_u8PIN_HIGH);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	6a 81       	ldd	r22, Y+2	; 0x02
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			return ColCounter;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	0d c0       	rjmp	.+26     	; 0x1838 <Read_u8Button+0x56>


u8 Read_u8Button(u8 Copy_u8Line)
{

	for(u8 ColCounter = 0; ColCounter < 4; ColCounter++)
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	8f 5f       	subi	r24, 0xFF	; 255
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	28 f3       	brcs	.-54     	; 0x17f4 <Read_u8Button+0x12>
			DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Copy_u8Line, DIO_u8PIN_HIGH);
			return ColCounter;
		}
	}

	DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Copy_u8Line, DIO_u8PIN_HIGH);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	6a 81       	ldd	r22, Y+2	; 0x02
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	return KEYPAD_NOT_PRESSED;
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	8b 83       	std	Y+3, r24	; 0x03
    1838:	8b 81       	ldd	r24, Y+3	; 0x03


}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <Select_voidLine>:
void Select_voidLine(u8 Copy_u8Line)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(KEYPAD_ROWS_PORT, Copy_u8Line, DIO_u8PIN_LOW);
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	69 81       	ldd	r22, Y+1	; 0x01
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
}
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <LCD_voidInit>:



/* Functions Initialization */
void LCD_voidInit()
{
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	c6 54       	subi	r28, 0x46	; 70
    1872:	d0 40       	sbci	r29, 0x00	; 0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
	/* PINS Directions and Initial Values Configuration */
	SET_voidLCDPinsDirection();
    187e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SET_voidLCDPinsDirection>
    1882:	fe 01       	movw	r30, r28
    1884:	ed 5b       	subi	r30, 0xBD	; 189
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a8 ec       	ldi	r26, 0xC8	; 200
    188e:	b2 e4       	ldi	r27, 0x42	; 66
    1890:	80 83       	st	Z, r24
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	a2 83       	std	Z+2, r26	; 0x02
    1896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1898:	8e 01       	movw	r16, r28
    189a:	01 5c       	subi	r16, 0xC1	; 193
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 5b       	subi	r30, 0xBD	; 189
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	55 e4       	ldi	r21, 0x45	; 69
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	f8 01       	movw	r30, r16
    18be:	80 83       	st	Z, r24
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	a2 83       	std	Z+2, r26	; 0x02
    18c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c6:	fe 01       	movw	r30, r28
    18c8:	ff 96       	adiw	r30, 0x3f	; 63
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <LCD_voidInit+0x88>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9e af       	std	Y+62, r25	; 0x3e
    18e8:	8d af       	std	Y+61, r24	; 0x3d
    18ea:	46 c0       	rjmp	.+140    	; 0x1978 <LCD_voidInit+0x114>
	else if (__tmp > 65535)
    18ec:	fe 01       	movw	r30, r28
    18ee:	ff 96       	adiw	r30, 0x3f	; 63
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	64 f5       	brge	.+88     	; 0x1960 <LCD_voidInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	fe 01       	movw	r30, r28
    190a:	ed 5b       	subi	r30, 0xBD	; 189
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e2       	ldi	r20, 0x20	; 32
    191c:	51 e4       	ldi	r21, 0x41	; 65
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9e af       	std	Y+62, r25	; 0x3e
    1934:	8d af       	std	Y+61, r24	; 0x3d
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <LCD_voidInit+0xf2>
    1938:	80 e9       	ldi	r24, 0x90	; 144
    193a:	91 e0       	ldi	r25, 0x01	; 1
    193c:	9c af       	std	Y+60, r25	; 0x3c
    193e:	8b af       	std	Y+59, r24	; 0x3b
    1940:	8b ad       	ldd	r24, Y+59	; 0x3b
    1942:	9c ad       	ldd	r25, Y+60	; 0x3c
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_voidInit+0xe0>
    1948:	9c af       	std	Y+60, r25	; 0x3c
    194a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	8d ad       	ldd	r24, Y+61	; 0x3d
    194e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9e af       	std	Y+62, r25	; 0x3e
    1954:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	8d ad       	ldd	r24, Y+61	; 0x3d
    1958:	9e ad       	ldd	r25, Y+62	; 0x3e
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f7       	brne	.-38     	; 0x1938 <LCD_voidInit+0xd4>
    195e:	16 c0       	rjmp	.+44     	; 0x198c <LCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	fe 01       	movw	r30, r28
    1962:	ff 96       	adiw	r30, 0x3f	; 63
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e af       	std	Y+62, r25	; 0x3e
    1976:	8d af       	std	Y+61, r24	; 0x3d
    1978:	8d ad       	ldd	r24, Y+61	; 0x3d
    197a:	9e ad       	ldd	r25, Y+62	; 0x3e
    197c:	9a af       	std	Y+58, r25	; 0x3a
    197e:	89 af       	std	Y+57, r24	; 0x39
    1980:	89 ad       	ldd	r24, Y+57	; 0x39
    1982:	9a ad       	ldd	r25, Y+58	; 0x3a
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_voidInit+0x120>
    1988:	9a af       	std	Y+58, r25	; 0x3a
    198a:	89 af       	std	Y+57, r24	; 0x39
	#if		CONNECTION_MODE == LCD_FOUR_BIT_MODE	// 4 Bits Mode
			// Wait for more than 30 ms
			_delay_ms(100);

			// Function Set
			Send_voidCommand(FUNCTION_SET1);	// Data length = 4 , N = 2 lines , F = 5*7
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
			Send_voidCommand(FUNCTION_SET2);
    1992:	80 e2       	ldi	r24, 0x20	; 32
    1994:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
			Send_voidCommand(FUNCTION_SET3);
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e8       	ldi	r26, 0x80	; 128
    19a4:	bf e3       	ldi	r27, 0x3F	; 63
    19a6:	8d ab       	std	Y+53, r24	; 0x35
    19a8:	9e ab       	std	Y+54, r25	; 0x36
    19aa:	af ab       	std	Y+55, r26	; 0x37
    19ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6d a9       	ldd	r22, Y+53	; 0x35
    19b0:	7e a9       	ldd	r23, Y+54	; 0x36
    19b2:	8f a9       	ldd	r24, Y+55	; 0x37
    19b4:	98 ad       	ldd	r25, Y+56	; 0x38
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	55 e4       	ldi	r21, 0x45	; 69
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	89 ab       	std	Y+49, r24	; 0x31
    19c8:	9a ab       	std	Y+50, r25	; 0x32
    19ca:	ab ab       	std	Y+51, r26	; 0x33
    19cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LCD_voidInit+0x18c>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LCD_voidInit+0x20a>
	else if (__tmp > 65535)
    19f0:	69 a9       	ldd	r22, Y+49	; 0x31
    19f2:	7a a9       	ldd	r23, Y+50	; 0x32
    19f4:	8b a9       	ldd	r24, Y+51	; 0x33
    19f6:	9c a9       	ldd	r25, Y+52	; 0x34
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LCD_voidInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	98 ab       	std	Y+48, r25	; 0x30
    1a2e:	8f a7       	std	Y+47, r24	; 0x2f
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LCD_voidInit+0x1ec>
    1a32:	80 e9       	ldi	r24, 0x90	; 144
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	9e a7       	std	Y+46, r25	; 0x2e
    1a38:	8d a7       	std	Y+45, r24	; 0x2d
    1a3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_voidInit+0x1da>
    1a42:	9e a7       	std	Y+46, r25	; 0x2e
    1a44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a48:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	98 ab       	std	Y+48, r25	; 0x30
    1a4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	98 a9       	ldd	r25, Y+48	; 0x30
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LCD_voidInit+0x1ce>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <LCD_voidInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a60:	9c a9       	ldd	r25, Y+52	; 0x34
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	98 ab       	std	Y+48, r25	; 0x30
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a70:	98 a9       	ldd	r25, Y+48	; 0x30
    1a72:	9c a7       	std	Y+44, r25	; 0x2c
    1a74:	8b a7       	std	Y+43, r24	; 0x2b
    1a76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_voidInit+0x216>
    1a7e:	9c a7       	std	Y+44, r25	; 0x2c
    1a80:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);	// delay > 39 micro sec

			// Display ON/OFF Control
			Send_voidCommand(DISPLAY_ON_OFF_CONTROL1);	// Display = ON , Cursor = OFF , Blink = OFF
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
			Send_voidCommand(DISPLAY_ON_OFF_CONTROL2);
    1a88:	80 ec       	ldi	r24, 0xC0	; 192
    1a8a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e8       	ldi	r26, 0x80	; 128
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	8f a3       	std	Y+39, r24	; 0x27
    1a98:	98 a7       	std	Y+40, r25	; 0x28
    1a9a:	a9 a7       	std	Y+41, r26	; 0x29
    1a9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa0:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	55 e4       	ldi	r21, 0x45	; 69
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8b a3       	std	Y+35, r24	; 0x23
    1ab8:	9c a3       	std	Y+36, r25	; 0x24
    1aba:	ad a3       	std	Y+37, r26	; 0x25
    1abc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1abe:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <LCD_voidInit+0x27c>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9a a3       	std	Y+34, r25	; 0x22
    1adc:	89 a3       	std	Y+33, r24	; 0x21
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    1ae0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6f a1       	ldd	r22, Y+39	; 0x27
    1afa:	78 a5       	ldd	r23, Y+40	; 0x28
    1afc:	89 a5       	ldd	r24, Y+41	; 0x29
    1afe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <LCD_voidInit+0x2dc>
    1b22:	80 e9       	ldi	r24, 0x90	; 144
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	98 a3       	std	Y+32, r25	; 0x20
    1b28:	8f 8f       	std	Y+31, r24	; 0x1f
    1b2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_voidInit+0x2ca>
    1b32:	98 a3       	std	Y+32, r25	; 0x20
    1b34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	89 a1       	ldd	r24, Y+33	; 0x21
    1b38:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9a a3       	std	Y+34, r25	; 0x22
    1b3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	89 a1       	ldd	r24, Y+33	; 0x21
    1b42:	9a a1       	ldd	r25, Y+34	; 0x22
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <LCD_voidInit+0x2be>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <LCD_voidInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b50:	9e a1       	ldd	r25, Y+38	; 0x26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9a a3       	std	Y+34, r25	; 0x22
    1b5c:	89 a3       	std	Y+33, r24	; 0x21
    1b5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b60:	9a a1       	ldd	r25, Y+34	; 0x22
    1b62:	9e 8f       	std	Y+30, r25	; 0x1e
    1b64:	8d 8f       	std	Y+29, r24	; 0x1d
    1b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_voidInit+0x306>
    1b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b70:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);	// delay > 39 micro sec

			// Display Clear
			Send_voidCommand(DISPLAY_CLEAR1);
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
			Send_voidCommand(DISPLAY_CLEAR2);
    1b78:	80 e1       	ldi	r24, 0x10	; 16
    1b7a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e4       	ldi	r27, 0x40	; 64
    1b86:	89 8f       	std	Y+25, r24	; 0x19
    1b88:	9a 8f       	std	Y+26, r25	; 0x1a
    1b8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	55 e4       	ldi	r21, 0x45	; 69
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8d 8b       	std	Y+21, r24	; 0x15
    1ba8:	9e 8b       	std	Y+22, r25	; 0x16
    1baa:	af 8b       	std	Y+23, r26	; 0x17
    1bac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bae:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_voidInit+0x36c>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9c 8b       	std	Y+20, r25	; 0x14
    1bcc:	8b 8b       	std	Y+19, r24	; 0x13
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    1bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_voidInit+0x3cc>
    1c12:	80 e9       	ldi	r24, 0x90	; 144
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	9a 8b       	std	Y+18, r25	; 0x12
    1c18:	89 8b       	std	Y+17, r24	; 0x11
    1c1a:	89 89       	ldd	r24, Y+17	; 0x11
    1c1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_voidInit+0x3ba>
    1c22:	9a 8b       	std	Y+18, r25	; 0x12
    1c24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_voidInit+0x3ae>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c40:	98 8d       	ldd	r25, Y+24	; 0x18
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c50:	9c 89       	ldd	r25, Y+20	; 0x14
    1c52:	98 8b       	std	Y+16, r25	; 0x10
    1c54:	8f 87       	std	Y+15, r24	; 0x0f
    1c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c58:	98 89       	ldd	r25, Y+16	; 0x10
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_voidInit+0x3f6>
    1c5e:	98 8b       	std	Y+16, r25	; 0x10
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);	// delay > 1.53 ms

			// Entry Mode Set
			Send_voidCommand(ENTRY_MODE_SET1); // I/D: increase (write from left to right) = 1 , SH: No Shift = 0
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
			Send_voidCommand(ENTRY_MODE_SET2);
    1c68:	80 e6       	ldi	r24, 0x60	; 96
    1c6a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
			Send_voidCommand(0b00000110); // I/D: increase (write from left to right) = 1 , SH: No Shift = 0
	#else
		#error	"INVALID MODE !!!"
	#endif

	Is_Init_Finished = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	80 93 82 01 	sts	0x0182, r24
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a0 e0       	ldi	r26, 0x00	; 0
    1c7a:	b0 e4       	ldi	r27, 0x40	; 64
    1c7c:	8b 87       	std	Y+11, r24	; 0x0b
    1c7e:	9c 87       	std	Y+12, r25	; 0x0c
    1c80:	ad 87       	std	Y+13, r26	; 0x0d
    1c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a e7       	ldi	r20, 0x7A	; 122
    1c92:	55 e4       	ldi	r21, 0x45	; 69
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
    1c9e:	98 87       	std	Y+8, r25	; 0x08
    1ca0:	a9 87       	std	Y+9, r26	; 0x09
    1ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e8       	ldi	r20, 0x80	; 128
    1cb2:	5f e3       	ldi	r21, 0x3F	; 63
    1cb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb8:	88 23       	and	r24, r24
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <LCD_voidInit+0x462>
		__ticks = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <LCD_voidInit+0x4e0>
	else if (__tmp > 65535)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	4c f5       	brge	.+82     	; 0x1d30 <LCD_voidInit+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	0f c0       	rjmp	.+30     	; 0x1d26 <LCD_voidInit+0x4c2>
    1d08:	80 e9       	ldi	r24, 0x90	; 144
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_voidInit+0x4b0>
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	69 f7       	brne	.-38     	; 0x1d08 <LCD_voidInit+0x4a4>
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <LCD_voidInit+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_voidInit+0x4ec>
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	// delay > 1.53 ms
}
    1d58:	ca 5b       	subi	r28, 0xBA	; 186
    1d5a:	df 4f       	sbci	r29, 0xFF	; 255
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <SET_voidLCDPinsDirection>:



void SET_voidLCDPinsDirection()
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	// Set Ditrections of 4 bits mode
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, DIO_u8PIN_OUTPUT);
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	41 e0       	ldi	r20, 0x01	; 1
    1d7e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, DIO_u8PIN_OUTPUT);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, DIO_u8PIN_OUTPUT);
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, DIO_u8PIN_OUTPUT);
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	64 e0       	ldi	r22, 0x04	; 4
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	// set direction of Control Pins
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_OUTPUT);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_OUTPUT);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	63 e0       	ldi	r22, 0x03	; 3
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>

	// Set LCD PORT direction for simulation
	//DIO_voidSetPortDirection(LCD_PORT, DIO_PORT_OUTPUT);
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <Send_voidEnablePulse>:

void Send_voidEnablePulse()
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	2e 97       	sbiw	r28, 0x0e	; 14
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_HIGH);	// Set Enable
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	62 e0       	ldi	r22, 0x02	; 2
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e4       	ldi	r27, 0x40	; 64
    1de0:	8b 87       	std	Y+11, r24	; 0x0b
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	ad 87       	std	Y+13, r26	; 0x0d
    1de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	55 e4       	ldi	r21, 0x45	; 69
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8f 83       	std	Y+7, r24	; 0x07
    1e02:	98 87       	std	Y+8, r25	; 0x08
    1e04:	a9 87       	std	Y+9, r26	; 0x09
    1e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <Send_voidEnablePulse+0x70>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <Send_voidEnablePulse+0xee>
	else if (__tmp > 65535)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <Send_voidEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <Send_voidEnablePulse+0xd0>
    1e6c:	80 e9       	ldi	r24, 0x90	; 144
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <Send_voidEnablePulse+0xbe>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <Send_voidEnablePulse+0xb2>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <Send_voidEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <Send_voidEnablePulse+0xfa>
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	// delay more than 50 mico seconds
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_LOW);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	//_delay_ms(2);
}
    1ec6:	2e 96       	adiw	r28, 0x0e	; 14
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <Send_voidCommand>:

void Send_voidCommand(u8 Copy_u8Command)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	// 1-Set RS pin low for command
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_LOW);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	63 e0       	ldi	r22, 0x03	; 3
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	#if 	READ_OPERATION_STATUS == LCD_ENABLED
			DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_u8PIN_LOW);	// connected to ground to be set write all the time
	#endif

	#if 	CONNECTION_MODE == LCD_FOUR_BIT_MODE
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN4));		// error .... Remember that GET_BIT not DIO_GetPinValue
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	82 95       	swap	r24
    1ef2:	8f 70       	andi	r24, 0x0F	; 15
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	91 70       	andi	r25, 0x01	; 1
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN5));
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	82 95       	swap	r24
    1f06:	86 95       	lsr	r24
    1f08:	87 70       	andi	r24, 0x07	; 7
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	91 70       	andi	r25, 0x01	; 1
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	49 2f       	mov	r20, r25
    1f14:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN6));
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	82 95       	swap	r24
    1f1c:	86 95       	lsr	r24
    1f1e:	86 95       	lsr	r24
    1f20:	83 70       	andi	r24, 0x03	; 3
    1f22:	98 2f       	mov	r25, r24
    1f24:	91 70       	andi	r25, 0x01	; 1
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	49 2f       	mov	r20, r25
    1f2c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN7));
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	98 2f       	mov	r25, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	99 27       	eor	r25, r25
    1f38:	99 1f       	adc	r25, r25
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	64 e0       	ldi	r22, 0x04	; 4
    1f3e:	49 2f       	mov	r20, r25
    1f40:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1f44:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Send_voidEnablePulse>

			if(Is_Init_Finished)
    1f48:	80 91 82 01 	lds	r24, 0x0182
    1f4c:	88 23       	and	r24, r24
    1f4e:	41 f1       	breq	.+80     	; 0x1fa0 <Send_voidCommand+0xc8>
			{
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN0));
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	98 2f       	mov	r25, r24
    1f54:	91 70       	andi	r25, 0x01	; 1
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	49 2f       	mov	r20, r25
    1f5c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN1));
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	86 95       	lsr	r24
    1f64:	98 2f       	mov	r25, r24
    1f66:	91 70       	andi	r25, 0x01	; 1
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
    1f6c:	49 2f       	mov	r20, r25
    1f6e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN2));
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	86 95       	lsr	r24
    1f76:	86 95       	lsr	r24
    1f78:	98 2f       	mov	r25, r24
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	49 2f       	mov	r20, r25
    1f82:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN3));
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	86 95       	lsr	r24
    1f8a:	86 95       	lsr	r24
    1f8c:	86 95       	lsr	r24
    1f8e:	98 2f       	mov	r25, r24
    1f90:	91 70       	andi	r25, 0x01	; 1
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	64 e0       	ldi	r22, 0x04	; 4
    1f96:	49 2f       	mov	r20, r25
    1f98:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				Send_voidEnablePulse();
    1f9c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Send_voidEnablePulse>
	#else
		#error	"Invalid MODE to Send Command !!!"
	#endif

	//_delay_ms(2);
}
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <Send_voidData>:

void Send_voidData(u8 copy_u8Data)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	0f 92       	push	r0
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	// 1-Set RS pin HIGH for data
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_HIGH);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	63 e0       	ldi	r22, 0x03	; 3
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	#if 	READ_OPERATION_STATUS == LCD_ENABLED
			DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_PIN_LOW);	// connected to ground to be set write all the time
	#endif

	#if		CONNECTION_MODE == LCD_FOUR_BIT_MODE
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Data,DIO_u8PIN4));
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	82 95       	swap	r24
    1fc2:	8f 70       	andi	r24, 0x0F	; 15
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	91 70       	andi	r25, 0x01	; 1
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	49 2f       	mov	r20, r25
    1fce:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Data,DIO_u8PIN5));
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	82 95       	swap	r24
    1fd6:	86 95       	lsr	r24
    1fd8:	87 70       	andi	r24, 0x07	; 7
    1fda:	98 2f       	mov	r25, r24
    1fdc:	91 70       	andi	r25, 0x01	; 1
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	49 2f       	mov	r20, r25
    1fe4:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Data,DIO_u8PIN6));
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	82 95       	swap	r24
    1fec:	86 95       	lsr	r24
    1fee:	86 95       	lsr	r24
    1ff0:	83 70       	andi	r24, 0x03	; 3
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	91 70       	andi	r25, 0x01	; 1
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	62 e0       	ldi	r22, 0x02	; 2
    1ffa:	49 2f       	mov	r20, r25
    1ffc:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Data,DIO_u8PIN7));
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	98 2f       	mov	r25, r24
    2004:	99 1f       	adc	r25, r25
    2006:	99 27       	eor	r25, r25
    2008:	99 1f       	adc	r25, r25
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	64 e0       	ldi	r22, 0x04	; 4
    200e:	49 2f       	mov	r20, r25
    2010:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    2014:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Send_voidEnablePulse>

			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Data,DIO_u8PIN0));
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	98 2f       	mov	r25, r24
    201c:	91 70       	andi	r25, 0x01	; 1
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	49 2f       	mov	r20, r25
    2024:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Data,DIO_u8PIN1));
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	86 95       	lsr	r24
    202c:	98 2f       	mov	r25, r24
    202e:	91 70       	andi	r25, 0x01	; 1
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	49 2f       	mov	r20, r25
    2036:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Data,DIO_u8PIN2));
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	86 95       	lsr	r24
    203e:	86 95       	lsr	r24
    2040:	98 2f       	mov	r25, r24
    2042:	91 70       	andi	r25, 0x01	; 1
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	49 2f       	mov	r20, r25
    204a:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Data,DIO_u8PIN3));
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	86 95       	lsr	r24
    2056:	98 2f       	mov	r25, r24
    2058:	91 70       	andi	r25, 0x01	; 1
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	64 e0       	ldi	r22, 0x04	; 4
    205e:	49 2f       	mov	r20, r25
    2060:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    2064:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Send_voidEnablePulse>
	#else
		#error	"Invalid MODE to Write Data !!!"
	#endif

	//_delay_ms(2);
}
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <LCD_voidClear>:




void LCD_voidClear()
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	Send_voidCommand(DISPLAY_CLEAR);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_voidClearLine>:

void LCD_voidClearLine(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <LCD_voidClearLine+0x6>
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 Local_u8Counter = copy_u8Xpos; Local_u8Counter < 20; Local_u8Counter++)
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	08 c0       	rjmp	.+16     	; 0x20aa <LCD_voidClearLine+0x26>
	{
		LCD_voidWriteCharacterAtXY('\0' , copy_u8Ypos , Local_u8Counter);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	6a 81       	ldd	r22, Y+2	; 0x02
    209e:	49 81       	ldd	r20, Y+1	; 0x01
    20a0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_voidWriteCharacterAtXY>
	Send_voidCommand(DISPLAY_CLEAR);
}

void LCD_voidClearLine(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
	for(u8 Local_u8Counter = copy_u8Xpos; Local_u8Counter < 20; Local_u8Counter++)
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	8f 5f       	subi	r24, 0xFF	; 255
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	84 31       	cpi	r24, 0x14	; 20
    20ae:	a8 f3       	brcs	.-22     	; 0x209a <LCD_voidClearLine+0x16>
	{
		LCD_voidWriteCharacterAtXY('\0' , copy_u8Ypos , Local_u8Counter);
	}
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <LCD_voidClearXY>:

void LCD_voidClearXY(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <LCD_voidClearXY+0x6>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidWriteCharacterAtXY(' ' , copy_u8Ypos , copy_u8Xpos);
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	69 81       	ldd	r22, Y+1	; 0x01
    20ce:	4a 81       	ldd	r20, Y+2	; 0x02
    20d0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_voidWriteCharacterAtXY>
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <LCD_voidWriteCharacter>:



void LCD_voidWriteCharacter(u8 copy_u8Character)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
	Send_voidData(copy_u8Character);
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Send_voidData>
}
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <LCD_voidWriteCharacterAtXY>:

void LCD_voidWriteCharacterAtXY(u8 copy_u8Character, u8 copy_u8YPos , u8 copy_u8XPos)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <LCD_voidWriteCharacterAtXY+0x6>
    20fe:	0f 92       	push	r0
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	6a 83       	std	Y+2, r22	; 0x02
    2108:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	6b 81       	ldd	r22, Y+3	; 0x03
    210e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_voidGoToXY>
	LCD_voidWriteCharacter(copy_u8Character);
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_voidWriteCharacter>
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_voidWriteString>:



void LCD_voidWriteString(u8* copy_pu8String)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <LCD_voidWriteString+0x6>
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9b 83       	std	Y+3, r25	; 0x03
    2132:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    2134:	19 82       	std	Y+1, r1	; 0x01
    2136:	0e c0       	rjmp	.+28     	; 0x2154 <LCD_voidWriteString+0x30>
	while(copy_pu8String[Local_u8Counter] != '\0')
	{
		Send_voidData(copy_pu8String[Local_u8Counter]);
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	fc 01       	movw	r30, r24
    2144:	e2 0f       	add	r30, r18
    2146:	f3 1f       	adc	r31, r19
    2148:	80 81       	ld	r24, Z
    214a:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Send_voidData>
		Local_u8Counter++;
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	8f 5f       	subi	r24, 0xFF	; 255
    2152:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidWriteString(u8* copy_pu8String)
{
	u8 Local_u8Counter = 0;
	while(copy_pu8String[Local_u8Counter] != '\0')
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	9b 81       	ldd	r25, Y+3	; 0x03
    215e:	fc 01       	movw	r30, r24
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	80 81       	ld	r24, Z
    2166:	88 23       	and	r24, r24
    2168:	39 f7       	brne	.-50     	; 0x2138 <LCD_voidWriteString+0x14>
	{
		Send_voidData(copy_pu8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LCD_voidWriteStringAtXY>:

void LCD_voidWriteStringAtXY(u8* copy_pu8String, u8 copy_u8YPos , u8 copy_u8XPos)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <LCD_voidWriteStringAtXY+0x6>
    217c:	00 d0       	rcall	.+0      	; 0x217e <LCD_voidWriteStringAtXY+0x8>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6b 83       	std	Y+3, r22	; 0x03
    2188:	4c 83       	std	Y+4, r20	; 0x04
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	6c 81       	ldd	r22, Y+4	; 0x04
    218e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_voidGoToXY>
	LCD_voidWriteString(copy_pu8String);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_voidWriteString>
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_voidGoToXY>:



void LCD_voidGoToXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	6b 97       	sbiw	r28, 0x1b	; 27
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	8a 8f       	std	Y+26, r24	; 0x1a
    21be:	6b 8f       	std	Y+27, r22	; 0x1b
	u8 Local_u8DDRAM_Address = 0;
    21c0:	19 8e       	std	Y+25, r1	; 0x19
	//0x80, 0xC0, 0x94, 0xD4

	if(copy_u8YPos == LCD_LINE_ONE)
    21c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21c4:	88 23       	and	r24, r24
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0x80;
    21c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ca:	80 58       	subi	r24, 0x80	; 128
    21cc:	89 8f       	std	Y+25, r24	; 0x19
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_TWO)
    21d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	21 f4       	brne	.+8      	; 0x21de <LCD_voidGoToXY+0x36>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0xC0;
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	80 54       	subi	r24, 0x40	; 64
    21da:	89 8f       	std	Y+25, r24	; 0x19
    21dc:	0d c0       	rjmp	.+26     	; 0x21f8 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_THREE)
    21de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	21 f4       	brne	.+8      	; 0x21ec <LCD_voidGoToXY+0x44>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0x94;
    21e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e6:	8c 56       	subi	r24, 0x6C	; 108
    21e8:	89 8f       	std	Y+25, r24	; 0x19
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_FOUR)
    21ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	19 f4       	brne	.+6      	; 0x21f8 <LCD_voidGoToXY+0x50>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0xD4;
    21f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f4:	8c 52       	subi	r24, 0x2C	; 44
    21f6:	89 8f       	std	Y+25, r24	; 0x19
	}

	SET_BIT(Local_u8DDRAM_Address , 7);				// Set bit 7 to 1
    21f8:	89 8d       	ldd	r24, Y+25	; 0x19
    21fa:	80 68       	ori	r24, 0x80	; 128
    21fc:	89 8f       	std	Y+25, r24	; 0x19
	Send_voidCommand(Local_u8DDRAM_Address);			// Go to this Address
    21fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2200:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e2       	ldi	r26, 0x20	; 32
    220a:	b2 e4       	ldi	r27, 0x42	; 66
    220c:	8d 8b       	std	Y+21, r24	; 0x15
    220e:	9e 8b       	std	Y+22, r25	; 0x16
    2210:	af 8b       	std	Y+23, r26	; 0x17
    2212:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	2b ea       	ldi	r18, 0xAB	; 171
    221e:	3a ea       	ldi	r19, 0xAA	; 170
    2220:	4a ea       	ldi	r20, 0xAA	; 170
    2222:	50 e4       	ldi	r21, 0x40	; 64
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	89 8b       	std	Y+17, r24	; 0x11
    222e:	9a 8b       	std	Y+18, r25	; 0x12
    2230:	ab 8b       	std	Y+19, r26	; 0x13
    2232:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2234:	69 89       	ldd	r22, Y+17	; 0x11
    2236:	7a 89       	ldd	r23, Y+18	; 0x12
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	1c f4       	brge	.+6      	; 0x2252 <LCD_voidGoToXY+0xaa>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	88 8b       	std	Y+16, r24	; 0x10
    2250:	91 c0       	rjmp	.+290    	; 0x2374 <LCD_voidGoToXY+0x1cc>
	else if (__tmp > 255)
    2252:	69 89       	ldd	r22, Y+17	; 0x11
    2254:	7a 89       	ldd	r23, Y+18	; 0x12
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	53 e4       	ldi	r21, 0x43	; 67
    2262:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	0c f0       	brlt	.+2      	; 0x226c <LCD_voidGoToXY+0xc4>
    226a:	7b c0       	rjmp	.+246    	; 0x2362 <LCD_voidGoToXY+0x1ba>
	{
		_delay_ms(__us / 1000.0);
    226c:	6d 89       	ldd	r22, Y+21	; 0x15
    226e:	7e 89       	ldd	r23, Y+22	; 0x16
    2270:	8f 89       	ldd	r24, Y+23	; 0x17
    2272:	98 8d       	ldd	r25, Y+24	; 0x18
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8c 87       	std	Y+12, r24	; 0x0c
    2286:	9d 87       	std	Y+13, r25	; 0x0d
    2288:	ae 87       	std	Y+14, r26	; 0x0e
    228a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	6c 85       	ldd	r22, Y+12	; 0x0c
    228e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2290:	8e 85       	ldd	r24, Y+14	; 0x0e
    2292:	9f 85       	ldd	r25, Y+15	; 0x0f
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a e7       	ldi	r20, 0x7A	; 122
    229a:	55 e4       	ldi	r21, 0x45	; 69
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	88 87       	std	Y+8, r24	; 0x08
    22a6:	99 87       	std	Y+9, r25	; 0x09
    22a8:	aa 87       	std	Y+10, r26	; 0x0a
    22aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22ac:	68 85       	ldd	r22, Y+8	; 0x08
    22ae:	79 85       	ldd	r23, Y+9	; 0x09
    22b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <LCD_voidGoToXY+0x126>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9f 83       	std	Y+7, r25	; 0x07
    22ca:	8e 83       	std	Y+6, r24	; 0x06
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <LCD_voidGoToXY+0x1a4>
	else if (__tmp > 65535)
    22ce:	68 85       	ldd	r22, Y+8	; 0x08
    22d0:	79 85       	ldd	r23, Y+9	; 0x09
    22d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <LCD_voidGoToXY+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    22e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    22ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9f 83       	std	Y+7, r25	; 0x07
    230c:	8e 83       	std	Y+6, r24	; 0x06
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_voidGoToXY+0x186>
    2310:	80 e9       	ldi	r24, 0x90	; 144
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	9d 83       	std	Y+5, r25	; 0x05
    2316:	8c 83       	std	Y+4, r24	; 0x04
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	9d 81       	ldd	r25, Y+5	; 0x05
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_voidGoToXY+0x174>
    2320:	9d 83       	std	Y+5, r25	; 0x05
    2322:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	9f 81       	ldd	r25, Y+7	; 0x07
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9f 83       	std	Y+7, r25	; 0x07
    232c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8e 81       	ldd	r24, Y+6	; 0x06
    2330:	9f 81       	ldd	r25, Y+7	; 0x07
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <LCD_voidGoToXY+0x168>
    2336:	24 c0       	rjmp	.+72     	; 0x2380 <LCD_voidGoToXY+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	68 85       	ldd	r22, Y+8	; 0x08
    233a:	79 85       	ldd	r23, Y+9	; 0x09
    233c:	8a 85       	ldd	r24, Y+10	; 0x0a
    233e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9f 83       	std	Y+7, r25	; 0x07
    234a:	8e 83       	std	Y+6, r24	; 0x06
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	9b 83       	std	Y+3, r25	; 0x03
    2352:	8a 83       	std	Y+2, r24	; 0x02
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_voidGoToXY+0x1b0>
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <LCD_voidGoToXY+0x1d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2362:	69 89       	ldd	r22, Y+17	; 0x11
    2364:	7a 89       	ldd	r23, Y+18	; 0x12
    2366:	8b 89       	ldd	r24, Y+19	; 0x13
    2368:	9c 89       	ldd	r25, Y+20	; 0x14
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	88 8b       	std	Y+16, r24	; 0x10
    2374:	88 89       	ldd	r24, Y+16	; 0x10
    2376:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	8a 95       	dec	r24
    237c:	f1 f7       	brne	.-4      	; 0x237a <LCD_voidGoToXY+0x1d2>
    237e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
}
    2380:	6b 96       	adiw	r28, 0x1b	; 27
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <LCD_voidWriteDecimal>:



void LCD_voidWriteDecimal(s32 copy_s32Number) {
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	60 97       	sbiw	r28, 0x10	; 16
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	6d 87       	std	Y+13, r22	; 0x0d
    23ac:	7e 87       	std	Y+14, r23	; 0x0e
    23ae:	8f 87       	std	Y+15, r24	; 0x0f
    23b0:	98 8b       	std	Y+16, r25	; 0x10

	if (copy_s32Number < 0)
    23b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b6:	af 85       	ldd	r26, Y+15	; 0x0f
    23b8:	b8 89       	ldd	r27, Y+16	; 0x10
    23ba:	bb 23       	and	r27, r27
    23bc:	94 f4       	brge	.+36     	; 0x23e2 <LCD_voidWriteDecimal+0x50>
	{
		Send_voidData('-'); // Display negative sign
    23be:	8d e2       	ldi	r24, 0x2D	; 45
    23c0:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Send_voidData>
		copy_s32Number = -copy_s32Number; // Convert to positive number
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	af 85       	ldd	r26, Y+15	; 0x0f
    23ca:	b8 89       	ldd	r27, Y+16	; 0x10
    23cc:	b0 95       	com	r27
    23ce:	a0 95       	com	r26
    23d0:	90 95       	com	r25
    23d2:	81 95       	neg	r24
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	af 4f       	sbci	r26, 0xFF	; 255
    23d8:	bf 4f       	sbci	r27, 0xFF	; 255
    23da:	8d 87       	std	Y+13, r24	; 0x0d
    23dc:	9e 87       	std	Y+14, r25	; 0x0e
    23de:	af 87       	std	Y+15, r26	; 0x0f
    23e0:	b8 8b       	std	Y+16, r27	; 0x10
//    {
//    	LCD_voidSendData('0');
//    	return ;
//    }

    u8 digits[10] = {0}; // Array to store up to 10 digits (maximum for s32)
    23e2:	8a e0       	ldi	r24, 0x0A	; 10
    23e4:	fe 01       	movw	r30, r28
    23e6:	33 96       	adiw	r30, 0x03	; 3
    23e8:	df 01       	movw	r26, r30
    23ea:	98 2f       	mov	r25, r24
    23ec:	1d 92       	st	X+, r1
    23ee:	9a 95       	dec	r25
    23f0:	e9 f7       	brne	.-6      	; 0x23ec <LCD_voidWriteDecimal+0x5a>
    u8 digits_No = 0;
    23f2:	1a 82       	std	Y+2, r1	; 0x02
    23f4:	2d c0       	rjmp	.+90     	; 0x2450 <LCD_voidWriteDecimal+0xbe>

    while (copy_s32Number > 0)
    {
        digits[digits_No] = copy_s32Number % 10; // Extract the least significant digit
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	08 2f       	mov	r16, r24
    23fa:	10 e0       	ldi	r17, 0x00	; 0
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	af 85       	ldd	r26, Y+15	; 0x0f
    2402:	b8 89       	ldd	r27, Y+16	; 0x10
    2404:	2a e0       	ldi	r18, 0x0A	; 10
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 be 13 	call	0x277c	; 0x277c <__divmodsi4>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	28 2f       	mov	r18, r24
    241a:	ce 01       	movw	r24, r28
    241c:	03 96       	adiw	r24, 0x03	; 3
    241e:	fc 01       	movw	r30, r24
    2420:	e0 0f       	add	r30, r16
    2422:	f1 1f       	adc	r31, r17
    2424:	20 83       	st	Z, r18
        copy_s32Number /= 10; // Move to the next digit
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	af 85       	ldd	r26, Y+15	; 0x0f
    242c:	b8 89       	ldd	r27, Y+16	; 0x10
    242e:	2a e0       	ldi	r18, 0x0A	; 10
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 be 13 	call	0x277c	; 0x277c <__divmodsi4>
    243e:	da 01       	movw	r26, r20
    2440:	c9 01       	movw	r24, r18
    2442:	8d 87       	std	Y+13, r24	; 0x0d
    2444:	9e 87       	std	Y+14, r25	; 0x0e
    2446:	af 87       	std	Y+15, r26	; 0x0f
    2448:	b8 8b       	std	Y+16, r27	; 0x10
        digits_No++;
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	8a 83       	std	Y+2, r24	; 0x02
//    }

    u8 digits[10] = {0}; // Array to store up to 10 digits (maximum for s32)
    u8 digits_No = 0;

    while (copy_s32Number > 0)
    2450:	8d 85       	ldd	r24, Y+13	; 0x0d
    2452:	9e 85       	ldd	r25, Y+14	; 0x0e
    2454:	af 85       	ldd	r26, Y+15	; 0x0f
    2456:	b8 89       	ldd	r27, Y+16	; 0x10
    2458:	18 16       	cp	r1, r24
    245a:	19 06       	cpc	r1, r25
    245c:	1a 06       	cpc	r1, r26
    245e:	1b 06       	cpc	r1, r27
    2460:	54 f2       	brlt	.-108    	; 0x23f6 <LCD_voidWriteDecimal+0x64>
        digits[digits_No] = copy_s32Number % 10; // Extract the least significant digit
        copy_s32Number /= 10; // Move to the next digit
        digits_No++;
    }

    if (digits_No == 0) {
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	88 23       	and	r24, r24
    2466:	11 f4       	brne	.+4      	; 0x246c <LCD_voidWriteDecimal+0xda>
        digits_No = 1; // At least one digit (zero) should be displayed
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	8a 83       	std	Y+2, r24	; 0x02
    }

    for (u8 i = digits_No; i > 0; i--) {
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	12 c0       	rjmp	.+36     	; 0x2496 <LCD_voidWriteDecimal+0x104>
    	Send_voidData(digits[i - 1] + '0'); // Display the digit on LCD
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9c 01       	movw	r18, r24
    247a:	21 50       	subi	r18, 0x01	; 1
    247c:	30 40       	sbci	r19, 0x00	; 0
    247e:	ce 01       	movw	r24, r28
    2480:	03 96       	adiw	r24, 0x03	; 3
    2482:	fc 01       	movw	r30, r24
    2484:	e2 0f       	add	r30, r18
    2486:	f3 1f       	adc	r31, r19
    2488:	80 81       	ld	r24, Z
    248a:	80 5d       	subi	r24, 0xD0	; 208
    248c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Send_voidData>

    if (digits_No == 0) {
        digits_No = 1; // At least one digit (zero) should be displayed
    }

    for (u8 i = digits_No; i > 0; i--) {
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	81 50       	subi	r24, 0x01	; 1
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	88 23       	and	r24, r24
    249a:	59 f7       	brne	.-42     	; 0x2472 <LCD_voidWriteDecimal+0xe0>
    	Send_voidData(digits[i - 1] + '0'); // Display the digit on LCD
    }
}
    249c:	60 96       	adiw	r28, 0x10	; 16
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	1f 91       	pop	r17
    24ae:	0f 91       	pop	r16
    24b0:	08 95       	ret

000024b2 <LCD_voidWriteFloat>:

void LCD_voidWriteFloat(f32 copy_f32Number)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2d 97       	sbiw	r28, 0x0d	; 13
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	6a 87       	std	Y+10, r22	; 0x0a
    24c8:	7b 87       	std	Y+11, r23	; 0x0b
    24ca:	8c 87       	std	Y+12, r24	; 0x0c
    24cc:	9d 87       	std	Y+13, r25	; 0x0d
    // Split the float number into its integer and fractional parts
    s32 Local_s32IntegerPart = (s32)copy_f32Number;
    24ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    24d0:	7b 85       	ldd	r23, Y+11	; 0x0b
    24d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    24d6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8e 83       	std	Y+6, r24	; 0x06
    24e0:	9f 83       	std	Y+7, r25	; 0x07
    24e2:	a8 87       	std	Y+8, r26	; 0x08
    24e4:	b9 87       	std	Y+9, r27	; 0x09
    f32 Local_f32FractionalPart = copy_f32Number - Local_s32IntegerPart;
    24e6:	6e 81       	ldd	r22, Y+6	; 0x06
    24e8:	7f 81       	ldd	r23, Y+7	; 0x07
    24ea:	88 85       	ldd	r24, Y+8	; 0x08
    24ec:	99 85       	ldd	r25, Y+9	; 0x09
    24ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    24f2:	9b 01       	movw	r18, r22
    24f4:	ac 01       	movw	r20, r24
    24f6:	6a 85       	ldd	r22, Y+10	; 0x0a
    24f8:	7b 85       	ldd	r23, Y+11	; 0x0b
    24fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    24fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    24fe:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	ac 83       	std	Y+4, r26	; 0x04
    250c:	bd 83       	std	Y+5, r27	; 0x05

    // Write the integer part to the LCD
    LCD_voidWriteDecimal(Local_s32IntegerPart);
    250e:	8e 81       	ldd	r24, Y+6	; 0x06
    2510:	9f 81       	ldd	r25, Y+7	; 0x07
    2512:	a8 85       	ldd	r26, Y+8	; 0x08
    2514:	b9 85       	ldd	r27, Y+9	; 0x09
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidWriteDecimal>

    // Write the decimal point to the LCD
    LCD_voidWriteCharacter('.');
    251e:	8e e2       	ldi	r24, 0x2E	; 46
    2520:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_voidWriteCharacter>

    // Write the fractional part to the LCD, multiplied by 100 to get two decimal places
    u8 Local_u8FractionalPartAsInteger = (u8)(Local_f32FractionalPart * 100);
    2524:	6a 81       	ldd	r22, Y+2	; 0x02
    2526:	7b 81       	ldd	r23, Y+3	; 0x03
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	9d 81       	ldd	r25, Y+5	; 0x05
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	48 ec       	ldi	r20, 0xC8	; 200
    2532:	52 e4       	ldi	r21, 0x42	; 66
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	89 83       	std	Y+1, r24	; 0x01
    LCD_voidWriteDecimal(Local_u8FractionalPartAsInteger);
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidWriteDecimal>
}
    255c:	2d 96       	adiw	r28, 0x0d	; 13
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <LCD_voidWriteCustomCharacter>:


void LCD_voidWriteCustomCharacter(u8 copy_u8PatternNumber, u8 copy_pu8PatternArr[], u8 copy_u8YPos, u8 copy_u8XPos)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	27 97       	sbiw	r28, 0x07	; 7
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	7d 83       	std	Y+5, r23	; 0x05
    2586:	6c 83       	std	Y+4, r22	; 0x04
    2588:	4e 83       	std	Y+6, r20	; 0x06
    258a:	2f 83       	std	Y+7, r18	; 0x07
	if ( copy_pu8PatternArr != NULL )
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	9d 81       	ldd	r25, Y+5	; 0x05
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	59 f1       	breq	.+86     	; 0x25ea <LCD_voidWriteCustomCharacter+0x7c>
	{
		u8 Local_u8CGRAM_Address = copy_u8PatternNumber * 8;
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8Counter = 0;
    25a8:	19 82       	std	Y+1, r1	; 0x01

		/* Set Bit 6 & Clear Bit 7 for Setting CGRAM Address Command */
		SET_BIT(Local_u8CGRAM_Address , 6) ;
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	80 64       	ori	r24, 0x40	; 64
    25ae:	8a 83       	std	Y+2, r24	; 0x02

		/* Set CGRAM Address */
		Send_voidCommand(Local_u8CGRAM_Address);
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>

		/* Write the pattern inside CGRAM */
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter ++)
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	0e c0       	rjmp	.+28     	; 0x25d6 <LCD_voidWriteCustomCharacter+0x68>
		{
			Send_voidData(copy_pu8PatternArr[Local_u8Counter]);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	9d 81       	ldd	r25, Y+5	; 0x05
    25c4:	fc 01       	movw	r30, r24
    25c6:	e2 0f       	add	r30, r18
    25c8:	f3 1f       	adc	r31, r19
    25ca:	80 81       	ld	r24, Z
    25cc:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Send_voidData>

		/* Set CGRAM Address */
		Send_voidCommand(Local_u8CGRAM_Address);

		/* Write the pattern inside CGRAM */
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter ++)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	88 30       	cpi	r24, 0x08	; 8
    25da:	78 f3       	brcs	.-34     	; 0x25ba <LCD_voidWriteCustomCharacter+0x4c>
		{
			Send_voidData(copy_pu8PatternArr[Local_u8Counter]);
		}

		/* Set DDRAM Address */
		LCD_voidGoToXY(copy_u8YPos , copy_u8XPos);
    25dc:	8e 81       	ldd	r24, Y+6	; 0x06
    25de:	6f 81       	ldd	r22, Y+7	; 0x07
    25e0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_voidGoToXY>

		/* Write the corresponding pattern number to display from CGRAM */
		Send_voidData(copy_u8PatternNumber);
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Send_voidData>
	}
}
    25ea:	27 96       	adiw	r28, 0x07	; 7
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <LCD_voidDisplayOFF>:




void LCD_voidDisplayOFF()
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	Send_voidCommand(DISPLAY_OFF);
    2604:	8c e0       	ldi	r24, 0x0C	; 12
    2606:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
}
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <LCD_voidDisplayON>:


void LCD_voidDisplayON()
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	Send_voidCommand(DISPLAY_ON);
    2618:	8c e0       	ldi	r24, 0x0C	; 12
    261a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Send_voidCommand>
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <main>:
#include "util/delay.h"



int main()
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	#if		MAIN_APP == KPD_TEST
			KeyPad_test();
    262c:	0e 94 1d 13 	call	0x263a	; 0x263a <KeyPad_test>
	#else
	#endif



	return 0;
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
}
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <KeyPad_test>:


u8 Button = KEYPAD_NOT_PRESSED;

void KeyPad_test(void)
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_OUTPUT);
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	KeyPad_voidInit();
    264c:	0e 94 ef 0a 	call	0x15de	; 0x15de <KeyPad_voidInit>
	LCD_voidInit();
    2650:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_voidInit>

	while(1)
	{
		Get_Button();
    2654:	0e 94 2d 13 	call	0x265a	; 0x265a <Get_Button>
    2658:	fd cf       	rjmp	.-6      	; 0x2654 <KeyPad_test+0x1a>

0000265a <Get_Button>:
	}
}


void Get_Button()
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	2e 97       	sbiw	r28, 0x0e	; 14
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
	do
	{
		Button = KeyPad_u8GetPress();
    266e:	0e 94 39 0b 	call	0x1672	; 0x1672 <KeyPad_u8GetPress>
    2672:	80 93 70 01 	sts	0x0170, r24
	}while(Button == '\0');
    2676:	80 91 70 01 	lds	r24, 0x0170
    267a:	88 23       	and	r24, r24
    267c:	c1 f3       	breq	.-16     	; 0x266e <Get_Button+0x14>

	LCD_voidWriteCharacter(Button);
    267e:	80 91 70 01 	lds	r24, 0x0170
    2682:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_voidWriteCharacter>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a8 e4       	ldi	r26, 0x48	; 72
    268c:	b3 e4       	ldi	r27, 0x43	; 67
    268e:	8b 87       	std	Y+11, r24	; 0x0b
    2690:	9c 87       	std	Y+12, r25	; 0x0c
    2692:	ad 87       	std	Y+13, r26	; 0x0d
    2694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	6b 85       	ldd	r22, Y+11	; 0x0b
    2698:	7c 85       	ldd	r23, Y+12	; 0x0c
    269a:	8d 85       	ldd	r24, Y+13	; 0x0d
    269c:	9e 85       	ldd	r25, Y+14	; 0x0e
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	55 e4       	ldi	r21, 0x45	; 69
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8f 83       	std	Y+7, r24	; 0x07
    26b0:	98 87       	std	Y+8, r25	; 0x08
    26b2:	a9 87       	std	Y+9, r26	; 0x09
    26b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b6:	6f 81       	ldd	r22, Y+7	; 0x07
    26b8:	78 85       	ldd	r23, Y+8	; 0x08
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <Get_Button+0x7e>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <Get_Button+0xfc>
	else if (__tmp > 65535)
    26d8:	6f 81       	ldd	r22, Y+7	; 0x07
    26da:	78 85       	ldd	r23, Y+8	; 0x08
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <Get_Button+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <Get_Button+0xde>
    271a:	80 e9       	ldi	r24, 0x90	; 144
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <Get_Button+0xcc>
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <Get_Button+0xc0>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <Get_Button+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <Get_Button+0x108>
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    276a:	2e 96       	adiw	r28, 0x0e	; 14
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <__divmodsi4>:
    277c:	97 fb       	bst	r25, 7
    277e:	09 2e       	mov	r0, r25
    2780:	05 26       	eor	r0, r21
    2782:	0e d0       	rcall	.+28     	; 0x27a0 <__divmodsi4_neg1>
    2784:	57 fd       	sbrc	r21, 7
    2786:	04 d0       	rcall	.+8      	; 0x2790 <__divmodsi4_neg2>
    2788:	14 d0       	rcall	.+40     	; 0x27b2 <__udivmodsi4>
    278a:	0a d0       	rcall	.+20     	; 0x27a0 <__divmodsi4_neg1>
    278c:	00 1c       	adc	r0, r0
    278e:	38 f4       	brcc	.+14     	; 0x279e <__divmodsi4_exit>

00002790 <__divmodsi4_neg2>:
    2790:	50 95       	com	r21
    2792:	40 95       	com	r20
    2794:	30 95       	com	r19
    2796:	21 95       	neg	r18
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	4f 4f       	sbci	r20, 0xFF	; 255
    279c:	5f 4f       	sbci	r21, 0xFF	; 255

0000279e <__divmodsi4_exit>:
    279e:	08 95       	ret

000027a0 <__divmodsi4_neg1>:
    27a0:	f6 f7       	brtc	.-4      	; 0x279e <__divmodsi4_exit>
    27a2:	90 95       	com	r25
    27a4:	80 95       	com	r24
    27a6:	70 95       	com	r23
    27a8:	61 95       	neg	r22
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	8f 4f       	sbci	r24, 0xFF	; 255
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	08 95       	ret

000027b2 <__udivmodsi4>:
    27b2:	a1 e2       	ldi	r26, 0x21	; 33
    27b4:	1a 2e       	mov	r1, r26
    27b6:	aa 1b       	sub	r26, r26
    27b8:	bb 1b       	sub	r27, r27
    27ba:	fd 01       	movw	r30, r26
    27bc:	0d c0       	rjmp	.+26     	; 0x27d8 <__udivmodsi4_ep>

000027be <__udivmodsi4_loop>:
    27be:	aa 1f       	adc	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	ee 1f       	adc	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	a2 17       	cp	r26, r18
    27c8:	b3 07       	cpc	r27, r19
    27ca:	e4 07       	cpc	r30, r20
    27cc:	f5 07       	cpc	r31, r21
    27ce:	20 f0       	brcs	.+8      	; 0x27d8 <__udivmodsi4_ep>
    27d0:	a2 1b       	sub	r26, r18
    27d2:	b3 0b       	sbc	r27, r19
    27d4:	e4 0b       	sbc	r30, r20
    27d6:	f5 0b       	sbc	r31, r21

000027d8 <__udivmodsi4_ep>:
    27d8:	66 1f       	adc	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	88 1f       	adc	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	1a 94       	dec	r1
    27e2:	69 f7       	brne	.-38     	; 0x27be <__udivmodsi4_loop>
    27e4:	60 95       	com	r22
    27e6:	70 95       	com	r23
    27e8:	80 95       	com	r24
    27ea:	90 95       	com	r25
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	bd 01       	movw	r22, r26
    27f2:	cf 01       	movw	r24, r30
    27f4:	08 95       	ret

000027f6 <__prologue_saves__>:
    27f6:	2f 92       	push	r2
    27f8:	3f 92       	push	r3
    27fa:	4f 92       	push	r4
    27fc:	5f 92       	push	r5
    27fe:	6f 92       	push	r6
    2800:	7f 92       	push	r7
    2802:	8f 92       	push	r8
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	ca 1b       	sub	r28, r26
    2820:	db 0b       	sbc	r29, r27
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	09 94       	ijmp

0000282e <__epilogue_restores__>:
    282e:	2a 88       	ldd	r2, Y+18	; 0x12
    2830:	39 88       	ldd	r3, Y+17	; 0x11
    2832:	48 88       	ldd	r4, Y+16	; 0x10
    2834:	5f 84       	ldd	r5, Y+15	; 0x0f
    2836:	6e 84       	ldd	r6, Y+14	; 0x0e
    2838:	7d 84       	ldd	r7, Y+13	; 0x0d
    283a:	8c 84       	ldd	r8, Y+12	; 0x0c
    283c:	9b 84       	ldd	r9, Y+11	; 0x0b
    283e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2840:	b9 84       	ldd	r11, Y+9	; 0x09
    2842:	c8 84       	ldd	r12, Y+8	; 0x08
    2844:	df 80       	ldd	r13, Y+7	; 0x07
    2846:	ee 80       	ldd	r14, Y+6	; 0x06
    2848:	fd 80       	ldd	r15, Y+5	; 0x05
    284a:	0c 81       	ldd	r16, Y+4	; 0x04
    284c:	1b 81       	ldd	r17, Y+3	; 0x03
    284e:	aa 81       	ldd	r26, Y+2	; 0x02
    2850:	b9 81       	ldd	r27, Y+1	; 0x01
    2852:	ce 0f       	add	r28, r30
    2854:	d1 1d       	adc	r29, r1
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	ed 01       	movw	r28, r26
    2862:	08 95       	ret

00002864 <_exit>:
    2864:	f8 94       	cli

00002866 <__stop_program>:
    2866:	ff cf       	rjmp	.-2      	; 0x2866 <__stop_program>
