
02-SEVEN_SEGMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002558  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002558  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001728  00000000  00000000  000025e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a2d  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004735  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004875  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000049e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000662e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007519  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000082c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008e83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1b 12 	call	0x2436	; 0x2436 <main>
      7a:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDirection>:
		/*		- Copy_u8Port: The port to set the pin direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*		- Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*		- Copy_u8Direction: The desired direction (DIO_u8PIN_OUTPUT or DIO_u8PIN_INPUT).							*/
		/********************************************************************************************************************/
		void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
		{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_voidSetPinDirection+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_voidSetPinDirection+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
			{
				if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_voidSetPinDirection+0x32>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_voidSetPinDirection+0x110>
				{
					switch(Copy_u8Port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_voidSetPinDirection+0x98>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_voidSetPinDirection+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_voidSetPinDirection+0x70>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_voidSetPinDirection+0xc0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_voidSetPinDirection+0xe8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(DDRA , Copy_u8Pin); 	break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_voidSetPinDirection+0x8e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_voidSetPinDirection+0x8a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  SET_BIT(DDRB , Copy_u8Pin); 	break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_voidSetPinDirection+0xb6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_voidSetPinDirection+0xb2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  SET_BIT(DDRC , Copy_u8Pin); 	break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_voidSetPinDirection+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_voidSetPinDirection+0xda>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  SET_BIT(DDRD , Copy_u8Pin); 	break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_voidSetPinDirection+0x106>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_voidSetPinDirection+0x102>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						default       :  								break;
					}
				}
				else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_voidSetPinDirection+0x118>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
				{
					switch(Copy_u8Port)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_voidSetPinDirection+0x182>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_voidSetPinDirection+0x140>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_voidSetPinDirection+0x158>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_voidSetPinDirection+0x1ac>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_voidSetPinDirection+0x156>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_voidSetPinDirection+0x1d6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(DDRA , Copy_u8Pin); 	break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_voidSetPinDirection+0x176>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_voidSetPinDirection+0x172>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(DDRB , Copy_u8Pin); 	break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_voidSetPinDirection+0x1a0>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_voidSetPinDirection+0x19c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(DDRC , Copy_u8Pin); 	break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_voidSetPinDirection+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_voidSetPinDirection+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(DDRD , Copy_u8Pin); 	break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_voidSetPinDirection+0x1f4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_voidSetPinDirection+0x1f0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
						default       :  								break;
					}
				}
			}
		}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_voidSetPortDirection>:
		/*   Parameters:																								*/
		/*        - Copy_u8Port: The port to set the direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).*/
		/*        - Copy_u8Direction: The desired direction (DIO_PORT_OUTPUT or DIO_PORT_INPUT).						*/
		/****************************************************************************************************************/
		void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
		{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_voidSetPortDirection+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <DIO_voidSetPortDirection+0x8>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	90 f5       	brcc	.+100    	; 0xdc0 <DIO_voidSetPortDirection+0x7a>
			{
				switch(Copy_u8Port)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3c 83       	std	Y+4, r19	; 0x04
     d64:	2b 83       	std	Y+3, r18	; 0x03
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	91 05       	cpc	r25, r1
     d6e:	d1 f0       	breq	.+52     	; 0xda4 <DIO_voidSetPortDirection+0x5e>
     d70:	2b 81       	ldd	r18, Y+3	; 0x03
     d72:	3c 81       	ldd	r19, Y+4	; 0x04
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	2c f4       	brge	.+10     	; 0xd84 <DIO_voidSetPortDirection+0x3e>
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	61 f0       	breq	.+24     	; 0xd9a <DIO_voidSetPortDirection+0x54>
     d82:	1e c0       	rjmp	.+60     	; 0xdc0 <DIO_voidSetPortDirection+0x7a>
     d84:	2b 81       	ldd	r18, Y+3	; 0x03
     d86:	3c 81       	ldd	r19, Y+4	; 0x04
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	81 f0       	breq	.+32     	; 0xdae <DIO_voidSetPortDirection+0x68>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	91 05       	cpc	r25, r1
     d96:	81 f0       	breq	.+32     	; 0xdb8 <DIO_voidSetPortDirection+0x72>
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <DIO_voidSetPortDirection+0x7a>
				{
					case DIO_u8PORTA:  DDRA = Copy_u8Direction; 		break;
     d9a:	ea e3       	ldi	r30, 0x3A	; 58
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	80 83       	st	Z, r24
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTB:  DDRB = Copy_u8Direction; 		break;
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	80 83       	st	Z, r24
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTC:  DDRC = Copy_u8Direction; 		break;
     dae:	e4 e3       	ldi	r30, 0x34	; 52
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	80 83       	st	Z, r24
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTD:  DDRD = Copy_u8Direction; 		break;
     db8:	e1 e3       	ldi	r30, 0x31	; 49
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	80 83       	st	Z, r24
					default       :  									break;
				}
			}
		}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <DIO_voidSetPinValue>:
		/*        - Copy_u8Port: The port to set the pin value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).		*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*        - Copy_u8PinValue: The desired value (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).										*/
		/************************************************************************************************************************/
		void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
		{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	27 97       	sbiw	r28, 0x07	; 7
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	6a 83       	std	Y+2, r22	; 0x02
     de6:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <DIO_voidSetPinValue+0x22>
     dee:	ee c0       	rjmp	.+476    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <DIO_voidSetPinValue+0x2a>
     df6:	ea c0       	rjmp	.+468    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
			{
				if(Copy_u8PinValue == DIO_u8PIN_HIGH)
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	09 f0       	breq	.+2      	; 0xe00 <DIO_voidSetPinValue+0x32>
     dfe:	6f c0       	rjmp	.+222    	; 0xede <DIO_voidSetPinValue+0x110>
				{
					switch(Copy_u8Port)
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3f 83       	std	Y+7, r19	; 0x07
     e08:	2e 83       	std	Y+6, r18	; 0x06
     e0a:	8e 81       	ldd	r24, Y+6	; 0x06
     e0c:	9f 81       	ldd	r25, Y+7	; 0x07
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	91 05       	cpc	r25, r1
     e12:	49 f1       	breq	.+82     	; 0xe66 <DIO_voidSetPinValue+0x98>
     e14:	2e 81       	ldd	r18, Y+6	; 0x06
     e16:	3f 81       	ldd	r19, Y+7	; 0x07
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	2c f4       	brge	.+10     	; 0xe28 <DIO_voidSetPinValue+0x5a>
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	61 f0       	breq	.+24     	; 0xe3e <DIO_voidSetPinValue+0x70>
     e26:	d2 c0       	rjmp	.+420    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
     e28:	2e 81       	ldd	r18, Y+6	; 0x06
     e2a:	3f 81       	ldd	r19, Y+7	; 0x07
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	71 f1       	breq	.+92     	; 0xe8e <DIO_voidSetPinValue+0xc0>
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	9f 81       	ldd	r25, Y+7	; 0x07
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	91 05       	cpc	r25, r1
     e3a:	e9 f1       	breq	.+122    	; 0xeb6 <DIO_voidSetPinValue+0xe8>
     e3c:	c7 c0       	rjmp	.+398    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(PORTA , Copy_u8Pin); 	break;
     e3e:	ab e3       	ldi	r26, 0x3B	; 59
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	eb e3       	ldi	r30, 0x3B	; 59
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_voidSetPinValue+0x8e>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_voidSetPinValue+0x8a>
     e60:	84 2b       	or	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	b3 c0       	rjmp	.+358    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  SET_BIT(PORTB , Copy_u8Pin); 	break;
     e66:	a8 e3       	ldi	r26, 0x38	; 56
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e3       	ldi	r30, 0x38	; 56
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_voidSetPinValue+0xb6>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_voidSetPinValue+0xb2>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	9f c0       	rjmp	.+318    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  SET_BIT(PORTC , Copy_u8Pin); 	break;
     e8e:	a5 e3       	ldi	r26, 0x35	; 53
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e5 e3       	ldi	r30, 0x35	; 53
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_voidSetPinValue+0xde>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_voidSetPinValue+0xda>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	8b c0       	rjmp	.+278    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  SET_BIT(PORTD , Copy_u8Pin); 	break;
     eb6:	a2 e3       	ldi	r26, 0x32	; 50
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e2 e3       	ldi	r30, 0x32	; 50
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinValue+0x106>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinValue+0x102>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	77 c0       	rjmp	.+238    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						default       	:  									break;
					}
				}
				else if(Copy_u8PinValue == DIO_u8PIN_LOW)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 23       	and	r24, r24
     ee2:	09 f0       	breq	.+2      	; 0xee6 <DIO_voidSetPinValue+0x118>
     ee4:	73 c0       	rjmp	.+230    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
				{
					switch(Copy_u8Port)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3d 83       	std	Y+5, r19	; 0x05
     eee:	2c 83       	std	Y+4, r18	; 0x04
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	59 f1       	breq	.+86     	; 0xf50 <DIO_voidSetPinValue+0x182>
     efa:	2c 81       	ldd	r18, Y+4	; 0x04
     efc:	3d 81       	ldd	r19, Y+5	; 0x05
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	2c f4       	brge	.+10     	; 0xf0e <DIO_voidSetPinValue+0x140>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f0       	breq	.+26     	; 0xf26 <DIO_voidSetPinValue+0x158>
     f0c:	5f c0       	rjmp	.+190    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
     f0e:	2c 81       	ldd	r18, Y+4	; 0x04
     f10:	3d 81       	ldd	r19, Y+5	; 0x05
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	89 f1       	breq	.+98     	; 0xf7a <DIO_voidSetPinValue+0x1ac>
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 05       	cpc	r25, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <DIO_voidSetPinValue+0x156>
     f22:	40 c0       	rjmp	.+128    	; 0xfa4 <DIO_voidSetPinValue+0x1d6>
     f24:	53 c0       	rjmp	.+166    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(PORTA , Copy_u8Pin); 	break;
     f26:	ab e3       	ldi	r26, 0x3B	; 59
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	eb e3       	ldi	r30, 0x3B	; 59
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_voidSetPinValue+0x176>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_voidSetPinValue+0x172>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	3e c0       	rjmp	.+124    	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(PORTB , Copy_u8Pin); 	break;
     f50:	a8 e3       	ldi	r26, 0x38	; 56
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e3       	ldi	r30, 0x38	; 56
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_voidSetPinValue+0x1a0>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_voidSetPinValue+0x19c>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	29 c0       	rjmp	.+82     	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(PORTC , Copy_u8Pin); 	break;
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_voidSetPinValue+0x1ca>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_voidSetPinValue+0x1c6>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(PORTD , Copy_u8Pin); 	break;
     fa4:	a2 e3       	ldi	r26, 0x32	; 50
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e2 e3       	ldi	r30, 0x32	; 50
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinValue+0x1f4>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinValue+0x1f0>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
						default       	:  									break;
					}
				}
			}
		}
     fcc:	27 96       	adiw	r28, 0x07	; 7
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_voidSetPortValue>:
		/*    Parameters:																								*/
		/*        - Copy_u8Port: The port to set the value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8PortVALUE: The desired value (DIO_u8PORT_HIGH or DIO_u8PORT_LOW).							*/
		/****************************************************************************************************************/
		void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8PortValue)
		{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_voidSetPortValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_voidSetPortValue+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	90 f5       	brcc	.+100    	; 0x1058 <DIO_voidSetPortValue+0x7a>
			{
				switch(Copy_u8Port)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3c 83       	std	Y+4, r19	; 0x04
     ffc:	2b 83       	std	Y+3, r18	; 0x03
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	d1 f0       	breq	.+52     	; 0x103c <DIO_voidSetPortValue+0x5e>
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <DIO_voidSetPortValue+0x3e>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_voidSetPortValue+0x54>
    101a:	1e c0       	rjmp	.+60     	; 0x1058 <DIO_voidSetPortValue+0x7a>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	81 f0       	breq	.+32     	; 0x1046 <DIO_voidSetPortValue+0x68>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	81 f0       	breq	.+32     	; 0x1050 <DIO_voidSetPortValue+0x72>
    1030:	13 c0       	rjmp	.+38     	; 0x1058 <DIO_voidSetPortValue+0x7a>
				{
					case DIO_u8PORTA:  	PORTA = Copy_u8PortValue; 		break;
    1032:	eb e3       	ldi	r30, 0x3B	; 59
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	80 83       	st	Z, r24
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTB:  	PORTB = Copy_u8PortValue; 		break;
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 83       	st	Z, r24
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTC:  	PORTC = Copy_u8PortValue; 		break;
    1046:	e5 e3       	ldi	r30, 0x35	; 53
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTD:  	PORTD = Copy_u8PortValue; 		break;
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	80 83       	st	Z, r24
					default       	: 									break;
				}
			}
		}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <DIO_u8GetPinValue>:
		/*        - Copy_u8Port: The port to read the pin value from (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.														*/
		/*    Returns: The value of the pin (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).												*/
		/********************************************************************************************************************/
		u8 	 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <DIO_u8GetPinValue+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <DIO_u8GetPinValue+0x8>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <DIO_u8GetPinValue+0xa>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	6b 83       	std	Y+3, r22	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	08 f0       	brcs	.+2      	; 0x1080 <DIO_u8GetPinValue+0x1a>
    107e:	6e c0       	rjmp	.+220    	; 0x115c <DIO_u8GetPinValue+0xf6>
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 30       	cpi	r24, 0x08	; 8
    1084:	08 f0       	brcs	.+2      	; 0x1088 <DIO_u8GetPinValue+0x22>
    1086:	6a c0       	rjmp	.+212    	; 0x115c <DIO_u8GetPinValue+0xf6>
			{
				u8 Local_u8PinValue;

				switch(Copy_u8Port)
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3e 83       	std	Y+6, r19	; 0x06
    1090:	2d 83       	std	Y+5, r18	; 0x05
    1092:	4d 81       	ldd	r20, Y+5	; 0x05
    1094:	5e 81       	ldd	r21, Y+6	; 0x06
    1096:	41 30       	cpi	r20, 0x01	; 1
    1098:	51 05       	cpc	r21, r1
    109a:	41 f1       	breq	.+80     	; 0x10ec <DIO_u8GetPinValue+0x86>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	34 f4       	brge	.+12     	; 0x10b2 <DIO_u8GetPinValue+0x4c>
    10a6:	2d 81       	ldd	r18, Y+5	; 0x05
    10a8:	3e 81       	ldd	r19, Y+6	; 0x06
    10aa:	21 15       	cp	r18, r1
    10ac:	31 05       	cpc	r19, r1
    10ae:	61 f0       	breq	.+24     	; 0x10c8 <DIO_u8GetPinValue+0x62>
    10b0:	52 c0       	rjmp	.+164    	; 0x1156 <DIO_u8GetPinValue+0xf0>
    10b2:	4d 81       	ldd	r20, Y+5	; 0x05
    10b4:	5e 81       	ldd	r21, Y+6	; 0x06
    10b6:	42 30       	cpi	r20, 0x02	; 2
    10b8:	51 05       	cpc	r21, r1
    10ba:	51 f1       	breq	.+84     	; 0x1110 <DIO_u8GetPinValue+0xaa>
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	b9 f1       	breq	.+110    	; 0x1134 <DIO_u8GetPinValue+0xce>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <DIO_u8GetPinValue+0xf0>
				{
					case DIO_u8PORTA: 	Local_u8PinValue = GET_BIT(PINA , Copy_u8Pin); 		break;
    10c8:	e9 e3       	ldi	r30, 0x39	; 57
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8GetPinValue+0x7a>
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8GetPinValue+0x76>
    10e4:	ca 01       	movw	r24, r20
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	35 c0       	rjmp	.+106    	; 0x1156 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTB: 	Local_u8PinValue = GET_BIT(PINB , Copy_u8Pin); 		break;
    10ec:	e6 e3       	ldi	r30, 0x36	; 54
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_u8GetPinValue+0x9e>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_u8GetPinValue+0x9a>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	23 c0       	rjmp	.+70     	; 0x1156 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTC: 	Local_u8PinValue = GET_BIT(PINC , Copy_u8Pin); 		break;
    1110:	e3 e3       	ldi	r30, 0x33	; 51
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8GetPinValue+0xc2>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8GetPinValue+0xbe>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTD: 	Local_u8PinValue = GET_BIT(PIND , Copy_u8Pin); 		break;
    1134:	e0 e3       	ldi	r30, 0x30	; 48
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a9 01       	movw	r20, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_u8GetPinValue+0xe6>
    1148:	55 95       	asr	r21
    114a:	47 95       	ror	r20
    114c:	8a 95       	dec	r24
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_u8GetPinValue+0xe2>
    1150:	ca 01       	movw	r24, r20
    1152:	81 70       	andi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
					default      	: 														break;
				}

				return Local_u8PinValue;
    1156:	59 81       	ldd	r21, Y+1	; 0x01
    1158:	5c 83       	std	Y+4, r21	; 0x04
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_u8GetPinValue+0xfa>
			}

			else
			{
				return	-1;
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	8c 83       	std	Y+4, r24	; 0x04
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
			}
		}
    1162:	26 96       	adiw	r28, 0x06	; 6
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <DIO_voidTogglePin>:
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pin to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) to be toggled.																	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePin(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_voidTogglePin+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <DIO_voidTogglePin+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	6a 83       	std	Y+2, r22	; 0x02
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	08 f0       	brcs	.+2      	; 0x118c <DIO_voidTogglePin+0x18>
    118a:	72 c0       	rjmp	.+228    	; 0x1270 <DIO_voidTogglePin+0xfc>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	88 30       	cpi	r24, 0x08	; 8
    1190:	08 f0       	brcs	.+2      	; 0x1194 <DIO_voidTogglePin+0x20>
    1192:	6e c0       	rjmp	.+220    	; 0x1270 <DIO_voidTogglePin+0xfc>
			{
				switch (Copy_u8Port)
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 83       	std	Y+4, r19	; 0x04
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	49 f1       	breq	.+82     	; 0x11fa <DIO_voidTogglePin+0x86>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <DIO_voidTogglePin+0x48>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <DIO_voidTogglePin+0x5e>
    11ba:	5a c0       	rjmp	.+180    	; 0x1270 <DIO_voidTogglePin+0xfc>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	71 f1       	breq	.+92     	; 0x1222 <DIO_voidTogglePin+0xae>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	e9 f1       	breq	.+122    	; 0x124a <DIO_voidTogglePin+0xd6>
    11d0:	4f c0       	rjmp	.+158    	; 0x1270 <DIO_voidTogglePin+0xfc>
				{
					case DIO_u8PORTA : 	TOG_BIT(PORTA , Copy_u8Pin); 		break ;
    11d2:	ab e3       	ldi	r26, 0x3B	; 59
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_voidTogglePin+0x7c>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_voidTogglePin+0x78>
    11f4:	84 27       	eor	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	3b c0       	rjmp	.+118    	; 0x1270 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTB : 	TOG_BIT(PORTB , Copy_u8Pin); 		break ;
    11fa:	a8 e3       	ldi	r26, 0x38	; 56
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_voidTogglePin+0xa4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_voidTogglePin+0xa0>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	27 c0       	rjmp	.+78     	; 0x1270 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTC : 	TOG_BIT(PORTC , Copy_u8Pin); 		break ;
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidTogglePin+0xcc>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidTogglePin+0xc8>
    1244:	84 27       	eor	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	13 c0       	rjmp	.+38     	; 0x1270 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTD :	TOG_BIT(PORTD , Copy_u8Pin); 		break ;
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_voidTogglePin+0xf4>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_voidTogglePin+0xf0>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24
					default 	   	 : 							 			break ;
				}
			}
		}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <DIO_voidTogglePort>:
		/*    Description: Toggles the values of the entire port.																	*/
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pins to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePort(u8 Copy_u8Port)
		{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_voidTogglePort+0x6>
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	08 f0       	brcs	.+2      	; 0x1294 <DIO_voidTogglePort+0x16>
    1292:	3e c0       	rjmp	.+124    	; 0x1310 <DIO_voidTogglePort+0x92>
			{
				switch (Copy_u8Port)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3b 83       	std	Y+3, r19	; 0x03
    129c:	2a 83       	std	Y+2, r18	; 0x02
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	9b 81       	ldd	r25, Y+3	; 0x03
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	e9 f0       	breq	.+58     	; 0x12e2 <DIO_voidTogglePort+0x64>
    12a8:	2a 81       	ldd	r18, Y+2	; 0x02
    12aa:	3b 81       	ldd	r19, Y+3	; 0x03
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_voidTogglePort+0x3e>
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_voidTogglePort+0x54>
    12ba:	2a c0       	rjmp	.+84     	; 0x1310 <DIO_voidTogglePort+0x92>
    12bc:	2a 81       	ldd	r18, Y+2	; 0x02
    12be:	3b 81       	ldd	r19, Y+3	; 0x03
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	b1 f0       	breq	.+44     	; 0x12f2 <DIO_voidTogglePort+0x74>
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	c9 f0       	breq	.+50     	; 0x1302 <DIO_voidTogglePort+0x84>
    12d0:	1f c0       	rjmp	.+62     	; 0x1310 <DIO_voidTogglePort+0x92>
				{
					case DIO_u8PORTA : 	TOG_REG(PORTA , DIO_u8PORT_HIGH); 		break ;
    12d2:	ab e3       	ldi	r26, 0x3B	; 59
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e3       	ldi	r30, 0x3B	; 59
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 95       	com	r24
    12de:	8c 93       	st	X, r24
    12e0:	17 c0       	rjmp	.+46     	; 0x1310 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTB : 	TOG_REG(PORTB , DIO_u8PORT_HIGH); 		break ;
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 95       	com	r24
    12ee:	8c 93       	st	X, r24
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTC : 	TOG_REG(PORTC , DIO_u8PORT_HIGH); 		break ;
    12f2:	a5 e3       	ldi	r26, 0x35	; 53
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 95       	com	r24
    12fe:	8c 93       	st	X, r24
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTD :	TOG_REG(PORTD , DIO_u8PORT_HIGH); 		break ;
    1302:	a2 e3       	ldi	r26, 0x32	; 50
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e2 e3       	ldi	r30, 0x32	; 50
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 95       	com	r24
    130e:	8c 93       	st	X, r24
					default 	     :	 										break ;
				}
			}
		}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <SevenSegment_voidInit>:

const u8 Numbers[10]={0b0000, 0b0001, 0b0010, 0b0011, 0b0100, 0b0101, 0b0110, 0b0111, 0b1000, 0b1001};


void SevenSegment_voidInit()
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
	/* Directions of BCD Pins */
	DIO_voidSetPinDirection(BCD_PORT, BCD_PIN_D0, DIO_u8PIN_OUTPUT);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(BCD_PORT, BCD_PIN_D1, DIO_u8PIN_OUTPUT);
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(BCD_PORT, BCD_PIN_D2, DIO_u8PIN_OUTPUT);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(BCD_PORT, BCD_PIN_D3, DIO_u8PIN_OUTPUT);
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	64 e0       	ldi	r22, 0x04	; 4
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>

	/* error >>> Don't forget the directions of Enable */
	DIO_voidSetPinDirection(ENABLE_PORT1, FIRST_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_OUTPUT);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	63 e0       	ldi	r22, 0x03	; 3
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ENABLE_PORT1, SECOND_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_OUTPUT);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ENABLE_PORT2, THIRD_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_OUTPUT);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	65 e0       	ldi	r22, 0x05	; 5
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ENABLE_PORT2, FOURTH_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_OUTPUT);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	66 e0       	ldi	r22, 0x06	; 6
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>

	/* Enable all Seven Segments */
	DIO_voidSetPinValue(ENABLE_PORT1, FIRST_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_LOW);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	63 e0       	ldi	r22, 0x03	; 3
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ENABLE_PORT1, SECOND_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_LOW);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	62 e0       	ldi	r22, 0x02	; 2
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ENABLE_PORT2, THIRD_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_LOW);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	65 e0       	ldi	r22, 0x05	; 5
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ENABLE_PORT2, FOURTH_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_LOW);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	66 e0       	ldi	r22, 0x06	; 6
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <SevenSegmentBCD_voidWriteNumber>:



void SevenSegmentBCD_voidWriteNumber(u16 copy_u16Number)
{
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	ce 58       	subi	r28, 0x8E	; 142
    13b0:	d0 40       	sbci	r29, 0x00	; 0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	fe 01       	movw	r30, r28
    13be:	e3 57       	subi	r30, 0x73	; 115
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
	if(copy_u16Number >= 0 && copy_u16Number <= 9)
    13c6:	fe 01       	movw	r30, r28
    13c8:	e3 57       	subi	r30, 0x73	; 115
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	8a 30       	cpi	r24, 0x0A	; 10
    13d2:	91 05       	cpc	r25, r1
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <SevenSegmentBCD_voidWriteNumber+0x36>
    13d6:	bc c0       	rjmp	.+376    	; 0x1550 <SevenSegmentBCD_voidWriteNumber+0x1ae>
	{
		BCD_To_7Segment((copy_u16Number), FIRST_SEVEN_SEGMENT);
    13d8:	fe 01       	movw	r30, r28
    13da:	e3 57       	subi	r30, 0x73	; 115
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    13e6:	fe 01       	movw	r30, r28
    13e8:	e7 57       	subi	r30, 0x77	; 119
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 ea       	ldi	r26, 0xA0	; 160
    13f2:	b1 e4       	ldi	r27, 0x41	; 65
    13f4:	80 83       	st	Z, r24
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a2 83       	std	Z+2, r26	; 0x02
    13fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	8e 01       	movw	r16, r28
    13fe:	0b 57       	subi	r16, 0x7B	; 123
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	fe 01       	movw	r30, r28
    1404:	e7 57       	subi	r30, 0x77	; 119
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a e7       	ldi	r20, 0x7A	; 122
    1416:	55 e4       	ldi	r21, 0x45	; 69
    1418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	f8 01       	movw	r30, r16
    1422:	80 83       	st	Z, r24
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	a2 83       	std	Z+2, r26	; 0x02
    1428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    142a:	fe 01       	movw	r30, r28
    142c:	eb 57       	subi	r30, 0x7B	; 123
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	44 f4       	brge	.+16     	; 0x1458 <SevenSegmentBCD_voidWriteNumber+0xb6>
		__ticks = 1;
    1448:	fe 01       	movw	r30, r28
    144a:	ed 57       	subi	r30, 0x7D	; 125
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	64 c0       	rjmp	.+200    	; 0x1520 <SevenSegmentBCD_voidWriteNumber+0x17e>
	else if (__tmp > 65535)
    1458:	fe 01       	movw	r30, r28
    145a:	eb 57       	subi	r30, 0x7B	; 123
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	0c f0       	brlt	.+2      	; 0x1478 <SevenSegmentBCD_voidWriteNumber+0xd6>
    1476:	43 c0       	rjmp	.+134    	; 0x14fe <SevenSegmentBCD_voidWriteNumber+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1478:	fe 01       	movw	r30, r28
    147a:	e7 57       	subi	r30, 0x77	; 119
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8e 01       	movw	r16, r28
    1498:	0d 57       	subi	r16, 0x7D	; 125
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	f8 01       	movw	r30, r16
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	1f c0       	rjmp	.+62     	; 0x14ee <SevenSegmentBCD_voidWriteNumber+0x14c>
    14b0:	fe 01       	movw	r30, r28
    14b2:	ef 57       	subi	r30, 0x7F	; 127
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 e9       	ldi	r24, 0x90	; 144
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14be:	fe 01       	movw	r30, r28
    14c0:	ef 57       	subi	r30, 0x7F	; 127
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <SevenSegmentBCD_voidWriteNumber+0x126>
    14cc:	fe 01       	movw	r30, r28
    14ce:	ef 57       	subi	r30, 0x7F	; 127
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	de 01       	movw	r26, r28
    14d8:	ad 57       	subi	r26, 0x7D	; 125
    14da:	bf 4f       	sbci	r27, 0xFF	; 255
    14dc:	fe 01       	movw	r30, r28
    14de:	ed 57       	subi	r30, 0x7D	; 125
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	9c 93       	st	X, r25
    14ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	fe 01       	movw	r30, r28
    14f0:	ed 57       	subi	r30, 0x7D	; 125
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	d1 f6       	brne	.-76     	; 0x14b0 <SevenSegmentBCD_voidWriteNumber+0x10e>
    14fc:	29 c6       	rjmp	.+3154   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	8e 01       	movw	r16, r28
    1500:	0d 57       	subi	r16, 0x7D	; 125
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	fe 01       	movw	r30, r28
    1506:	eb 57       	subi	r30, 0x7B	; 123
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	f8 01       	movw	r30, r16
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	de 01       	movw	r26, r28
    1522:	a1 58       	subi	r26, 0x81	; 129
    1524:	bf 4f       	sbci	r27, 0xFF	; 255
    1526:	fe 01       	movw	r30, r28
    1528:	ed 57       	subi	r30, 0x7D	; 125
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	11 96       	adiw	r26, 0x01	; 1
    1532:	9c 93       	st	X, r25
    1534:	8e 93       	st	-X, r24
    1536:	fe 01       	movw	r30, r28
    1538:	e1 58       	subi	r30, 0x81	; 129
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <SevenSegmentBCD_voidWriteNumber+0x19e>
    1544:	fe 01       	movw	r30, r28
    1546:	e1 58       	subi	r30, 0x81	; 129
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
    154e:	00 c6       	rjmp	.+3072   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
		_delay_ms(20);
	}

	else if(copy_u16Number > 9 && copy_u16Number <= 99)
    1550:	fe 01       	movw	r30, r28
    1552:	e3 57       	subi	r30, 0x73	; 115
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	8a 30       	cpi	r24, 0x0A	; 10
    155c:	91 05       	cpc	r25, r1
    155e:	08 f4       	brcc	.+2      	; 0x1562 <SevenSegmentBCD_voidWriteNumber+0x1c0>
    1560:	8c c1       	rjmp	.+792    	; 0x187a <SevenSegmentBCD_voidWriteNumber+0x4d8>
    1562:	fe 01       	movw	r30, r28
    1564:	e3 57       	subi	r30, 0x73	; 115
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	84 36       	cpi	r24, 0x64	; 100
    156e:	91 05       	cpc	r25, r1
    1570:	08 f0       	brcs	.+2      	; 0x1574 <SevenSegmentBCD_voidWriteNumber+0x1d2>
    1572:	83 c1       	rjmp	.+774    	; 0x187a <SevenSegmentBCD_voidWriteNumber+0x4d8>
	{
		BCD_To_7Segment((copy_u16Number % 10), FIRST_SEVEN_SEGMENT);
    1574:	fe 01       	movw	r30, r28
    1576:	e3 57       	subi	r30, 0x73	; 115
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	2a e0       	ldi	r18, 0x0A	; 10
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	b9 01       	movw	r22, r18
    1584:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    158e:	fe 01       	movw	r30, r28
    1590:	e5 58       	subi	r30, 0x85	; 133
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e2       	ldi	r26, 0x20	; 32
    159a:	b1 e4       	ldi	r27, 0x41	; 65
    159c:	80 83       	st	Z, r24
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	a2 83       	std	Z+2, r26	; 0x02
    15a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	8e 01       	movw	r16, r28
    15a6:	09 58       	subi	r16, 0x89	; 137
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	fe 01       	movw	r30, r28
    15ac:	e5 58       	subi	r30, 0x85	; 133
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a e7       	ldi	r20, 0x7A	; 122
    15be:	55 e4       	ldi	r21, 0x45	; 69
    15c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	80 83       	st	Z, r24
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	a2 83       	std	Z+2, r26	; 0x02
    15d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d2:	fe 01       	movw	r30, r28
    15d4:	e9 58       	subi	r30, 0x89	; 137
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	44 f4       	brge	.+16     	; 0x1600 <SevenSegmentBCD_voidWriteNumber+0x25e>
		__ticks = 1;
    15f0:	fe 01       	movw	r30, r28
    15f2:	eb 58       	subi	r30, 0x8B	; 139
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
    15fe:	64 c0       	rjmp	.+200    	; 0x16c8 <SevenSegmentBCD_voidWriteNumber+0x326>
	else if (__tmp > 65535)
    1600:	fe 01       	movw	r30, r28
    1602:	e9 58       	subi	r30, 0x89	; 137
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	0c f0       	brlt	.+2      	; 0x1620 <SevenSegmentBCD_voidWriteNumber+0x27e>
    161e:	43 c0       	rjmp	.+134    	; 0x16a6 <SevenSegmentBCD_voidWriteNumber+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	fe 01       	movw	r30, r28
    1622:	e5 58       	subi	r30, 0x85	; 133
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	60 81       	ld	r22, Z
    1628:	71 81       	ldd	r23, Z+1	; 0x01
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8e 01       	movw	r16, r28
    1640:	0b 58       	subi	r16, 0x8B	; 139
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	1f c0       	rjmp	.+62     	; 0x1696 <SevenSegmentBCD_voidWriteNumber+0x2f4>
    1658:	fe 01       	movw	r30, r28
    165a:	ed 58       	subi	r30, 0x8D	; 141
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 e9       	ldi	r24, 0x90	; 144
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	fe 01       	movw	r30, r28
    1668:	ed 58       	subi	r30, 0x8D	; 141
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <SevenSegmentBCD_voidWriteNumber+0x2ce>
    1674:	fe 01       	movw	r30, r28
    1676:	ed 58       	subi	r30, 0x8D	; 141
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	de 01       	movw	r26, r28
    1680:	ab 58       	subi	r26, 0x8B	; 139
    1682:	bf 4f       	sbci	r27, 0xFF	; 255
    1684:	fe 01       	movw	r30, r28
    1686:	eb 58       	subi	r30, 0x8B	; 139
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	9c 93       	st	X, r25
    1694:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1696:	fe 01       	movw	r30, r28
    1698:	eb 58       	subi	r30, 0x8B	; 139
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	d1 f6       	brne	.-76     	; 0x1658 <SevenSegmentBCD_voidWriteNumber+0x2b6>
    16a4:	27 c0       	rjmp	.+78     	; 0x16f4 <SevenSegmentBCD_voidWriteNumber+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	8e 01       	movw	r16, r28
    16a8:	0b 58       	subi	r16, 0x8B	; 139
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	fe 01       	movw	r30, r28
    16ae:	e9 58       	subi	r30, 0x89	; 137
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	f8 01       	movw	r30, r16
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	de 01       	movw	r26, r28
    16ca:	af 58       	subi	r26, 0x8F	; 143
    16cc:	bf 4f       	sbci	r27, 0xFF	; 255
    16ce:	fe 01       	movw	r30, r28
    16d0:	eb 58       	subi	r30, 0x8B	; 139
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	8d 93       	st	X+, r24
    16da:	9c 93       	st	X, r25
    16dc:	fe 01       	movw	r30, r28
    16de:	ef 58       	subi	r30, 0x8F	; 143
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <SevenSegmentBCD_voidWriteNumber+0x344>
    16ea:	fe 01       	movw	r30, r28
    16ec:	ef 58       	subi	r30, 0x8F	; 143
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24
		_delay_ms(10);
		BCD_To_7Segment((copy_u16Number / 10), SECOND_SEVEN_SEGMENT);
    16f4:	fe 01       	movw	r30, r28
    16f6:	e3 57       	subi	r30, 0x73	; 115
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	2a e0       	ldi	r18, 0x0A	; 10
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1708:	cb 01       	movw	r24, r22
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    1710:	fe 01       	movw	r30, r28
    1712:	e3 59       	subi	r30, 0x93	; 147
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 e2       	ldi	r26, 0x20	; 32
    171c:	b1 e4       	ldi	r27, 0x41	; 65
    171e:	80 83       	st	Z, r24
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	a2 83       	std	Z+2, r26	; 0x02
    1724:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	8e 01       	movw	r16, r28
    1728:	07 59       	subi	r16, 0x97	; 151
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	fe 01       	movw	r30, r28
    172e:	e3 59       	subi	r30, 0x93	; 147
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4a e7       	ldi	r20, 0x7A	; 122
    1740:	55 e4       	ldi	r21, 0x45	; 69
    1742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	f8 01       	movw	r30, r16
    174c:	80 83       	st	Z, r24
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	a2 83       	std	Z+2, r26	; 0x02
    1752:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1754:	fe 01       	movw	r30, r28
    1756:	e7 59       	subi	r30, 0x97	; 151
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	44 f4       	brge	.+16     	; 0x1782 <SevenSegmentBCD_voidWriteNumber+0x3e0>
		__ticks = 1;
    1772:	fe 01       	movw	r30, r28
    1774:	e9 59       	subi	r30, 0x99	; 153
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
    1780:	64 c0       	rjmp	.+200    	; 0x184a <SevenSegmentBCD_voidWriteNumber+0x4a8>
	else if (__tmp > 65535)
    1782:	fe 01       	movw	r30, r28
    1784:	e7 59       	subi	r30, 0x97	; 151
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	57 e4       	ldi	r21, 0x47	; 71
    1798:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	0c f0       	brlt	.+2      	; 0x17a2 <SevenSegmentBCD_voidWriteNumber+0x400>
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <SevenSegmentBCD_voidWriteNumber+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a2:	fe 01       	movw	r30, r28
    17a4:	e3 59       	subi	r30, 0x93	; 147
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8e 01       	movw	r16, r28
    17c2:	09 59       	subi	r16, 0x99	; 153
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	f8 01       	movw	r30, r16
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
    17d8:	1f c0       	rjmp	.+62     	; 0x1818 <SevenSegmentBCD_voidWriteNumber+0x476>
    17da:	fe 01       	movw	r30, r28
    17dc:	eb 59       	subi	r30, 0x9B	; 155
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 e9       	ldi	r24, 0x90	; 144
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    17e8:	fe 01       	movw	r30, r28
    17ea:	eb 59       	subi	r30, 0x9B	; 155
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <SevenSegmentBCD_voidWriteNumber+0x450>
    17f6:	fe 01       	movw	r30, r28
    17f8:	eb 59       	subi	r30, 0x9B	; 155
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	de 01       	movw	r26, r28
    1802:	a9 59       	subi	r26, 0x99	; 153
    1804:	bf 4f       	sbci	r27, 0xFF	; 255
    1806:	fe 01       	movw	r30, r28
    1808:	e9 59       	subi	r30, 0x99	; 153
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	9c 93       	st	X, r25
    1816:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	fe 01       	movw	r30, r28
    181a:	e9 59       	subi	r30, 0x99	; 153
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	d1 f6       	brne	.-76     	; 0x17da <SevenSegmentBCD_voidWriteNumber+0x438>
    1826:	94 c4       	rjmp	.+2344   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	8e 01       	movw	r16, r28
    182a:	09 59       	subi	r16, 0x99	; 153
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	fe 01       	movw	r30, r28
    1830:	e7 59       	subi	r30, 0x97	; 151
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	f8 01       	movw	r30, r16
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	de 01       	movw	r26, r28
    184c:	ad 59       	subi	r26, 0x9D	; 157
    184e:	bf 4f       	sbci	r27, 0xFF	; 255
    1850:	fe 01       	movw	r30, r28
    1852:	e9 59       	subi	r30, 0x99	; 153
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	11 96       	adiw	r26, 0x01	; 1
    185c:	9c 93       	st	X, r25
    185e:	8e 93       	st	-X, r24
    1860:	fe 01       	movw	r30, r28
    1862:	ed 59       	subi	r30, 0x9D	; 157
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <SevenSegmentBCD_voidWriteNumber+0x4c8>
    186e:	fe 01       	movw	r30, r28
    1870:	ed 59       	subi	r30, 0x9D	; 157
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	6b c4       	rjmp	.+2262   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
		_delay_ms(10);
	}

	else if(copy_u16Number > 99 && copy_u16Number <= 999)
    187a:	fe 01       	movw	r30, r28
    187c:	e3 57       	subi	r30, 0x73	; 115
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	84 36       	cpi	r24, 0x64	; 100
    1886:	91 05       	cpc	r25, r1
    1888:	08 f4       	brcc	.+2      	; 0x188c <SevenSegmentBCD_voidWriteNumber+0x4ea>
    188a:	2f c2       	rjmp	.+1118   	; 0x1cea <SevenSegmentBCD_voidWriteNumber+0x948>
    188c:	fe 01       	movw	r30, r28
    188e:	e3 57       	subi	r30, 0x73	; 115
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	f3 e0       	ldi	r31, 0x03	; 3
    1898:	88 3e       	cpi	r24, 0xE8	; 232
    189a:	9f 07       	cpc	r25, r31
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <SevenSegmentBCD_voidWriteNumber+0x4fe>
    189e:	25 c2       	rjmp	.+1098   	; 0x1cea <SevenSegmentBCD_voidWriteNumber+0x948>
	{
		BCD_To_7Segment((copy_u16Number % 10), FIRST_SEVEN_SEGMENT);
    18a0:	fe 01       	movw	r30, r28
    18a2:	e3 57       	subi	r30, 0x73	; 115
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	2a e0       	ldi	r18, 0x0A	; 10
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	b9 01       	movw	r22, r18
    18b0:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
		copy_u16Number /= 10;
    18ba:	8e 01       	movw	r16, r28
    18bc:	03 57       	subi	r16, 0x73	; 115
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e3 57       	subi	r30, 0x73	; 115
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	2a e0       	ldi	r18, 0x0A	; 10
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	b9 01       	movw	r22, r18
    18d0:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    18d4:	cb 01       	movw	r24, r22
    18d6:	f8 01       	movw	r30, r16
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	fe 01       	movw	r30, r28
    18de:	e1 5a       	subi	r30, 0xA1	; 161
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 ee       	ldi	r26, 0xE0	; 224
    18e8:	b0 e4       	ldi	r27, 0x40	; 64
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	8e 01       	movw	r16, r28
    18f4:	05 5a       	subi	r16, 0xA5	; 165
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	fe 01       	movw	r30, r28
    18fa:	e1 5a       	subi	r30, 0xA1	; 161
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4a e7       	ldi	r20, 0x7A	; 122
    190c:	55 e4       	ldi	r21, 0x45	; 69
    190e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	80 83       	st	Z, r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1920:	fe 01       	movw	r30, r28
    1922:	e5 5a       	subi	r30, 0xA5	; 165
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	44 f4       	brge	.+16     	; 0x194e <SevenSegmentBCD_voidWriteNumber+0x5ac>
		__ticks = 1;
    193e:	fe 01       	movw	r30, r28
    1940:	e7 5a       	subi	r30, 0xA7	; 167
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	64 c0       	rjmp	.+200    	; 0x1a16 <SevenSegmentBCD_voidWriteNumber+0x674>
	else if (__tmp > 65535)
    194e:	fe 01       	movw	r30, r28
    1950:	e5 5a       	subi	r30, 0xA5	; 165
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <SevenSegmentBCD_voidWriteNumber+0x5cc>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <SevenSegmentBCD_voidWriteNumber+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	fe 01       	movw	r30, r28
    1970:	e1 5a       	subi	r30, 0xA1	; 161
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8e 01       	movw	r16, r28
    198e:	07 5a       	subi	r16, 0xA7	; 167
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <SevenSegmentBCD_voidWriteNumber+0x642>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e9 5a       	subi	r30, 0xA9	; 169
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 e9       	ldi	r24, 0x90	; 144
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	fe 01       	movw	r30, r28
    19b6:	e9 5a       	subi	r30, 0xA9	; 169
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <SevenSegmentBCD_voidWriteNumber+0x61c>
    19c2:	fe 01       	movw	r30, r28
    19c4:	e9 5a       	subi	r30, 0xA9	; 169
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	de 01       	movw	r26, r28
    19ce:	a7 5a       	subi	r26, 0xA7	; 167
    19d0:	bf 4f       	sbci	r27, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	e7 5a       	subi	r30, 0xA7	; 167
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	9c 93       	st	X, r25
    19e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	fe 01       	movw	r30, r28
    19e6:	e7 5a       	subi	r30, 0xA7	; 167
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	d1 f6       	brne	.-76     	; 0x19a6 <SevenSegmentBCD_voidWriteNumber+0x604>
    19f2:	27 c0       	rjmp	.+78     	; 0x1a42 <SevenSegmentBCD_voidWriteNumber+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	8e 01       	movw	r16, r28
    19f6:	07 5a       	subi	r16, 0xA7	; 167
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 5a       	subi	r30, 0xA5	; 165
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	de 01       	movw	r26, r28
    1a18:	ab 5a       	subi	r26, 0xAB	; 171
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 5a       	subi	r30, 0xA7	; 167
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	8d 93       	st	X+, r24
    1a28:	9c 93       	st	X, r25
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	eb 5a       	subi	r30, 0xAB	; 171
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <SevenSegmentBCD_voidWriteNumber+0x692>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	eb 5a       	subi	r30, 0xAB	; 171
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
		_delay_ms(7);
		BCD_To_7Segment((copy_u16Number % 10), SECOND_SEVEN_SEGMENT);
    1a42:	fe 01       	movw	r30, r28
    1a44:	e3 57       	subi	r30, 0x73	; 115
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	2a e0       	ldi	r18, 0x0A	; 10
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	b9 01       	movw	r22, r18
    1a52:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1a56:	62 e0       	ldi	r22, 0x02	; 2
    1a58:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ef 5a       	subi	r30, 0xAF	; 175
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 ee       	ldi	r26, 0xE0	; 224
    1a68:	b0 e4       	ldi	r27, 0x40	; 64
    1a6a:	80 83       	st	Z, r24
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	a2 83       	std	Z+2, r26	; 0x02
    1a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	8e 01       	movw	r16, r28
    1a74:	03 5b       	subi	r16, 0xB3	; 179
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ef 5a       	subi	r30, 0xAF	; 175
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	55 e4       	ldi	r21, 0x45	; 69
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 83       	st	Z, r24
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	a2 83       	std	Z+2, r26	; 0x02
    1a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e3 5b       	subi	r30, 0xB3	; 179
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	44 f4       	brge	.+16     	; 0x1ace <SevenSegmentBCD_voidWriteNumber+0x72c>
		__ticks = 1;
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e5 5b       	subi	r30, 0xB5	; 181
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
    1acc:	64 c0       	rjmp	.+200    	; 0x1b96 <SevenSegmentBCD_voidWriteNumber+0x7f4>
	else if (__tmp > 65535)
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e3 5b       	subi	r30, 0xB3	; 179
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	0c f0       	brlt	.+2      	; 0x1aee <SevenSegmentBCD_voidWriteNumber+0x74c>
    1aec:	43 c0       	rjmp	.+134    	; 0x1b74 <SevenSegmentBCD_voidWriteNumber+0x7d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	fe 01       	movw	r30, r28
    1af0:	ef 5a       	subi	r30, 0xAF	; 175
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8e 01       	movw	r16, r28
    1b0e:	05 5b       	subi	r16, 0xB5	; 181
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	1f c0       	rjmp	.+62     	; 0x1b64 <SevenSegmentBCD_voidWriteNumber+0x7c2>
    1b26:	fe 01       	movw	r30, r28
    1b28:	e7 5b       	subi	r30, 0xB7	; 183
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	80 e9       	ldi	r24, 0x90	; 144
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	fe 01       	movw	r30, r28
    1b36:	e7 5b       	subi	r30, 0xB7	; 183
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <SevenSegmentBCD_voidWriteNumber+0x79c>
    1b42:	fe 01       	movw	r30, r28
    1b44:	e7 5b       	subi	r30, 0xB7	; 183
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	de 01       	movw	r26, r28
    1b4e:	a5 5b       	subi	r26, 0xB5	; 181
    1b50:	bf 4f       	sbci	r27, 0xFF	; 255
    1b52:	fe 01       	movw	r30, r28
    1b54:	e5 5b       	subi	r30, 0xB5	; 181
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	11 96       	adiw	r26, 0x01	; 1
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	fe 01       	movw	r30, r28
    1b66:	e5 5b       	subi	r30, 0xB5	; 181
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	d1 f6       	brne	.-76     	; 0x1b26 <SevenSegmentBCD_voidWriteNumber+0x784>
    1b72:	27 c0       	rjmp	.+78     	; 0x1bc2 <SevenSegmentBCD_voidWriteNumber+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	8e 01       	movw	r16, r28
    1b76:	05 5b       	subi	r16, 0xB5	; 181
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e3 5b       	subi	r30, 0xB3	; 179
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	f8 01       	movw	r30, r16
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
    1b96:	de 01       	movw	r26, r28
    1b98:	a9 5b       	subi	r26, 0xB9	; 185
    1b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e5 5b       	subi	r30, 0xB5	; 181
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	8d 93       	st	X+, r24
    1ba8:	9c 93       	st	X, r25
    1baa:	fe 01       	movw	r30, r28
    1bac:	e9 5b       	subi	r30, 0xB9	; 185
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <SevenSegmentBCD_voidWriteNumber+0x812>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e9 5b       	subi	r30, 0xB9	; 185
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
		_delay_ms(7);
		BCD_To_7Segment((copy_u16Number / 10), THIRD_SEVEN_SEGMENT);
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e3 57       	subi	r30, 0x73	; 115
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	2a e0       	ldi	r18, 0x0A	; 10
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	63 e0       	ldi	r22, 0x03	; 3
    1bda:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    1bde:	fe 01       	movw	r30, r28
    1be0:	ed 5b       	subi	r30, 0xBD	; 189
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a0 ee       	ldi	r26, 0xE0	; 224
    1bea:	b0 e4       	ldi	r27, 0x40	; 64
    1bec:	80 83       	st	Z, r24
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	a2 83       	std	Z+2, r26	; 0x02
    1bf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	8e 01       	movw	r16, r28
    1bf6:	01 5c       	subi	r16, 0xC1	; 193
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ed 5b       	subi	r30, 0xBD	; 189
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a e7       	ldi	r20, 0x7A	; 122
    1c0e:	55 e4       	ldi	r21, 0x45	; 69
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	f8 01       	movw	r30, r16
    1c1a:	80 83       	st	Z, r24
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	a2 83       	std	Z+2, r26	; 0x02
    1c20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c22:	fe 01       	movw	r30, r28
    1c24:	ff 96       	adiw	r30, 0x3f	; 63
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <SevenSegmentBCD_voidWriteNumber+0x8a6>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9e af       	std	Y+62, r25	; 0x3e
    1c44:	8d af       	std	Y+61, r24	; 0x3d
    1c46:	46 c0       	rjmp	.+140    	; 0x1cd4 <SevenSegmentBCD_voidWriteNumber+0x932>
	else if (__tmp > 65535)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ff 96       	adiw	r30, 0x3f	; 63
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	64 f5       	brge	.+88     	; 0x1cbc <SevenSegmentBCD_voidWriteNumber+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c64:	fe 01       	movw	r30, r28
    1c66:	ed 5b       	subi	r30, 0xBD	; 189
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e2       	ldi	r20, 0x20	; 32
    1c78:	51 e4       	ldi	r21, 0x41	; 65
    1c7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9e af       	std	Y+62, r25	; 0x3e
    1c90:	8d af       	std	Y+61, r24	; 0x3d
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <SevenSegmentBCD_voidWriteNumber+0x910>
    1c94:	80 e9       	ldi	r24, 0x90	; 144
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	9c af       	std	Y+60, r25	; 0x3c
    1c9a:	8b af       	std	Y+59, r24	; 0x3b
    1c9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <SevenSegmentBCD_voidWriteNumber+0x8fe>
    1ca4:	9c af       	std	Y+60, r25	; 0x3c
    1ca6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1caa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	9e af       	std	Y+62, r25	; 0x3e
    1cb0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	69 f7       	brne	.-38     	; 0x1c94 <SevenSegmentBCD_voidWriteNumber+0x8f2>
    1cba:	4a c2       	rjmp	.+1172   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	ff 96       	adiw	r30, 0x3f	; 63
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9e af       	std	Y+62, r25	; 0x3e
    1cd2:	8d af       	std	Y+61, r24	; 0x3d
    1cd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd8:	9a af       	std	Y+58, r25	; 0x3a
    1cda:	89 af       	std	Y+57, r24	; 0x39
    1cdc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cde:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <SevenSegmentBCD_voidWriteNumber+0x93e>
    1ce4:	9a af       	std	Y+58, r25	; 0x3a
    1ce6:	89 af       	std	Y+57, r24	; 0x39
    1ce8:	33 c2       	rjmp	.+1126   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
		_delay_ms(7);
	}

	else if(copy_u16Number > 999 && copy_u16Number <= 9999)
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 57       	subi	r30, 0x73	; 115
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	f3 e0       	ldi	r31, 0x03	; 3
    1cf6:	88 3e       	cpi	r24, 0xE8	; 232
    1cf8:	9f 07       	cpc	r25, r31
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <SevenSegmentBCD_voidWriteNumber+0x95c>
    1cfc:	29 c2       	rjmp	.+1106   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e3 57       	subi	r30, 0x73	; 115
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	27 e2       	ldi	r18, 0x27	; 39
    1d0a:	80 31       	cpi	r24, 0x10	; 16
    1d0c:	92 07       	cpc	r25, r18
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <SevenSegmentBCD_voidWriteNumber+0x970>
    1d10:	1f c2       	rjmp	.+1086   	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
	{
		BCD_To_7Segment((copy_u16Number % 10), FIRST_SEVEN_SEGMENT);
    1d12:	fe 01       	movw	r30, r28
    1d14:	e3 57       	subi	r30, 0x73	; 115
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	b9 01       	movw	r22, r18
    1d22:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1d26:	61 e0       	ldi	r22, 0x01	; 1
    1d28:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
		copy_u16Number /= 10;
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	03 57       	subi	r16, 0x73	; 115
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	fe 01       	movw	r30, r28
    1d34:	e3 57       	subi	r30, 0x73	; 115
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	2a e0       	ldi	r18, 0x0A	; 10
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	b9 01       	movw	r22, r18
    1d42:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1d46:	cb 01       	movw	r24, r22
    1d48:	f8 01       	movw	r30, r16
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 ea       	ldi	r26, 0xA0	; 160
    1d54:	b0 e4       	ldi	r27, 0x40	; 64
    1d56:	8d ab       	std	Y+53, r24	; 0x35
    1d58:	9e ab       	std	Y+54, r25	; 0x36
    1d5a:	af ab       	std	Y+55, r26	; 0x37
    1d5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d60:	7e a9       	ldd	r23, Y+54	; 0x36
    1d62:	8f a9       	ldd	r24, Y+55	; 0x37
    1d64:	98 ad       	ldd	r25, Y+56	; 0x38
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a e7       	ldi	r20, 0x7A	; 122
    1d6c:	55 e4       	ldi	r21, 0x45	; 69
    1d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	89 ab       	std	Y+49, r24	; 0x31
    1d78:	9a ab       	std	Y+50, r25	; 0x32
    1d7a:	ab ab       	std	Y+51, r26	; 0x33
    1d7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d80:	7a a9       	ldd	r23, Y+50	; 0x32
    1d82:	8b a9       	ldd	r24, Y+51	; 0x33
    1d84:	9c a9       	ldd	r25, Y+52	; 0x34
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <SevenSegmentBCD_voidWriteNumber+0x9fe>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <SevenSegmentBCD_voidWriteNumber+0xa7c>
	else if (__tmp > 65535)
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	4c f5       	brge	.+82     	; 0x1e0a <SevenSegmentBCD_voidWriteNumber+0xa68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dba:	7e a9       	ldd	r23, Y+54	; 0x36
    1dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	98 ab       	std	Y+48, r25	; 0x30
    1dde:	8f a7       	std	Y+47, r24	; 0x2f
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <SevenSegmentBCD_voidWriteNumber+0xa5e>
    1de2:	80 e9       	ldi	r24, 0x90	; 144
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
    1dea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <SevenSegmentBCD_voidWriteNumber+0xa4c>
    1df2:	9e a7       	std	Y+46, r25	; 0x2e
    1df4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	98 ab       	std	Y+48, r25	; 0x30
    1dfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e02:	98 a9       	ldd	r25, Y+48	; 0x30
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <SevenSegmentBCD_voidWriteNumber+0xa40>
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <SevenSegmentBCD_voidWriteNumber+0xa90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	98 ab       	std	Y+48, r25	; 0x30
    1e1c:	8f a7       	std	Y+47, r24	; 0x2f
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
    1e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <SevenSegmentBCD_voidWriteNumber+0xa88>
    1e2e:	9c a7       	std	Y+44, r25	; 0x2c
    1e30:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);
		BCD_To_7Segment((copy_u16Number % 10), SECOND_SEVEN_SEGMENT);
    1e32:	fe 01       	movw	r30, r28
    1e34:	e3 57       	subi	r30, 0x73	; 115
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	2a e0       	ldi	r18, 0x0A	; 10
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	b9 01       	movw	r22, r18
    1e42:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1e46:	62 e0       	ldi	r22, 0x02	; 2
    1e48:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
		copy_u16Number /= 10;
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	03 57       	subi	r16, 0x73	; 115
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e3 57       	subi	r30, 0x73	; 115
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	2a e0       	ldi	r18, 0x0A	; 10
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1e66:	cb 01       	movw	r24, r22
    1e68:	f8 01       	movw	r30, r16
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 ea       	ldi	r26, 0xA0	; 160
    1e74:	b0 e4       	ldi	r27, 0x40	; 64
    1e76:	8f a3       	std	Y+39, r24	; 0x27
    1e78:	98 a7       	std	Y+40, r25	; 0x28
    1e7a:	a9 a7       	std	Y+41, r26	; 0x29
    1e7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e80:	78 a5       	ldd	r23, Y+40	; 0x28
    1e82:	89 a5       	ldd	r24, Y+41	; 0x29
    1e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	55 e4       	ldi	r21, 0x45	; 69
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8b a3       	std	Y+35, r24	; 0x23
    1e98:	9c a3       	std	Y+36, r25	; 0x24
    1e9a:	ad a3       	std	Y+37, r26	; 0x25
    1e9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <SevenSegmentBCD_voidWriteNumber+0xb1e>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a a3       	std	Y+34, r25	; 0x22
    1ebc:	89 a3       	std	Y+33, r24	; 0x21
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <SevenSegmentBCD_voidWriteNumber+0xb9c>
	else if (__tmp > 65535)
    1ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <SevenSegmentBCD_voidWriteNumber+0xb88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eda:	78 a5       	ldd	r23, Y+40	; 0x28
    1edc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <SevenSegmentBCD_voidWriteNumber+0xb7e>
    1f02:	80 e9       	ldi	r24, 0x90	; 144
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
    1f0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <SevenSegmentBCD_voidWriteNumber+0xb6c>
    1f12:	98 a3       	std	Y+32, r25	; 0x20
    1f14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	89 a1       	ldd	r24, Y+33	; 0x21
    1f18:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9a a3       	std	Y+34, r25	; 0x22
    1f1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	89 a1       	ldd	r24, Y+33	; 0x21
    1f22:	9a a1       	ldd	r25, Y+34	; 0x22
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <SevenSegmentBCD_voidWriteNumber+0xb60>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <SevenSegmentBCD_voidWriteNumber+0xbb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f30:	9e a1       	ldd	r25, Y+38	; 0x26
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
    1f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f40:	9a a1       	ldd	r25, Y+34	; 0x22
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d
    1f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <SevenSegmentBCD_voidWriteNumber+0xba8>
    1f4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f50:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		BCD_To_7Segment((copy_u16Number % 10), THIRD_SEVEN_SEGMENT);
    1f52:	fe 01       	movw	r30, r28
    1f54:	e3 57       	subi	r30, 0x73	; 115
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	2a e0       	ldi	r18, 0x0A	; 10
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	b9 01       	movw	r22, r18
    1f62:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    1f66:	63 e0       	ldi	r22, 0x03	; 3
    1f68:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 ea       	ldi	r26, 0xA0	; 160
    1f72:	b0 e4       	ldi	r27, 0x40	; 64
    1f74:	89 8f       	std	Y+25, r24	; 0x19
    1f76:	9a 8f       	std	Y+26, r25	; 0x1a
    1f78:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a e7       	ldi	r20, 0x7A	; 122
    1f8a:	55 e4       	ldi	r21, 0x45	; 69
    1f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8d 8b       	std	Y+21, r24	; 0x15
    1f96:	9e 8b       	std	Y+22, r25	; 0x16
    1f98:	af 8b       	std	Y+23, r26	; 0x17
    1f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <SevenSegmentBCD_voidWriteNumber+0xc1c>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <SevenSegmentBCD_voidWriteNumber+0xc9a>
	else if (__tmp > 65535)
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <SevenSegmentBCD_voidWriteNumber+0xc86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <SevenSegmentBCD_voidWriteNumber+0xc7c>
    2000:	80 e9       	ldi	r24, 0x90	; 144
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	9a 8b       	std	Y+18, r25	; 0x12
    2006:	89 8b       	std	Y+17, r24	; 0x11
    2008:	89 89       	ldd	r24, Y+17	; 0x11
    200a:	9a 89       	ldd	r25, Y+18	; 0x12
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <SevenSegmentBCD_voidWriteNumber+0xc6a>
    2010:	9a 8b       	std	Y+18, r25	; 0x12
    2012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8b 89       	ldd	r24, Y+19	; 0x13
    2016:	9c 89       	ldd	r25, Y+20	; 0x14
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <SevenSegmentBCD_voidWriteNumber+0xc5e>
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <SevenSegmentBCD_voidWriteNumber+0xcae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	6d 89       	ldd	r22, Y+21	; 0x15
    202a:	7e 89       	ldd	r23, Y+22	; 0x16
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	98 8b       	std	Y+16, r25	; 0x10
    2042:	8f 87       	std	Y+15, r24	; 0x0f
    2044:	8f 85       	ldd	r24, Y+15	; 0x0f
    2046:	98 89       	ldd	r25, Y+16	; 0x10
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <SevenSegmentBCD_voidWriteNumber+0xca6>
    204c:	98 8b       	std	Y+16, r25	; 0x10
    204e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		BCD_To_7Segment((copy_u16Number / 10), FOURTH_SEVEN_SEGMENT);
    2050:	fe 01       	movw	r30, r28
    2052:	e3 57       	subi	r30, 0x73	; 115
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	2a e0       	ldi	r18, 0x0A	; 10
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	b9 01       	movw	r22, r18
    2060:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    2064:	cb 01       	movw	r24, r22
    2066:	64 e0       	ldi	r22, 0x04	; 4
    2068:	0e 94 b4 10 	call	0x2168	; 0x2168 <BCD_To_7Segment>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 ea       	ldi	r26, 0xA0	; 160
    2072:	b0 e4       	ldi	r27, 0x40	; 64
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	ad 87       	std	Y+13, r26	; 0x0d
    207a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8f 83       	std	Y+7, r24	; 0x07
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	a9 87       	std	Y+9, r26	; 0x09
    209a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <SevenSegmentBCD_voidWriteNumber+0xd1c>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <SevenSegmentBCD_voidWriteNumber+0xd9a>
	else if (__tmp > 65535)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <SevenSegmentBCD_voidWriteNumber+0xd86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <SevenSegmentBCD_voidWriteNumber+0xd7c>
    2100:	80 e9       	ldi	r24, 0x90	; 144
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <SevenSegmentBCD_voidWriteNumber+0xd6a>
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <SevenSegmentBCD_voidWriteNumber+0xd5e>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <SevenSegmentBCD_voidWriteNumber+0xdae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <SevenSegmentBCD_voidWriteNumber+0xda6>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
	}
}
    2150:	c2 57       	subi	r28, 0x72	; 114
    2152:	df 4f       	sbci	r29, 0xFF	; 255
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <BCD_To_7Segment>:




void BCD_To_7Segment(u8 copy_u8Number, u8 copy_u8Display)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	00 d0       	rcall	.+0      	; 0x216e <BCD_To_7Segment+0x6>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8Display == FIRST_SEVEN_SEGMENT)
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	09 f0       	breq	.+2      	; 0x217e <BCD_To_7Segment+0x16>
    217c:	53 c0       	rjmp	.+166    	; 0x2224 <BCD_To_7Segment+0xbc>
	{
		DIO_voidSetPinValue(ENABLE_PORT1, FIRST_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_LOW);		// Enable SS1
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	63 e0       	ldi	r22, 0x03	; 3
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		/* Disable the others */
		DIO_voidSetPinValue(ENABLE_PORT1, SECOND_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_HIGH); 		// Disable SS2
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	62 e0       	ldi	r22, 0x02	; 2
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT2, THIRD_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_HIGH);		// Disable SS3
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	65 e0       	ldi	r22, 0x05	; 5
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT2, FOURTH_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_HIGH);		// Disable SS4
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	66 e0       	ldi	r22, 0x06	; 6
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>


		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D0, GET_BIT(Numbers[copy_u8Number], 0));
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	fc 01       	movw	r30, r24
    21ae:	e8 59       	subi	r30, 0x98	; 152
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	98 2f       	mov	r25, r24
    21b6:	91 70       	andi	r25, 0x01	; 1
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	49 2f       	mov	r20, r25
    21be:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D1, GET_BIT(Numbers[copy_u8Number], 1));
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	fc 01       	movw	r30, r24
    21ca:	e8 59       	subi	r30, 0x98	; 152
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	86 95       	lsr	r24
    21d2:	98 2f       	mov	r25, r24
    21d4:	91 70       	andi	r25, 0x01	; 1
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	49 2f       	mov	r20, r25
    21dc:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D2, GET_BIT(Numbers[copy_u8Number], 2));
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	fc 01       	movw	r30, r24
    21e8:	e8 59       	subi	r30, 0x98	; 152
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	86 95       	lsr	r24
    21f0:	86 95       	lsr	r24
    21f2:	98 2f       	mov	r25, r24
    21f4:	91 70       	andi	r25, 0x01	; 1
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	62 e0       	ldi	r22, 0x02	; 2
    21fa:	49 2f       	mov	r20, r25
    21fc:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D3, GET_BIT(Numbers[copy_u8Number], 3));
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	fc 01       	movw	r30, r24
    2208:	e8 59       	subi	r30, 0x98	; 152
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	86 95       	lsr	r24
    2210:	86 95       	lsr	r24
    2212:	86 95       	lsr	r24
    2214:	98 2f       	mov	r25, r24
    2216:	91 70       	andi	r25, 0x01	; 1
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	64 e0       	ldi	r22, 0x04	; 4
    221c:	49 2f       	mov	r20, r25
    221e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
    2222:	04 c1       	rjmp	.+520    	; 0x242c <BCD_To_7Segment+0x2c4>
	}

	else if (copy_u8Display == SECOND_SEVEN_SEGMENT)
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	82 30       	cpi	r24, 0x02	; 2
    2228:	09 f0       	breq	.+2      	; 0x222c <BCD_To_7Segment+0xc4>
    222a:	53 c0       	rjmp	.+166    	; 0x22d2 <BCD_To_7Segment+0x16a>
	{
		DIO_voidSetPinValue(ENABLE_PORT1, FIRST_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_HIGH);		// Enable SS1
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	63 e0       	ldi	r22, 0x03	; 3
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT1, SECOND_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_LOW); 		// Enable SS2
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	62 e0       	ldi	r22, 0x02	; 2
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		/* Disable the others */
		DIO_voidSetPinValue(ENABLE_PORT2, THIRD_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_HIGH);		// Disable SS3
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT2, FOURTH_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_HIGH);		// Disable SS4
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	66 e0       	ldi	r22, 0x06	; 6
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>


		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D0, GET_BIT(Numbers[copy_u8Number], 0));
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	fc 01       	movw	r30, r24
    225c:	e8 59       	subi	r30, 0x98	; 152
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	98 2f       	mov	r25, r24
    2264:	91 70       	andi	r25, 0x01	; 1
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	49 2f       	mov	r20, r25
    226c:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D1, GET_BIT(Numbers[copy_u8Number], 1));
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	fc 01       	movw	r30, r24
    2278:	e8 59       	subi	r30, 0x98	; 152
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	86 95       	lsr	r24
    2280:	98 2f       	mov	r25, r24
    2282:	91 70       	andi	r25, 0x01	; 1
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	49 2f       	mov	r20, r25
    228a:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D2, GET_BIT(Numbers[copy_u8Number], 2));
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	fc 01       	movw	r30, r24
    2296:	e8 59       	subi	r30, 0x98	; 152
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	86 95       	lsr	r24
    229e:	86 95       	lsr	r24
    22a0:	98 2f       	mov	r25, r24
    22a2:	91 70       	andi	r25, 0x01	; 1
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	49 2f       	mov	r20, r25
    22aa:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D3, GET_BIT(Numbers[copy_u8Number], 3));
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	fc 01       	movw	r30, r24
    22b6:	e8 59       	subi	r30, 0x98	; 152
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	86 95       	lsr	r24
    22be:	86 95       	lsr	r24
    22c0:	86 95       	lsr	r24
    22c2:	98 2f       	mov	r25, r24
    22c4:	91 70       	andi	r25, 0x01	; 1
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	64 e0       	ldi	r22, 0x04	; 4
    22ca:	49 2f       	mov	r20, r25
    22cc:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
    22d0:	ad c0       	rjmp	.+346    	; 0x242c <BCD_To_7Segment+0x2c4>
	}

	else if (copy_u8Display == THIRD_SEVEN_SEGMENT)
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	83 30       	cpi	r24, 0x03	; 3
    22d6:	09 f0       	breq	.+2      	; 0x22da <BCD_To_7Segment+0x172>
    22d8:	53 c0       	rjmp	.+166    	; 0x2380 <BCD_To_7Segment+0x218>
	{
		DIO_voidSetPinValue(ENABLE_PORT1, FIRST_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_HIGH); 	// Enable SS1
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	63 e0       	ldi	r22, 0x03	; 3
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT1, SECOND_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_HIGH);		// Enable SS2
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	62 e0       	ldi	r22, 0x02	; 2
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT2, THIRD_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_LOW);		// Enable SS3
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	65 e0       	ldi	r22, 0x05	; 5
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		/* Disable the others */
		DIO_voidSetPinValue(ENABLE_PORT2, FOURTH_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_HIGH);		// Disable SS4
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	66 e0       	ldi	r22, 0x06	; 6
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>

		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D0, GET_BIT(Numbers[copy_u8Number], 0));
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	fc 01       	movw	r30, r24
    230a:	e8 59       	subi	r30, 0x98	; 152
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	98 2f       	mov	r25, r24
    2312:	91 70       	andi	r25, 0x01	; 1
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	49 2f       	mov	r20, r25
    231a:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D1, GET_BIT(Numbers[copy_u8Number], 1));
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	fc 01       	movw	r30, r24
    2326:	e8 59       	subi	r30, 0x98	; 152
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	86 95       	lsr	r24
    232e:	98 2f       	mov	r25, r24
    2330:	91 70       	andi	r25, 0x01	; 1
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	49 2f       	mov	r20, r25
    2338:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D2, GET_BIT(Numbers[copy_u8Number], 2));
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fc 01       	movw	r30, r24
    2344:	e8 59       	subi	r30, 0x98	; 152
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	86 95       	lsr	r24
    234c:	86 95       	lsr	r24
    234e:	98 2f       	mov	r25, r24
    2350:	91 70       	andi	r25, 0x01	; 1
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	49 2f       	mov	r20, r25
    2358:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D3, GET_BIT(Numbers[copy_u8Number], 3));
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	fc 01       	movw	r30, r24
    2364:	e8 59       	subi	r30, 0x98	; 152
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	86 95       	lsr	r24
    236c:	86 95       	lsr	r24
    236e:	86 95       	lsr	r24
    2370:	98 2f       	mov	r25, r24
    2372:	91 70       	andi	r25, 0x01	; 1
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	64 e0       	ldi	r22, 0x04	; 4
    2378:	49 2f       	mov	r20, r25
    237a:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
    237e:	56 c0       	rjmp	.+172    	; 0x242c <BCD_To_7Segment+0x2c4>
	}

	else if (copy_u8Display == FOURTH_SEVEN_SEGMENT)
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	09 f0       	breq	.+2      	; 0x2388 <BCD_To_7Segment+0x220>
    2386:	52 c0       	rjmp	.+164    	; 0x242c <BCD_To_7Segment+0x2c4>
	{
		DIO_voidSetPinValue(ENABLE_PORT1, FIRST_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_HIGH); 	// Enable SS1
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	63 e0       	ldi	r22, 0x03	; 3
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT1, SECOND_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_HIGH);		// Enable SS2
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	62 e0       	ldi	r22, 0x02	; 2
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT2, THIRD_SEVEN_SEGMENT_ENABLE_PIN , DIO_u8PIN_HIGH);		// Enable SS3
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	65 e0       	ldi	r22, 0x05	; 5
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(ENABLE_PORT2, FOURTH_SEVEN_SEGMENT_ENABLE_PIN, DIO_u8PIN_LOW);		// Enable SS4
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	66 e0       	ldi	r22, 0x06	; 6
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>


		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D0, GET_BIT(Numbers[copy_u8Number], 0));
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	fc 01       	movw	r30, r24
    23b8:	e8 59       	subi	r30, 0x98	; 152
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	98 2f       	mov	r25, r24
    23c0:	91 70       	andi	r25, 0x01	; 1
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	49 2f       	mov	r20, r25
    23c8:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D1, GET_BIT(Numbers[copy_u8Number], 1));
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	e8 59       	subi	r30, 0x98	; 152
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	86 95       	lsr	r24
    23dc:	98 2f       	mov	r25, r24
    23de:	91 70       	andi	r25, 0x01	; 1
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	49 2f       	mov	r20, r25
    23e6:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D2, GET_BIT(Numbers[copy_u8Number], 2));
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	fc 01       	movw	r30, r24
    23f2:	e8 59       	subi	r30, 0x98	; 152
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	86 95       	lsr	r24
    23fa:	86 95       	lsr	r24
    23fc:	98 2f       	mov	r25, r24
    23fe:	91 70       	andi	r25, 0x01	; 1
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	49 2f       	mov	r20, r25
    2406:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(BCD_PORT, BCD_PIN_D3, GET_BIT(Numbers[copy_u8Number], 3));
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	fc 01       	movw	r30, r24
    2412:	e8 59       	subi	r30, 0x98	; 152
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	86 95       	lsr	r24
    241a:	86 95       	lsr	r24
    241c:	86 95       	lsr	r24
    241e:	98 2f       	mov	r25, r24
    2420:	91 70       	andi	r25, 0x01	; 1
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	64 e0       	ldi	r22, 0x04	; 4
    2426:	49 2f       	mov	r20, r25
    2428:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_voidSetPinValue>
	}
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <main>:
#include "util/delay.h"



int main()
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	#if		MAIN_APP == SSD9999
			Display9999Number();
    243e:	0e 94 26 12 	call	0x244c	; 0x244c <Display9999Number>
	#else
	#endif



	return 0;
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <Display9999Number>:
#include "../SSD_driver/STD_TYPES.h"
#include "../SSD_driver/SEVEN_SEGMENT_interface.h"


void Display9999Number(void)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <Display9999Number+0x6>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <Display9999Number+0x8>
    2454:	00 d0       	rcall	.+0      	; 0x2456 <Display9999Number+0xa>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	SevenSegment_voidInit();
    245a:	0e 94 8e 09 	call	0x131c	; 0x131c <SevenSegment_voidInit>
	while(1)
	{
		//SevenSegmentBCD_voidWriteNumber(1234);
		//_delay_ms(200);

		for(u16 i = 0; i < 10000; i++)
    245e:	1e 82       	std	Y+6, r1	; 0x06
    2460:	1d 82       	std	Y+5, r1	; 0x05
    2462:	11 c0       	rjmp	.+34     	; 0x2486 <Display9999Number+0x3a>
		{
			for(u8 j = 0 ; j < 5 ; j++ )	// this is a delay = 10 iterations * 20ms >>>> 200ms
    2464:	1c 82       	std	Y+4, r1	; 0x04
    2466:	07 c0       	rjmp	.+14     	; 0x2476 <Display9999Number+0x2a>
			{
				SevenSegmentBCD_voidWriteNumber(i);	// don't use _delay_ms(200); it brokes down the processor
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <SevenSegmentBCD_voidWriteNumber>
		//SevenSegmentBCD_voidWriteNumber(1234);
		//_delay_ms(200);

		for(u16 i = 0; i < 10000; i++)
		{
			for(u8 j = 0 ; j < 5 ; j++ )	// this is a delay = 10 iterations * 20ms >>>> 200ms
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	8c 83       	std	Y+4, r24	; 0x04
    2476:	8c 81       	ldd	r24, Y+4	; 0x04
    2478:	85 30       	cpi	r24, 0x05	; 5
    247a:	b0 f3       	brcs	.-20     	; 0x2468 <Display9999Number+0x1c>
	while(1)
	{
		//SevenSegmentBCD_voidWriteNumber(1234);
		//_delay_ms(200);

		for(u16 i = 0; i < 10000; i++)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	27 e2       	ldi	r18, 0x27	; 39
    248c:	80 31       	cpi	r24, 0x10	; 16
    248e:	92 07       	cpc	r25, r18
    2490:	48 f3       	brcs	.-46     	; 0x2464 <Display9999Number+0x18>
			{
				SevenSegmentBCD_voidWriteNumber(i);	// don't use _delay_ms(200); it brokes down the processor
			}
		}

		for(u16 i = 10000; i >= 0; i++)
    2492:	80 e1       	ldi	r24, 0x10	; 16
    2494:	97 e2       	ldi	r25, 0x27	; 39
    2496:	9b 83       	std	Y+3, r25	; 0x03
    2498:	8a 83       	std	Y+2, r24	; 0x02
		{
			for(u8 j = 0 ; j < 5 ; j++ )	// this is a delay = 10 iterations * 20ms >>>> 200ms
    249a:	19 82       	std	Y+1, r1	; 0x01
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <Display9999Number+0x60>
			{
				SevenSegmentBCD_voidWriteNumber(i);	// don't use _delay_ms(200); it brokes down the processor
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <SevenSegmentBCD_voidWriteNumber>
			}
		}

		for(u16 i = 10000; i >= 0; i++)
		{
			for(u8 j = 0 ; j < 5 ; j++ )	// this is a delay = 10 iterations * 20ms >>>> 200ms
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	85 30       	cpi	r24, 0x05	; 5
    24b0:	b0 f3       	brcs	.-20     	; 0x249e <Display9999Number+0x52>
			{
				SevenSegmentBCD_voidWriteNumber(i);	// don't use _delay_ms(200); it brokes down the processor
			}
		}

		for(u16 i = 10000; i >= 0; i++)
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	9b 81       	ldd	r25, Y+3	; 0x03
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	9b 83       	std	Y+3, r25	; 0x03
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	ee cf       	rjmp	.-36     	; 0x249a <Display9999Number+0x4e>

000024be <__udivmodhi4>:
    24be:	aa 1b       	sub	r26, r26
    24c0:	bb 1b       	sub	r27, r27
    24c2:	51 e1       	ldi	r21, 0x11	; 17
    24c4:	07 c0       	rjmp	.+14     	; 0x24d4 <__udivmodhi4_ep>

000024c6 <__udivmodhi4_loop>:
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	a6 17       	cp	r26, r22
    24cc:	b7 07       	cpc	r27, r23
    24ce:	10 f0       	brcs	.+4      	; 0x24d4 <__udivmodhi4_ep>
    24d0:	a6 1b       	sub	r26, r22
    24d2:	b7 0b       	sbc	r27, r23

000024d4 <__udivmodhi4_ep>:
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	5a 95       	dec	r21
    24da:	a9 f7       	brne	.-22     	; 0x24c6 <__udivmodhi4_loop>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	08 95       	ret

000024e6 <__prologue_saves__>:
    24e6:	2f 92       	push	r2
    24e8:	3f 92       	push	r3
    24ea:	4f 92       	push	r4
    24ec:	5f 92       	push	r5
    24ee:	6f 92       	push	r6
    24f0:	7f 92       	push	r7
    24f2:	8f 92       	push	r8
    24f4:	9f 92       	push	r9
    24f6:	af 92       	push	r10
    24f8:	bf 92       	push	r11
    24fa:	cf 92       	push	r12
    24fc:	df 92       	push	r13
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	ca 1b       	sub	r28, r26
    2510:	db 0b       	sbc	r29, r27
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	09 94       	ijmp

0000251e <__epilogue_restores__>:
    251e:	2a 88       	ldd	r2, Y+18	; 0x12
    2520:	39 88       	ldd	r3, Y+17	; 0x11
    2522:	48 88       	ldd	r4, Y+16	; 0x10
    2524:	5f 84       	ldd	r5, Y+15	; 0x0f
    2526:	6e 84       	ldd	r6, Y+14	; 0x0e
    2528:	7d 84       	ldd	r7, Y+13	; 0x0d
    252a:	8c 84       	ldd	r8, Y+12	; 0x0c
    252c:	9b 84       	ldd	r9, Y+11	; 0x0b
    252e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2530:	b9 84       	ldd	r11, Y+9	; 0x09
    2532:	c8 84       	ldd	r12, Y+8	; 0x08
    2534:	df 80       	ldd	r13, Y+7	; 0x07
    2536:	ee 80       	ldd	r14, Y+6	; 0x06
    2538:	fd 80       	ldd	r15, Y+5	; 0x05
    253a:	0c 81       	ldd	r16, Y+4	; 0x04
    253c:	1b 81       	ldd	r17, Y+3	; 0x03
    253e:	aa 81       	ldd	r26, Y+2	; 0x02
    2540:	b9 81       	ldd	r27, Y+1	; 0x01
    2542:	ce 0f       	add	r28, r30
    2544:	d1 1d       	adc	r29, r1
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	ed 01       	movw	r28, r26
    2552:	08 95       	ret

00002554 <_exit>:
    2554:	f8 94       	cli

00002556 <__stop_program>:
    2556:	ff cf       	rjmp	.-2      	; 0x2556 <__stop_program>
