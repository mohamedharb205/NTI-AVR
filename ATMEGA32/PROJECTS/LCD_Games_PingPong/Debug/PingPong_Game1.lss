
PingPong_Game1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000411a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e2  00800060  0000411a  000041ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800242  00800242  00004390  2**0
                  ALLOC
  3 .stab         00003360  00000000  00000000  00004390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7d  00000000  00000000  000076f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000866d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000880d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000089fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000ae09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d358  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000d518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 20 	call	0x4014	; 0x4014 <main>
      8a:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ee       	ldi	r22, 0xE0	; 224
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 51       	subi	r30, 0x18	; 24
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidSetPinDirection>:
		/*		- Copy_u8Port: The port to set the pin direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*		- Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*		- Copy_u8Direction: The desired direction (DIO_u8PIN_OUTPUT or DIO_u8PIN_INPUT).							*/
		/********************************************************************************************************************/
		void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
		{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	08 f0       	brcs	.+2      	; 0xe1a <DIO_voidSetPinDirection+0x22>
     e18:	ee c0       	rjmp	.+476    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <DIO_voidSetPinDirection+0x2a>
     e20:	ea c0       	rjmp	.+468    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
			{
				if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	09 f0       	breq	.+2      	; 0xe2a <DIO_voidSetPinDirection+0x32>
     e28:	6f c0       	rjmp	.+222    	; 0xf08 <DIO_voidSetPinDirection+0x110>
				{
					switch(Copy_u8Port)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	3f 83       	std	Y+7, r19	; 0x07
     e32:	2e 83       	std	Y+6, r18	; 0x06
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	91 05       	cpc	r25, r1
     e3c:	49 f1       	breq	.+82     	; 0xe90 <DIO_voidSetPinDirection+0x98>
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	3f 81       	ldd	r19, Y+7	; 0x07
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	2c f4       	brge	.+10     	; 0xe52 <DIO_voidSetPinDirection+0x5a>
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	61 f0       	breq	.+24     	; 0xe68 <DIO_voidSetPinDirection+0x70>
     e50:	d2 c0       	rjmp	.+420    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     e52:	2e 81       	ldd	r18, Y+6	; 0x06
     e54:	3f 81       	ldd	r19, Y+7	; 0x07
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	71 f1       	breq	.+92     	; 0xeb8 <DIO_voidSetPinDirection+0xc0>
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	91 05       	cpc	r25, r1
     e64:	e9 f1       	breq	.+122    	; 0xee0 <DIO_voidSetPinDirection+0xe8>
     e66:	c7 c0       	rjmp	.+398    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(DDRA , Copy_u8Pin); 	break;
     e68:	aa e3       	ldi	r26, 0x3A	; 58
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_voidSetPinDirection+0x8e>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_voidSetPinDirection+0x8a>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	b3 c0       	rjmp	.+358    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  SET_BIT(DDRB , Copy_u8Pin); 	break;
     e90:	a7 e3       	ldi	r26, 0x37	; 55
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e7 e3       	ldi	r30, 0x37	; 55
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinDirection+0xb6>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinDirection+0xb2>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	9f c0       	rjmp	.+318    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  SET_BIT(DDRC , Copy_u8Pin); 	break;
     eb8:	a4 e3       	ldi	r26, 0x34	; 52
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e4 e3       	ldi	r30, 0x34	; 52
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinDirection+0xde>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinDirection+0xda>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	8b c0       	rjmp	.+278    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  SET_BIT(DDRD , Copy_u8Pin); 	break;
     ee0:	a1 e3       	ldi	r26, 0x31	; 49
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_voidSetPinDirection+0x106>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_voidSetPinDirection+0x102>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	77 c0       	rjmp	.+238    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						default       :  								break;
					}
				}
				else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <DIO_voidSetPinDirection+0x118>
     f0e:	73 c0       	rjmp	.+230    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
				{
					switch(Copy_u8Port)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	59 f1       	breq	.+86     	; 0xf7a <DIO_voidSetPinDirection+0x182>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	2c f4       	brge	.+10     	; 0xf38 <DIO_voidSetPinDirection+0x140>
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f0       	breq	.+26     	; 0xf50 <DIO_voidSetPinDirection+0x158>
     f36:	5f c0       	rjmp	.+190    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	89 f1       	breq	.+98     	; 0xfa4 <DIO_voidSetPinDirection+0x1ac>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <DIO_voidSetPinDirection+0x156>
     f4c:	40 c0       	rjmp	.+128    	; 0xfce <DIO_voidSetPinDirection+0x1d6>
     f4e:	53 c0       	rjmp	.+166    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(DDRA , Copy_u8Pin); 	break;
     f50:	aa e3       	ldi	r26, 0x3A	; 58
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ea e3       	ldi	r30, 0x3A	; 58
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_voidSetPinDirection+0x176>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_voidSetPinDirection+0x172>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	3e c0       	rjmp	.+124    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(DDRB , Copy_u8Pin); 	break;
     f7a:	a7 e3       	ldi	r26, 0x37	; 55
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e3       	ldi	r30, 0x37	; 55
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_voidSetPinDirection+0x1a0>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_voidSetPinDirection+0x19c>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	29 c0       	rjmp	.+82     	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(DDRC , Copy_u8Pin); 	break;
     fa4:	a4 e3       	ldi	r26, 0x34	; 52
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e4 e3       	ldi	r30, 0x34	; 52
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinDirection+0x1ca>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinDirection+0x1c6>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(DDRD , Copy_u8Pin); 	break;
     fce:	a1 e3       	ldi	r26, 0x31	; 49
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e3       	ldi	r30, 0x31	; 49
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_voidSetPinDirection+0x1f4>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_voidSetPinDirection+0x1f0>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
						default       :  								break;
					}
				}
			}
		}
     ff6:	27 96       	adiw	r28, 0x07	; 7
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_voidSetPortDirection>:
		/*   Parameters:																								*/
		/*        - Copy_u8Port: The port to set the direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).*/
		/*        - Copy_u8Direction: The desired direction (DIO_PORT_OUTPUT or DIO_PORT_INPUT).						*/
		/****************************************************************************************************************/
		void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
		{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_voidSetPortDirection+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_voidSetPortDirection+0x8>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	90 f5       	brcc	.+100    	; 0x1082 <DIO_voidSetPortDirection+0x7a>
			{
				switch(Copy_u8Port)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3c 83       	std	Y+4, r19	; 0x04
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	d1 f0       	breq	.+52     	; 0x1066 <DIO_voidSetPortDirection+0x5e>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	2c f4       	brge	.+10     	; 0x1046 <DIO_voidSetPortDirection+0x3e>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	61 f0       	breq	.+24     	; 0x105c <DIO_voidSetPortDirection+0x54>
    1044:	1e c0       	rjmp	.+60     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
    1046:	2b 81       	ldd	r18, Y+3	; 0x03
    1048:	3c 81       	ldd	r19, Y+4	; 0x04
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	81 f0       	breq	.+32     	; 0x1070 <DIO_voidSetPortDirection+0x68>
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	81 f0       	breq	.+32     	; 0x107a <DIO_voidSetPortDirection+0x72>
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
				{
					case DIO_u8PORTA:  DDRA = Copy_u8Direction; 		break;
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
    1064:	0e c0       	rjmp	.+28     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTB:  DDRB = Copy_u8Direction; 		break;
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTC:  DDRC = Copy_u8Direction; 		break;
    1070:	e4 e3       	ldi	r30, 0x34	; 52
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 83       	st	Z, r24
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTD:  DDRD = Copy_u8Direction; 		break;
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	80 83       	st	Z, r24
					default       :  									break;
				}
			}
		}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_voidSetPinValue>:
		/*        - Copy_u8Port: The port to set the pin value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).		*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*        - Copy_u8PinValue: The desired value (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).										*/
		/************************************************************************************************************************/
		void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
		{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	27 97       	sbiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02
    10a8:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <DIO_voidSetPinValue+0x22>
    10b0:	ee c0       	rjmp	.+476    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <DIO_voidSetPinValue+0x2a>
    10b8:	ea c0       	rjmp	.+468    	; 0x128e <DIO_voidSetPinValue+0x1fe>
			{
				if(Copy_u8PinValue == DIO_u8PIN_HIGH)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <DIO_voidSetPinValue+0x32>
    10c0:	6f c0       	rjmp	.+222    	; 0x11a0 <DIO_voidSetPinValue+0x110>
				{
					switch(Copy_u8Port)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3f 83       	std	Y+7, r19	; 0x07
    10ca:	2e 83       	std	Y+6, r18	; 0x06
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	49 f1       	breq	.+82     	; 0x1128 <DIO_voidSetPinValue+0x98>
    10d6:	2e 81       	ldd	r18, Y+6	; 0x06
    10d8:	3f 81       	ldd	r19, Y+7	; 0x07
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <DIO_voidSetPinValue+0x5a>
    10e0:	8e 81       	ldd	r24, Y+6	; 0x06
    10e2:	9f 81       	ldd	r25, Y+7	; 0x07
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <DIO_voidSetPinValue+0x70>
    10e8:	d2 c0       	rjmp	.+420    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    10ea:	2e 81       	ldd	r18, Y+6	; 0x06
    10ec:	3f 81       	ldd	r19, Y+7	; 0x07
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f1       	breq	.+92     	; 0x1150 <DIO_voidSetPinValue+0xc0>
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	e9 f1       	breq	.+122    	; 0x1178 <DIO_voidSetPinValue+0xe8>
    10fe:	c7 c0       	rjmp	.+398    	; 0x128e <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(PORTA , Copy_u8Pin); 	break;
    1100:	ab e3       	ldi	r26, 0x3B	; 59
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_voidSetPinValue+0x8e>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_voidSetPinValue+0x8a>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	b3 c0       	rjmp	.+358    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  SET_BIT(PORTB , Copy_u8Pin); 	break;
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_voidSetPinValue+0xb6>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_voidSetPinValue+0xb2>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	9f c0       	rjmp	.+318    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  SET_BIT(PORTC , Copy_u8Pin); 	break;
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_voidSetPinValue+0xde>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_voidSetPinValue+0xda>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	8b c0       	rjmp	.+278    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  SET_BIT(PORTD , Copy_u8Pin); 	break;
    1178:	a2 e3       	ldi	r26, 0x32	; 50
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_voidSetPinValue+0x106>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_voidSetPinValue+0x102>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	77 c0       	rjmp	.+238    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						default       	:  									break;
					}
				}
				else if(Copy_u8PinValue == DIO_u8PIN_LOW)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 23       	and	r24, r24
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <DIO_voidSetPinValue+0x118>
    11a6:	73 c0       	rjmp	.+230    	; 0x128e <DIO_voidSetPinValue+0x1fe>
				{
					switch(Copy_u8Port)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	59 f1       	breq	.+86     	; 0x1212 <DIO_voidSetPinValue+0x182>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <DIO_voidSetPinValue+0x140>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f0       	breq	.+26     	; 0x11e8 <DIO_voidSetPinValue+0x158>
    11ce:	5f c0       	rjmp	.+190    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	89 f1       	breq	.+98     	; 0x123c <DIO_voidSetPinValue+0x1ac>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_voidSetPinValue+0x156>
    11e4:	40 c0       	rjmp	.+128    	; 0x1266 <DIO_voidSetPinValue+0x1d6>
    11e6:	53 c0       	rjmp	.+166    	; 0x128e <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(PORTA , Copy_u8Pin); 	break;
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	eb e3       	ldi	r30, 0x3B	; 59
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_voidSetPinValue+0x176>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_voidSetPinValue+0x172>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	3e c0       	rjmp	.+124    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(PORTB , Copy_u8Pin); 	break;
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_voidSetPinValue+0x1a0>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_voidSetPinValue+0x19c>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	29 c0       	rjmp	.+82     	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(PORTC , Copy_u8Pin); 	break;
    123c:	a5 e3       	ldi	r26, 0x35	; 53
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_voidSetPinValue+0x1ca>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_voidSetPinValue+0x1c6>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	14 c0       	rjmp	.+40     	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(PORTD , Copy_u8Pin); 	break;
    1266:	a2 e3       	ldi	r26, 0x32	; 50
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_voidSetPinValue+0x1f4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_voidSetPinValue+0x1f0>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
						default       	:  									break;
					}
				}
			}
		}
    128e:	27 96       	adiw	r28, 0x07	; 7
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_voidSetPortValue>:
		/*    Parameters:																								*/
		/*        - Copy_u8Port: The port to set the value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8PortVALUE: The desired value (DIO_u8PORT_HIGH or DIO_u8PORT_LOW).							*/
		/****************************************************************************************************************/
		void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8PortValue)
		{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_voidSetPortValue+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_voidSetPortValue+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	90 f5       	brcc	.+100    	; 0x131a <DIO_voidSetPortValue+0x7a>
			{
				switch(Copy_u8Port)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <DIO_voidSetPortValue+0x5e>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <DIO_voidSetPortValue+0x3e>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <DIO_voidSetPortValue+0x54>
    12dc:	1e c0       	rjmp	.+60     	; 0x131a <DIO_voidSetPortValue+0x7a>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <DIO_voidSetPortValue+0x68>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <DIO_voidSetPortValue+0x72>
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <DIO_voidSetPortValue+0x7a>
				{
					case DIO_u8PORTA:  	PORTA = Copy_u8PortValue; 		break;
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	0e c0       	rjmp	.+28     	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTB:  	PORTB = Copy_u8PortValue; 		break;
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	09 c0       	rjmp	.+18     	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTC:  	PORTC = Copy_u8PortValue; 		break;
    1308:	e5 e3       	ldi	r30, 0x35	; 53
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	04 c0       	rjmp	.+8      	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTD:  	PORTD = Copy_u8PortValue; 		break;
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
					default       	: 									break;
				}
			}
		}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO_u8GetPinValue>:
		/*        - Copy_u8Port: The port to read the pin value from (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.														*/
		/*    Returns: The value of the pin (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).												*/
		/********************************************************************************************************************/
		u8 	 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_u8GetPinValue+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_u8GetPinValue+0x8>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_u8GetPinValue+0xa>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	6b 83       	std	Y+3, r22	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	08 f0       	brcs	.+2      	; 0x1342 <DIO_u8GetPinValue+0x1a>
    1340:	6e c0       	rjmp	.+220    	; 0x141e <DIO_u8GetPinValue+0xf6>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO_u8GetPinValue+0x22>
    1348:	6a c0       	rjmp	.+212    	; 0x141e <DIO_u8GetPinValue+0xf6>
			{
				u8 Local_u8PinValue;

				switch(Copy_u8Port)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	4d 81       	ldd	r20, Y+5	; 0x05
    1356:	5e 81       	ldd	r21, Y+6	; 0x06
    1358:	41 30       	cpi	r20, 0x01	; 1
    135a:	51 05       	cpc	r21, r1
    135c:	41 f1       	breq	.+80     	; 0x13ae <DIO_u8GetPinValue+0x86>
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	91 05       	cpc	r25, r1
    1366:	34 f4       	brge	.+12     	; 0x1374 <DIO_u8GetPinValue+0x4c>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	21 15       	cp	r18, r1
    136e:	31 05       	cpc	r19, r1
    1370:	61 f0       	breq	.+24     	; 0x138a <DIO_u8GetPinValue+0x62>
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <DIO_u8GetPinValue+0xf0>
    1374:	4d 81       	ldd	r20, Y+5	; 0x05
    1376:	5e 81       	ldd	r21, Y+6	; 0x06
    1378:	42 30       	cpi	r20, 0x02	; 2
    137a:	51 05       	cpc	r21, r1
    137c:	51 f1       	breq	.+84     	; 0x13d2 <DIO_u8GetPinValue+0xaa>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	b9 f1       	breq	.+110    	; 0x13f6 <DIO_u8GetPinValue+0xce>
    1388:	47 c0       	rjmp	.+142    	; 0x1418 <DIO_u8GetPinValue+0xf0>
				{
					case DIO_u8PORTA: 	Local_u8PinValue = GET_BIT(PINA , Copy_u8Pin); 		break;
    138a:	e9 e3       	ldi	r30, 0x39	; 57
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0x7a>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0x76>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	35 c0       	rjmp	.+106    	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTB: 	Local_u8PinValue = GET_BIT(PINB , Copy_u8Pin); 		break;
    13ae:	e6 e3       	ldi	r30, 0x36	; 54
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinValue+0x9e>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinValue+0x9a>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	23 c0       	rjmp	.+70     	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTC: 	Local_u8PinValue = GET_BIT(PINC , Copy_u8Pin); 		break;
    13d2:	e3 e3       	ldi	r30, 0x33	; 51
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinValue+0xc2>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinValue+0xbe>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	11 c0       	rjmp	.+34     	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTD: 	Local_u8PinValue = GET_BIT(PIND , Copy_u8Pin); 		break;
    13f6:	e0 e3       	ldi	r30, 0x30	; 48
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8GetPinValue+0xe6>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8GetPinValue+0xe2>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
					default      	: 														break;
				}

				return Local_u8PinValue;
    1418:	59 81       	ldd	r21, Y+1	; 0x01
    141a:	5c 83       	std	Y+4, r21	; 0x04
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8GetPinValue+0xfa>
			}

			else
			{
				return	-1;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	8c 83       	std	Y+4, r24	; 0x04
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
			}
		}
    1424:	26 96       	adiw	r28, 0x06	; 6
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_voidTogglePin>:
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pin to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) to be toggled.																	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePin(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_voidTogglePin+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_voidTogglePin+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	08 f0       	brcs	.+2      	; 0x144e <DIO_voidTogglePin+0x18>
    144c:	72 c0       	rjmp	.+228    	; 0x1532 <DIO_voidTogglePin+0xfc>
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	88 30       	cpi	r24, 0x08	; 8
    1452:	08 f0       	brcs	.+2      	; 0x1456 <DIO_voidTogglePin+0x20>
    1454:	6e c0       	rjmp	.+220    	; 0x1532 <DIO_voidTogglePin+0xfc>
			{
				switch (Copy_u8Port)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	49 f1       	breq	.+82     	; 0x14bc <DIO_voidTogglePin+0x86>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_voidTogglePin+0x48>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <DIO_voidTogglePin+0x5e>
    147c:	5a c0       	rjmp	.+180    	; 0x1532 <DIO_voidTogglePin+0xfc>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	71 f1       	breq	.+92     	; 0x14e4 <DIO_voidTogglePin+0xae>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	e9 f1       	breq	.+122    	; 0x150c <DIO_voidTogglePin+0xd6>
    1492:	4f c0       	rjmp	.+158    	; 0x1532 <DIO_voidTogglePin+0xfc>
				{
					case DIO_u8PORTA : 	TOG_BIT(PORTA , Copy_u8Pin); 		break ;
    1494:	ab e3       	ldi	r26, 0x3B	; 59
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_voidTogglePin+0x7c>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_voidTogglePin+0x78>
    14b6:	84 27       	eor	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	3b c0       	rjmp	.+118    	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTB : 	TOG_BIT(PORTB , Copy_u8Pin); 		break ;
    14bc:	a8 e3       	ldi	r26, 0x38	; 56
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e3       	ldi	r30, 0x38	; 56
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_voidTogglePin+0xa4>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_voidTogglePin+0xa0>
    14de:	84 27       	eor	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTC : 	TOG_BIT(PORTC , Copy_u8Pin); 		break ;
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_voidTogglePin+0xcc>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_voidTogglePin+0xc8>
    1506:	84 27       	eor	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTD :	TOG_BIT(PORTD , Copy_u8Pin); 		break ;
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_voidTogglePin+0xf4>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_voidTogglePin+0xf0>
    152e:	84 27       	eor	r24, r20
    1530:	8c 93       	st	X, r24
					default 	   	 : 							 			break ;
				}
			}
		}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <DIO_voidTogglePort>:
		/*    Description: Toggles the values of the entire port.																	*/
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pins to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePort(u8 Copy_u8Port)
		{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_voidTogglePort+0x6>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	08 f0       	brcs	.+2      	; 0x1556 <DIO_voidTogglePort+0x16>
    1554:	3e c0       	rjmp	.+124    	; 0x15d2 <DIO_voidTogglePort+0x92>
			{
				switch (Copy_u8Port)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3b 83       	std	Y+3, r19	; 0x03
    155e:	2a 83       	std	Y+2, r18	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	e9 f0       	breq	.+58     	; 0x15a4 <DIO_voidTogglePort+0x64>
    156a:	2a 81       	ldd	r18, Y+2	; 0x02
    156c:	3b 81       	ldd	r19, Y+3	; 0x03
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	2c f4       	brge	.+10     	; 0x157e <DIO_voidTogglePort+0x3e>
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	61 f0       	breq	.+24     	; 0x1594 <DIO_voidTogglePort+0x54>
    157c:	2a c0       	rjmp	.+84     	; 0x15d2 <DIO_voidTogglePort+0x92>
    157e:	2a 81       	ldd	r18, Y+2	; 0x02
    1580:	3b 81       	ldd	r19, Y+3	; 0x03
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	b1 f0       	breq	.+44     	; 0x15b4 <DIO_voidTogglePort+0x74>
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	9b 81       	ldd	r25, Y+3	; 0x03
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	c9 f0       	breq	.+50     	; 0x15c4 <DIO_voidTogglePort+0x84>
    1592:	1f c0       	rjmp	.+62     	; 0x15d2 <DIO_voidTogglePort+0x92>
				{
					case DIO_u8PORTA : 	TOG_REG(PORTA , DIO_u8PORT_HIGH); 		break ;
    1594:	ab e3       	ldi	r26, 0x3B	; 59
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e3       	ldi	r30, 0x3B	; 59
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 95       	com	r24
    15a0:	8c 93       	st	X, r24
    15a2:	17 c0       	rjmp	.+46     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTB : 	TOG_REG(PORTB , DIO_u8PORT_HIGH); 		break ;
    15a4:	a8 e3       	ldi	r26, 0x38	; 56
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 e3       	ldi	r30, 0x38	; 56
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 95       	com	r24
    15b0:	8c 93       	st	X, r24
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTC : 	TOG_REG(PORTC , DIO_u8PORT_HIGH); 		break ;
    15b4:	a5 e3       	ldi	r26, 0x35	; 53
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 95       	com	r24
    15c0:	8c 93       	st	X, r24
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTD :	TOG_REG(PORTD , DIO_u8PORT_HIGH); 		break ;
    15c4:	a2 e3       	ldi	r26, 0x32	; 50
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 95       	com	r24
    15d0:	8c 93       	st	X, r24
					default 	     :	 										break ;
				}
			}
		}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <LCD_voidInit>:



/* Functions Initialization */
void LCD_voidInit()
{
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	c6 54       	subi	r28, 0x46	; 70
    15ec:	d0 40       	sbci	r29, 0x00	; 0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
	/* PINS Directions Configuration */
	SET_voidLCDPinsDirection();
    15f8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SET_voidLCDPinsDirection>
    15fc:	fe 01       	movw	r30, r28
    15fe:	ed 5b       	subi	r30, 0xBD	; 189
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a8 ec       	ldi	r26, 0xC8	; 200
    1608:	b2 e4       	ldi	r27, 0x42	; 66
    160a:	80 83       	st	Z, r24
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	a2 83       	std	Z+2, r26	; 0x02
    1610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	8e 01       	movw	r16, r28
    1614:	01 5c       	subi	r16, 0xC1	; 193
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	fe 01       	movw	r30, r28
    161a:	ed 5b       	subi	r30, 0xBD	; 189
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a ef       	ldi	r20, 0xFA	; 250
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	f8 01       	movw	r30, r16
    1638:	80 83       	st	Z, r24
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	a2 83       	std	Z+2, r26	; 0x02
    163e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1640:	fe 01       	movw	r30, r28
    1642:	ff 96       	adiw	r30, 0x3f	; 63
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <LCD_voidInit+0x88>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e af       	std	Y+62, r25	; 0x3e
    1662:	8d af       	std	Y+61, r24	; 0x3d
    1664:	46 c0       	rjmp	.+140    	; 0x16f2 <LCD_voidInit+0x114>
	else if (__tmp > 65535)
    1666:	fe 01       	movw	r30, r28
    1668:	ff 96       	adiw	r30, 0x3f	; 63
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	64 f5       	brge	.+88     	; 0x16da <LCD_voidInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	fe 01       	movw	r30, r28
    1684:	ed 5b       	subi	r30, 0xBD	; 189
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e af       	std	Y+62, r25	; 0x3e
    16ae:	8d af       	std	Y+61, r24	; 0x3d
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <LCD_voidInit+0xf2>
    16b2:	88 ec       	ldi	r24, 0xC8	; 200
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c af       	std	Y+60, r25	; 0x3c
    16b8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    16bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCD_voidInit+0xe0>
    16c2:	9c af       	std	Y+60, r25	; 0x3c
    16c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e af       	std	Y+62, r25	; 0x3e
    16ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <LCD_voidInit+0xd4>
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <LCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	fe 01       	movw	r30, r28
    16dc:	ff 96       	adiw	r30, 0x3f	; 63
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
    16f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f6:	9a af       	std	Y+58, r25	; 0x3a
    16f8:	89 af       	std	Y+57, r24	; 0x39
    16fa:	89 ad       	ldd	r24, Y+57	; 0x39
    16fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <LCD_voidInit+0x120>
    1702:	9a af       	std	Y+58, r25	; 0x3a
    1704:	89 af       	std	Y+57, r24	; 0x39
	#if		CONNECTION_MODE == LCD_FOUR_BIT_MODE	// 4 Bits Mode
			// Wait for more than 30 ms
			_delay_ms(100);

			// Function Set
			Send_voidCommand(FUNCTION_SET1);	// Data length = 4 , N = 2 lines , F = 5*7
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(FUNCTION_SET2);
    170c:	80 e2       	ldi	r24, 0x20	; 32
    170e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(FUNCTION_SET3);
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e8       	ldi	r26, 0x80	; 128
    171e:	bf e3       	ldi	r27, 0x3F	; 63
    1720:	8d ab       	std	Y+53, r24	; 0x35
    1722:	9e ab       	std	Y+54, r25	; 0x36
    1724:	af ab       	std	Y+55, r26	; 0x37
    1726:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	6d a9       	ldd	r22, Y+53	; 0x35
    172a:	7e a9       	ldd	r23, Y+54	; 0x36
    172c:	8f a9       	ldd	r24, Y+55	; 0x37
    172e:	98 ad       	ldd	r25, Y+56	; 0x38
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a ef       	ldi	r20, 0xFA	; 250
    1736:	54 e4       	ldi	r21, 0x44	; 68
    1738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	89 ab       	std	Y+49, r24	; 0x31
    1742:	9a ab       	std	Y+50, r25	; 0x32
    1744:	ab ab       	std	Y+51, r26	; 0x33
    1746:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1748:	69 a9       	ldd	r22, Y+49	; 0x31
    174a:	7a a9       	ldd	r23, Y+50	; 0x32
    174c:	8b a9       	ldd	r24, Y+51	; 0x33
    174e:	9c a9       	ldd	r25, Y+52	; 0x34
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	2c f4       	brge	.+10     	; 0x176a <LCD_voidInit+0x18c>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	98 ab       	std	Y+48, r25	; 0x30
    1766:	8f a7       	std	Y+47, r24	; 0x2f
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <LCD_voidInit+0x20a>
	else if (__tmp > 65535)
    176a:	69 a9       	ldd	r22, Y+49	; 0x31
    176c:	7a a9       	ldd	r23, Y+50	; 0x32
    176e:	8b a9       	ldd	r24, Y+51	; 0x33
    1770:	9c a9       	ldd	r25, Y+52	; 0x34
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	4c f5       	brge	.+82     	; 0x17d4 <LCD_voidInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	6d a9       	ldd	r22, Y+53	; 0x35
    1784:	7e a9       	ldd	r23, Y+54	; 0x36
    1786:	8f a9       	ldd	r24, Y+55	; 0x37
    1788:	98 ad       	ldd	r25, Y+56	; 0x38
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_voidInit+0x1ec>
    17ac:	88 ec       	ldi	r24, 0xC8	; 200
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e a7       	std	Y+46, r25	; 0x2e
    17b2:	8d a7       	std	Y+45, r24	; 0x2d
    17b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_voidInit+0x1da>
    17bc:	9e a7       	std	Y+46, r25	; 0x2e
    17be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c2:	98 a9       	ldd	r25, Y+48	; 0x30
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	98 ab       	std	Y+48, r25	; 0x30
    17c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    17cc:	98 a9       	ldd	r25, Y+48	; 0x30
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <LCD_voidInit+0x1ce>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <LCD_voidInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	69 a9       	ldd	r22, Y+49	; 0x31
    17d6:	7a a9       	ldd	r23, Y+50	; 0x32
    17d8:	8b a9       	ldd	r24, Y+51	; 0x33
    17da:	9c a9       	ldd	r25, Y+52	; 0x34
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	98 ab       	std	Y+48, r25	; 0x30
    17e6:	8f a7       	std	Y+47, r24	; 0x2f
    17e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ea:	98 a9       	ldd	r25, Y+48	; 0x30
    17ec:	9c a7       	std	Y+44, r25	; 0x2c
    17ee:	8b a7       	std	Y+43, r24	; 0x2b
    17f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_voidInit+0x216>
    17f8:	9c a7       	std	Y+44, r25	; 0x2c
    17fa:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);	// delay > 39 micro sec

			// Display ON/OFF Control
			Send_voidCommand(DISPLAY_ON_OFF_CONTROL1);	// Display = ON , Cursor = OFF , Blink = OFF
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(DISPLAY_ON_OFF_CONTROL2);
    1802:	80 ec       	ldi	r24, 0xC0	; 192
    1804:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e8       	ldi	r26, 0x80	; 128
    180e:	bf e3       	ldi	r27, 0x3F	; 63
    1810:	8f a3       	std	Y+39, r24	; 0x27
    1812:	98 a7       	std	Y+40, r25	; 0x28
    1814:	a9 a7       	std	Y+41, r26	; 0x29
    1816:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a ef       	ldi	r20, 0xFA	; 250
    1826:	54 e4       	ldi	r21, 0x44	; 68
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8b a3       	std	Y+35, r24	; 0x23
    1832:	9c a3       	std	Y+36, r25	; 0x24
    1834:	ad a3       	std	Y+37, r26	; 0x25
    1836:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1838:	6b a1       	ldd	r22, Y+35	; 0x23
    183a:	7c a1       	ldd	r23, Y+36	; 0x24
    183c:	8d a1       	ldd	r24, Y+37	; 0x25
    183e:	9e a1       	ldd	r25, Y+38	; 0x26
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	2c f4       	brge	.+10     	; 0x185a <LCD_voidInit+0x27c>
		__ticks = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    185a:	6b a1       	ldd	r22, Y+35	; 0x23
    185c:	7c a1       	ldd	r23, Y+36	; 0x24
    185e:	8d a1       	ldd	r24, Y+37	; 0x25
    1860:	9e a1       	ldd	r25, Y+38	; 0x26
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	4c f5       	brge	.+82     	; 0x18c4 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	6f a1       	ldd	r22, Y+39	; 0x27
    1874:	78 a5       	ldd	r23, Y+40	; 0x28
    1876:	89 a5       	ldd	r24, Y+41	; 0x29
    1878:	9a a5       	ldd	r25, Y+42	; 0x2a
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9a a3       	std	Y+34, r25	; 0x22
    1898:	89 a3       	std	Y+33, r24	; 0x21
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <LCD_voidInit+0x2dc>
    189c:	88 ec       	ldi	r24, 0xC8	; 200
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	98 a3       	std	Y+32, r25	; 0x20
    18a2:	8f 8f       	std	Y+31, r24	; 0x1f
    18a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a6:	98 a1       	ldd	r25, Y+32	; 0x20
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_voidInit+0x2ca>
    18ac:	98 a3       	std	Y+32, r25	; 0x20
    18ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	9a a3       	std	Y+34, r25	; 0x22
    18b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	89 a1       	ldd	r24, Y+33	; 0x21
    18bc:	9a a1       	ldd	r25, Y+34	; 0x22
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f7       	brne	.-38     	; 0x189c <LCD_voidInit+0x2be>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <LCD_voidInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9a a3       	std	Y+34, r25	; 0x22
    18d6:	89 a3       	std	Y+33, r24	; 0x21
    18d8:	89 a1       	ldd	r24, Y+33	; 0x21
    18da:	9a a1       	ldd	r25, Y+34	; 0x22
    18dc:	9e 8f       	std	Y+30, r25	; 0x1e
    18de:	8d 8f       	std	Y+29, r24	; 0x1d
    18e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_voidInit+0x306>
    18e8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ea:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);	// delay > 39 micro sec

			// Display Clear
			Send_voidCommand(DISPLAY_CLEAR1);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(DISPLAY_CLEAR2);
    18f2:	80 e1       	ldi	r24, 0x10	; 16
    18f4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e4       	ldi	r27, 0x40	; 64
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	9a 8f       	std	Y+26, r25	; 0x1a
    1904:	ab 8f       	std	Y+27, r26	; 0x1b
    1906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_voidInit+0x36c>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_voidInit+0x3cc>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_voidInit+0x3ba>
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_voidInit+0x3ae>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	98 89       	ldd	r25, Y+16	; 0x10
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_voidInit+0x3f6>
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);	// delay > 1.53 ms

			// Entry Mode Set
			Send_voidCommand(ENTRY_MODE_SET1); // I/D: increase (write from left to right) = 1 , SH: No Shift = 0
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(ENTRY_MODE_SET2);
    19e2:	80 e6       	ldi	r24, 0x60	; 96
    19e4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(0b00000110); // I/D: increase (write from left to right) = 1 , SH: No Shift = 0
	#else
		#error	"INVALID MODE !!!"
	#endif

	Is_Init_Finished = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 42 02 	sts	0x0242, r24
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e4       	ldi	r27, 0x40	; 64
    19f6:	8b 87       	std	Y+11, r24	; 0x0b
    19f8:	9c 87       	std	Y+12, r25	; 0x0c
    19fa:	ad 87       	std	Y+13, r26	; 0x0d
    19fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8f 83       	std	Y+7, r24	; 0x07
    1a18:	98 87       	std	Y+8, r25	; 0x08
    1a1a:	a9 87       	std	Y+9, r26	; 0x09
    1a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <LCD_voidInit+0x462>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <LCD_voidInit+0x4e0>
	else if (__tmp > 65535)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <LCD_voidInit+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_voidInit+0x4c2>
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_voidInit+0x4b0>
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_voidInit+0x4a4>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <LCD_voidInit+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_voidInit+0x4ec>
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	// delay > 1.53 ms
}
    1ad2:	ca 5b       	subi	r28, 0xBA	; 186
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret

00001aea <SET_voidLCDPinsDirection>:



void SET_voidLCDPinsDirection()
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	// Set Ditrections of 4 bits mode
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, DIO_u8PIN_OUTPUT);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, DIO_u8PIN_OUTPUT);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, DIO_u8PIN_OUTPUT);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, DIO_u8PIN_OUTPUT);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	// set direction of Control Pins
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_OUTPUT);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	62 e0       	ldi	r22, 0x02	; 2
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_OUTPUT);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>

	// Set LCD PORT direction for simulation
	//DIO_voidSetPortDirection(LCD_PORT, DIO_PORT_OUTPUT);
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <Send_voidEnablePulse>:

void Send_voidEnablePulse()
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_HIGH);	// Set Enable
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <Send_voidEnablePulse+0x70>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <Send_voidEnablePulse+0xee>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <Send_voidEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <Send_voidEnablePulse+0xd0>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <Send_voidEnablePulse+0xbe>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <Send_voidEnablePulse+0xb2>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <Send_voidEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <Send_voidEnablePulse+0xfa>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	// delay more than 50 mico seconds
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_LOW);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	//_delay_ms(2);
}
    1c40:	2e 96       	adiw	r28, 0x0e	; 14
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <Send_voidCommand>:

void Send_voidCommand(u8 Copy_u8Command)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	// 1-Set RS pin low for command
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_LOW);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	63 e0       	ldi	r22, 0x03	; 3
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	#if 	READ_OPERATION_STATUS == LCD_ENABLED
			DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_u8PIN_LOW);	// connected to ground to be set write all the time
	#endif

	#if 	CONNECTION_MODE == LCD_FOUR_BIT_MODE
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN4));		// error .... Remember that GET_BIT not DIO_GetPinValue
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	82 95       	swap	r24
    1c6c:	8f 70       	andi	r24, 0x0F	; 15
    1c6e:	98 2f       	mov	r25, r24
    1c70:	91 70       	andi	r25, 0x01	; 1
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	49 2f       	mov	r20, r25
    1c78:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN5));
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	82 95       	swap	r24
    1c80:	86 95       	lsr	r24
    1c82:	87 70       	andi	r24, 0x07	; 7
    1c84:	98 2f       	mov	r25, r24
    1c86:	91 70       	andi	r25, 0x01	; 1
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	49 2f       	mov	r20, r25
    1c8e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN6));
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	82 95       	swap	r24
    1c96:	86 95       	lsr	r24
    1c98:	86 95       	lsr	r24
    1c9a:	83 70       	andi	r24, 0x03	; 3
    1c9c:	98 2f       	mov	r25, r24
    1c9e:	91 70       	andi	r25, 0x01	; 1
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	49 2f       	mov	r20, r25
    1ca6:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN7));
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	98 2f       	mov	r25, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	99 27       	eor	r25, r25
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	64 e0       	ldi	r22, 0x04	; 4
    1cb8:	49 2f       	mov	r20, r25
    1cba:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1cbe:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>

			if(Is_Init_Finished)
    1cc2:	80 91 42 02 	lds	r24, 0x0242
    1cc6:	88 23       	and	r24, r24
    1cc8:	41 f1       	breq	.+80     	; 0x1d1a <Send_voidCommand+0xc8>
			{
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN0));
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	98 2f       	mov	r25, r24
    1cce:	91 70       	andi	r25, 0x01	; 1
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	49 2f       	mov	r20, r25
    1cd6:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN1));
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	86 95       	lsr	r24
    1cde:	98 2f       	mov	r25, r24
    1ce0:	91 70       	andi	r25, 0x01	; 1
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	49 2f       	mov	r20, r25
    1ce8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN2));
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	91 70       	andi	r25, 0x01	; 1
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	62 e0       	ldi	r22, 0x02	; 2
    1cfa:	49 2f       	mov	r20, r25
    1cfc:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN3));
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	86 95       	lsr	r24
    1d04:	86 95       	lsr	r24
    1d06:	86 95       	lsr	r24
    1d08:	98 2f       	mov	r25, r24
    1d0a:	91 70       	andi	r25, 0x01	; 1
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	49 2f       	mov	r20, r25
    1d12:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				Send_voidEnablePulse();
    1d16:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>
	#else
		#error	"Invalid MODE to Send Command !!!"
	#endif

	//_delay_ms(2);
}
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <Send_voidData>:

void Send_voidData(u8 copy_u8Data)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	// 1-Set RS pin HIGH for data
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_HIGH);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	63 e0       	ldi	r22, 0x03	; 3
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	#if 	READ_OPERATION_STATUS == LCD_ENABLED
			DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_PIN_LOW);	// connected to ground to be set write all the time
	#endif

	#if		CONNECTION_MODE == LCD_FOUR_BIT_MODE
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Data,DIO_u8PIN4));
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	82 95       	swap	r24
    1d3c:	8f 70       	andi	r24, 0x0F	; 15
    1d3e:	98 2f       	mov	r25, r24
    1d40:	91 70       	andi	r25, 0x01	; 1
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	49 2f       	mov	r20, r25
    1d48:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Data,DIO_u8PIN5));
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	82 95       	swap	r24
    1d50:	86 95       	lsr	r24
    1d52:	87 70       	andi	r24, 0x07	; 7
    1d54:	98 2f       	mov	r25, r24
    1d56:	91 70       	andi	r25, 0x01	; 1
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	49 2f       	mov	r20, r25
    1d5e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Data,DIO_u8PIN6));
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	82 95       	swap	r24
    1d66:	86 95       	lsr	r24
    1d68:	86 95       	lsr	r24
    1d6a:	83 70       	andi	r24, 0x03	; 3
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	91 70       	andi	r25, 0x01	; 1
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	49 2f       	mov	r20, r25
    1d76:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Data,DIO_u8PIN7));
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	99 27       	eor	r25, r25
    1d82:	99 1f       	adc	r25, r25
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	64 e0       	ldi	r22, 0x04	; 4
    1d88:	49 2f       	mov	r20, r25
    1d8a:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1d8e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>

			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Data,DIO_u8PIN0));
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	98 2f       	mov	r25, r24
    1d96:	91 70       	andi	r25, 0x01	; 1
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	49 2f       	mov	r20, r25
    1d9e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Data,DIO_u8PIN1));
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	86 95       	lsr	r24
    1da6:	98 2f       	mov	r25, r24
    1da8:	91 70       	andi	r25, 0x01	; 1
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	49 2f       	mov	r20, r25
    1db0:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Data,DIO_u8PIN2));
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	86 95       	lsr	r24
    1db8:	86 95       	lsr	r24
    1dba:	98 2f       	mov	r25, r24
    1dbc:	91 70       	andi	r25, 0x01	; 1
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	49 2f       	mov	r20, r25
    1dc4:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Data,DIO_u8PIN3));
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	86 95       	lsr	r24
    1dcc:	86 95       	lsr	r24
    1dce:	86 95       	lsr	r24
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	49 2f       	mov	r20, r25
    1dda:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1dde:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>
	#else
		#error	"Invalid MODE to Write Data !!!"
	#endif

	//_delay_ms(2);
}
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_voidClear>:




void LCD_voidClear()
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	Send_voidCommand(DISPLAY_CLEAR);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_voidClearLine>:

void LCD_voidClearLine(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LCD_voidClearLine+0x6>
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 Local_u8Counter = copy_u8Xpos; Local_u8Counter < 20; Local_u8Counter++)
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <LCD_voidClearLine+0x26>
	{
		LCD_voidWriteCharacterAtXY('\0' , copy_u8Ypos , Local_u8Counter);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	6a 81       	ldd	r22, Y+2	; 0x02
    1e18:	49 81       	ldd	r20, Y+1	; 0x01
    1e1a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	Send_voidCommand(DISPLAY_CLEAR);
}

void LCD_voidClearLine(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
	for(u8 Local_u8Counter = copy_u8Xpos; Local_u8Counter < 20; Local_u8Counter++)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	84 31       	cpi	r24, 0x14	; 20
    1e28:	a8 f3       	brcs	.-22     	; 0x1e14 <LCD_voidClearLine+0x16>
	{
		LCD_voidWriteCharacterAtXY('\0' , copy_u8Ypos , Local_u8Counter);
	}
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_voidWriteCharacter>:




void LCD_voidWriteCharacter(u8 copy_u8Character)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	89 83       	std	Y+1, r24	; 0x01
	Send_voidData(copy_u8Character);
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
}
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <LCD_voidWriteCharacterAtXY>:

void LCD_voidWriteCharacterAtXY(u8 copy_u8Character, u8 copy_u8YPos , u8 copy_u8XPos)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <LCD_voidWriteCharacterAtXY+0x6>
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	6a 83       	std	Y+2, r22	; 0x02
    1e60:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	6b 81       	ldd	r22, Y+3	; 0x03
    1e66:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteCharacter(copy_u8Character);
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <LCD_voidWriteString>:



void LCD_voidWriteString(u8* copy_pu8String)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <LCD_voidWriteString+0x6>
    1e82:	0f 92       	push	r0
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	9b 83       	std	Y+3, r25	; 0x03
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	0e c0       	rjmp	.+28     	; 0x1eac <LCD_voidWriteString+0x30>
	while(copy_pu8String[Local_u8Counter] != '\0')
	{
		Send_voidData(copy_pu8String[Local_u8Counter]);
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	e2 0f       	add	r30, r18
    1e9e:	f3 1f       	adc	r31, r19
    1ea0:	80 81       	ld	r24, Z
    1ea2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
		Local_u8Counter++;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidWriteString(u8* copy_pu8String)
{
	u8 Local_u8Counter = 0;
	while(copy_pu8String[Local_u8Counter] != '\0')
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 23       	and	r24, r24
    1ec0:	39 f7       	brne	.-50     	; 0x1e90 <LCD_voidWriteString+0x14>
	{
		Send_voidData(copy_pu8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_voidWriteStringAtXY>:

void LCD_voidWriteStringAtXY(u8* copy_pu8String, u8 copy_u8YPos , u8 copy_u8XPos)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <LCD_voidWriteStringAtXY+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <LCD_voidWriteStringAtXY+0x8>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	6b 83       	std	Y+3, r22	; 0x03
    1ee0:	4c 83       	std	Y+4, r20	; 0x04
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ee6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString(copy_pu8String);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_voidGoToXY>:



void LCD_voidGoToXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	6b 97       	sbiw	r28, 0x1b	; 27
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	8a 8f       	std	Y+26, r24	; 0x1a
    1f16:	6b 8f       	std	Y+27, r22	; 0x1b
	u8 Local_u8DDRAM_Address = 0;
    1f18:	19 8e       	std	Y+25, r1	; 0x19
	//0x80, 0xC0, 0x94, 0xD4

	if(copy_u8YPos == LCD_LINE_ONE)
    1f1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1c:	88 23       	and	r24, r24
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0x80;
    1f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f22:	80 58       	subi	r24, 0x80	; 128
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_TWO)
    1f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <LCD_voidGoToXY+0x36>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0xC0;
    1f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f30:	80 54       	subi	r24, 0x40	; 64
    1f32:	89 8f       	std	Y+25, r24	; 0x19
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_THREE)
    1f36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <LCD_voidGoToXY+0x44>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0x94;
    1f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3e:	8c 56       	subi	r24, 0x6C	; 108
    1f40:	89 8f       	std	Y+25, r24	; 0x19
    1f42:	06 c0       	rjmp	.+12     	; 0x1f50 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_FOUR)
    1f44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	19 f4       	brne	.+6      	; 0x1f50 <LCD_voidGoToXY+0x50>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0xD4;
    1f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4c:	8c 52       	subi	r24, 0x2C	; 44
    1f4e:	89 8f       	std	Y+25, r24	; 0x19
	}

	SET_BIT(Local_u8DDRAM_Address , 7);				// Set bit 7 to 1
    1f50:	89 8d       	ldd	r24, Y+25	; 0x19
    1f52:	80 68       	ori	r24, 0x80	; 128
    1f54:	89 8f       	std	Y+25, r24	; 0x19
	Send_voidCommand(Local_u8DDRAM_Address);			// Go to this Address
    1f56:	89 8d       	ldd	r24, Y+25	; 0x19
    1f58:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e2       	ldi	r26, 0x20	; 32
    1f62:	b2 e4       	ldi	r27, 0x42	; 66
    1f64:	8d 8b       	std	Y+21, r24	; 0x15
    1f66:	9e 8b       	std	Y+22, r25	; 0x16
    1f68:	af 8b       	std	Y+23, r26	; 0x17
    1f6a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f70:	8f 89       	ldd	r24, Y+23	; 0x17
    1f72:	98 8d       	ldd	r25, Y+24	; 0x18
    1f74:	2b ea       	ldi	r18, 0xAB	; 171
    1f76:	3a ea       	ldi	r19, 0xAA	; 170
    1f78:	4a e2       	ldi	r20, 0x2A	; 42
    1f7a:	50 e4       	ldi	r21, 0x40	; 64
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	89 8b       	std	Y+17, r24	; 0x11
    1f86:	9a 8b       	std	Y+18, r25	; 0x12
    1f88:	ab 8b       	std	Y+19, r26	; 0x13
    1f8a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f8c:	69 89       	ldd	r22, Y+17	; 0x11
    1f8e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f90:	8b 89       	ldd	r24, Y+19	; 0x13
    1f92:	9c 89       	ldd	r25, Y+20	; 0x14
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	1c f4       	brge	.+6      	; 0x1faa <LCD_voidGoToXY+0xaa>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	88 8b       	std	Y+16, r24	; 0x10
    1fa8:	91 c0       	rjmp	.+290    	; 0x20cc <LCD_voidGoToXY+0x1cc>
	else if (__tmp > 255)
    1faa:	69 89       	ldd	r22, Y+17	; 0x11
    1fac:	7a 89       	ldd	r23, Y+18	; 0x12
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	53 e4       	ldi	r21, 0x43	; 67
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <LCD_voidGoToXY+0xc4>
    1fc2:	7b c0       	rjmp	.+246    	; 0x20ba <LCD_voidGoToXY+0x1ba>
	{
		_delay_ms(__us / 1000.0);
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8c 87       	std	Y+12, r24	; 0x0c
    1fde:	9d 87       	std	Y+13, r25	; 0x0d
    1fe0:	ae 87       	std	Y+14, r26	; 0x0e
    1fe2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fe6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fe8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	88 87       	std	Y+8, r24	; 0x08
    1ffe:	99 87       	std	Y+9, r25	; 0x09
    2000:	aa 87       	std	Y+10, r26	; 0x0a
    2002:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2004:	68 85       	ldd	r22, Y+8	; 0x08
    2006:	79 85       	ldd	r23, Y+9	; 0x09
    2008:	8a 85       	ldd	r24, Y+10	; 0x0a
    200a:	9b 85       	ldd	r25, Y+11	; 0x0b
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_voidGoToXY+0x126>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9f 83       	std	Y+7, r25	; 0x07
    2022:	8e 83       	std	Y+6, r24	; 0x06
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_voidGoToXY+0x1a4>
	else if (__tmp > 65535)
    2026:	68 85       	ldd	r22, Y+8	; 0x08
    2028:	79 85       	ldd	r23, Y+9	; 0x09
    202a:	8a 85       	ldd	r24, Y+10	; 0x0a
    202c:	9b 85       	ldd	r25, Y+11	; 0x0b
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_voidGoToXY+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2040:	7d 85       	ldd	r23, Y+13	; 0x0d
    2042:	8e 85       	ldd	r24, Y+14	; 0x0e
    2044:	9f 85       	ldd	r25, Y+15	; 0x0f
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9f 83       	std	Y+7, r25	; 0x07
    2064:	8e 83       	std	Y+6, r24	; 0x06
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_voidGoToXY+0x186>
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9d 83       	std	Y+5, r25	; 0x05
    206e:	8c 83       	std	Y+4, r24	; 0x04
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_voidGoToXY+0x174>
    2078:	9d 83       	std	Y+5, r25	; 0x05
    207a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8e 81       	ldd	r24, Y+6	; 0x06
    207e:	9f 81       	ldd	r25, Y+7	; 0x07
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9f 83       	std	Y+7, r25	; 0x07
    2084:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	9f 81       	ldd	r25, Y+7	; 0x07
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_voidGoToXY+0x168>
    208e:	24 c0       	rjmp	.+72     	; 0x20d8 <LCD_voidGoToXY+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	68 85       	ldd	r22, Y+8	; 0x08
    2092:	79 85       	ldd	r23, Y+9	; 0x09
    2094:	8a 85       	ldd	r24, Y+10	; 0x0a
    2096:	9b 85       	ldd	r25, Y+11	; 0x0b
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9f 83       	std	Y+7, r25	; 0x07
    20a2:	8e 83       	std	Y+6, r24	; 0x06
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_voidGoToXY+0x1b0>
    20b4:	9b 83       	std	Y+3, r25	; 0x03
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_voidGoToXY+0x1d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ba:	69 89       	ldd	r22, Y+17	; 0x11
    20bc:	7a 89       	ldd	r23, Y+18	; 0x12
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	88 8b       	std	Y+16, r24	; 0x10
    20cc:	88 89       	ldd	r24, Y+16	; 0x10
    20ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8a 95       	dec	r24
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_voidGoToXY+0x1d2>
    20d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
}
    20d8:	6b 96       	adiw	r28, 0x1b	; 27
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <LCD_voidWriteDecimal>:



void LCD_voidWriteDecimal(s32 copy_s32Number) {
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	60 97       	sbiw	r28, 0x10	; 16
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	6d 87       	std	Y+13, r22	; 0x0d
    2104:	7e 87       	std	Y+14, r23	; 0x0e
    2106:	8f 87       	std	Y+15, r24	; 0x0f
    2108:	98 8b       	std	Y+16, r25	; 0x10

	if (copy_s32Number < 0)
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	af 85       	ldd	r26, Y+15	; 0x0f
    2110:	b8 89       	ldd	r27, Y+16	; 0x10
    2112:	bb 23       	and	r27, r27
    2114:	94 f4       	brge	.+36     	; 0x213a <LCD_voidWriteDecimal+0x50>
	{
		Send_voidData('-'); // Display negative sign
    2116:	8d e2       	ldi	r24, 0x2D	; 45
    2118:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
		copy_s32Number = -copy_s32Number; // Convert to positive number
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	af 85       	ldd	r26, Y+15	; 0x0f
    2122:	b8 89       	ldd	r27, Y+16	; 0x10
    2124:	b0 95       	com	r27
    2126:	a0 95       	com	r26
    2128:	90 95       	com	r25
    212a:	81 95       	neg	r24
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	af 4f       	sbci	r26, 0xFF	; 255
    2130:	bf 4f       	sbci	r27, 0xFF	; 255
    2132:	8d 87       	std	Y+13, r24	; 0x0d
    2134:	9e 87       	std	Y+14, r25	; 0x0e
    2136:	af 87       	std	Y+15, r26	; 0x0f
    2138:	b8 8b       	std	Y+16, r27	; 0x10
//    {
//    	LCD_voidSendData('0');
//    	return ;
//    }

    u8 digits[10] = {0}; // Array to store up to 10 digits (maximum for s32)
    213a:	8a e0       	ldi	r24, 0x0A	; 10
    213c:	fe 01       	movw	r30, r28
    213e:	33 96       	adiw	r30, 0x03	; 3
    2140:	df 01       	movw	r26, r30
    2142:	98 2f       	mov	r25, r24
    2144:	1d 92       	st	X+, r1
    2146:	9a 95       	dec	r25
    2148:	e9 f7       	brne	.-6      	; 0x2144 <LCD_voidWriteDecimal+0x5a>
    u8 digits_No = 0;
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	2d c0       	rjmp	.+90     	; 0x21a8 <LCD_voidWriteDecimal+0xbe>

    while (copy_s32Number > 0)
    {
        digits[digits_No] = copy_s32Number % 10; // Extract the least significant digit
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	08 2f       	mov	r16, r24
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	af 85       	ldd	r26, Y+15	; 0x0f
    215a:	b8 89       	ldd	r27, Y+16	; 0x10
    215c:	2a e0       	ldi	r18, 0x0A	; 10
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 17 20 	call	0x402e	; 0x402e <__divmodsi4>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	28 2f       	mov	r18, r24
    2172:	ce 01       	movw	r24, r28
    2174:	03 96       	adiw	r24, 0x03	; 3
    2176:	fc 01       	movw	r30, r24
    2178:	e0 0f       	add	r30, r16
    217a:	f1 1f       	adc	r31, r17
    217c:	20 83       	st	Z, r18
        copy_s32Number /= 10; // Move to the next digit
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	af 85       	ldd	r26, Y+15	; 0x0f
    2184:	b8 89       	ldd	r27, Y+16	; 0x10
    2186:	2a e0       	ldi	r18, 0x0A	; 10
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 17 20 	call	0x402e	; 0x402e <__divmodsi4>
    2196:	da 01       	movw	r26, r20
    2198:	c9 01       	movw	r24, r18
    219a:	8d 87       	std	Y+13, r24	; 0x0d
    219c:	9e 87       	std	Y+14, r25	; 0x0e
    219e:	af 87       	std	Y+15, r26	; 0x0f
    21a0:	b8 8b       	std	Y+16, r27	; 0x10
        digits_No++;
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	8a 83       	std	Y+2, r24	; 0x02
//    }

    u8 digits[10] = {0}; // Array to store up to 10 digits (maximum for s32)
    u8 digits_No = 0;

    while (copy_s32Number > 0)
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	af 85       	ldd	r26, Y+15	; 0x0f
    21ae:	b8 89       	ldd	r27, Y+16	; 0x10
    21b0:	18 16       	cp	r1, r24
    21b2:	19 06       	cpc	r1, r25
    21b4:	1a 06       	cpc	r1, r26
    21b6:	1b 06       	cpc	r1, r27
    21b8:	54 f2       	brlt	.-108    	; 0x214e <LCD_voidWriteDecimal+0x64>
        digits[digits_No] = copy_s32Number % 10; // Extract the least significant digit
        copy_s32Number /= 10; // Move to the next digit
        digits_No++;
    }

    if (digits_No == 0) {
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	88 23       	and	r24, r24
    21be:	11 f4       	brne	.+4      	; 0x21c4 <LCD_voidWriteDecimal+0xda>
        digits_No = 1; // At least one digit (zero) should be displayed
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	8a 83       	std	Y+2, r24	; 0x02
    }

    for (u8 i = digits_No; i > 0; i--) {
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	12 c0       	rjmp	.+36     	; 0x21ee <LCD_voidWriteDecimal+0x104>
    	Send_voidData(digits[i - 1] + '0'); // Display the digit on LCD
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 01       	movw	r18, r24
    21d2:	21 50       	subi	r18, 0x01	; 1
    21d4:	30 40       	sbci	r19, 0x00	; 0
    21d6:	ce 01       	movw	r24, r28
    21d8:	03 96       	adiw	r24, 0x03	; 3
    21da:	fc 01       	movw	r30, r24
    21dc:	e2 0f       	add	r30, r18
    21de:	f3 1f       	adc	r31, r19
    21e0:	80 81       	ld	r24, Z
    21e2:	80 5d       	subi	r24, 0xD0	; 208
    21e4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>

    if (digits_No == 0) {
        digits_No = 1; // At least one digit (zero) should be displayed
    }

    for (u8 i = digits_No; i > 0; i--) {
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	81 50       	subi	r24, 0x01	; 1
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	88 23       	and	r24, r24
    21f2:	59 f7       	brne	.-42     	; 0x21ca <LCD_voidWriteDecimal+0xe0>
    	Send_voidData(digits[i - 1] + '0'); // Display the digit on LCD
    }
}
    21f4:	60 96       	adiw	r28, 0x10	; 16
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	08 95       	ret

0000220a <LCD_voidWriteFloat>:

void LCD_voidWriteFloat(f32 copy_f32Number)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	2d 97       	sbiw	r28, 0x0d	; 13
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	6a 87       	std	Y+10, r22	; 0x0a
    2220:	7b 87       	std	Y+11, r23	; 0x0b
    2222:	8c 87       	std	Y+12, r24	; 0x0c
    2224:	9d 87       	std	Y+13, r25	; 0x0d
    // Split the float number into its integer and fractional parts
    s32 Local_s32IntegerPart = (s32)copy_f32Number;
    2226:	6a 85       	ldd	r22, Y+10	; 0x0a
    2228:	7b 85       	ldd	r23, Y+11	; 0x0b
    222a:	8c 85       	ldd	r24, Y+12	; 0x0c
    222c:	9d 85       	ldd	r25, Y+13	; 0x0d
    222e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8e 83       	std	Y+6, r24	; 0x06
    2238:	9f 83       	std	Y+7, r25	; 0x07
    223a:	a8 87       	std	Y+8, r26	; 0x08
    223c:	b9 87       	std	Y+9, r27	; 0x09
    f32 Local_f32FractionalPart = copy_f32Number - Local_s32IntegerPart;
    223e:	6e 81       	ldd	r22, Y+6	; 0x06
    2240:	7f 81       	ldd	r23, Y+7	; 0x07
    2242:	88 85       	ldd	r24, Y+8	; 0x08
    2244:	99 85       	ldd	r25, Y+9	; 0x09
    2246:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2250:	7b 85       	ldd	r23, Y+11	; 0x0b
    2252:	8c 85       	ldd	r24, Y+12	; 0x0c
    2254:	9d 85       	ldd	r25, Y+13	; 0x0d
    2256:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	9b 83       	std	Y+3, r25	; 0x03
    2262:	ac 83       	std	Y+4, r26	; 0x04
    2264:	bd 83       	std	Y+5, r27	; 0x05

    // Write the integer part to the LCD
    LCD_voidWriteDecimal(Local_s32IntegerPart);
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	a8 85       	ldd	r26, Y+8	; 0x08
    226c:	b9 85       	ldd	r27, Y+9	; 0x09
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>

    // Write the decimal point to the LCD
    LCD_voidWriteCharacter('.');
    2276:	8e e2       	ldi	r24, 0x2E	; 46
    2278:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>

    // Write the fractional part to the LCD, multiplied by 100 to get two decimal places
    u8 Local_u8FractionalPartAsInteger = (u8)(Local_f32FractionalPart * 100);
    227c:	6a 81       	ldd	r22, Y+2	; 0x02
    227e:	7b 81       	ldd	r23, Y+3	; 0x03
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	48 ec       	ldi	r20, 0xC8	; 200
    228a:	52 e4       	ldi	r21, 0x42	; 66
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	89 83       	std	Y+1, r24	; 0x01
    LCD_voidWriteDecimal(Local_u8FractionalPartAsInteger);
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e0       	ldi	r26, 0x00	; 0
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>
}
    22b4:	2d 96       	adiw	r28, 0x0d	; 13
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <LCD_voidWriteCustomCharacter>:


void LCD_voidWriteCustomCharacter(u8 copy_u8PatternNumber, u8 copy_pu8PatternArr[], u8 copy_u8YPos, u8 copy_u8XPos)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	27 97       	sbiw	r28, 0x07	; 7
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	8b 83       	std	Y+3, r24	; 0x03
    22dc:	7d 83       	std	Y+5, r23	; 0x05
    22de:	6c 83       	std	Y+4, r22	; 0x04
    22e0:	4e 83       	std	Y+6, r20	; 0x06
    22e2:	2f 83       	std	Y+7, r18	; 0x07
	if ( copy_pu8PatternArr != NULL )
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	59 f1       	breq	.+86     	; 0x2342 <LCD_voidWriteCustomCharacter+0x7c>
	{
		u8 Local_u8CGRAM_Address = copy_u8PatternNumber * 8;
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8Counter = 0;
    2300:	19 82       	std	Y+1, r1	; 0x01

		/* Set Bit 6 & Clear Bit 7 for Setting CGRAM Address Command */
		SET_BIT(Local_u8CGRAM_Address , 6) ;
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	80 64       	ori	r24, 0x40	; 64
    2306:	8a 83       	std	Y+2, r24	; 0x02

		/* Set CGRAM Address */
		Send_voidCommand(Local_u8CGRAM_Address);
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>

		/* Write the pattern inside CGRAM */
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter ++)
    230e:	19 82       	std	Y+1, r1	; 0x01
    2310:	0e c0       	rjmp	.+28     	; 0x232e <LCD_voidWriteCustomCharacter+0x68>
		{
			Send_voidData(copy_pu8PatternArr[Local_u8Counter]);
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	9d 81       	ldd	r25, Y+5	; 0x05
    231c:	fc 01       	movw	r30, r24
    231e:	e2 0f       	add	r30, r18
    2320:	f3 1f       	adc	r31, r19
    2322:	80 81       	ld	r24, Z
    2324:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>

		/* Set CGRAM Address */
		Send_voidCommand(Local_u8CGRAM_Address);

		/* Write the pattern inside CGRAM */
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter ++)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	88 30       	cpi	r24, 0x08	; 8
    2332:	78 f3       	brcs	.-34     	; 0x2312 <LCD_voidWriteCustomCharacter+0x4c>
		{
			Send_voidData(copy_pu8PatternArr[Local_u8Counter]);
		}

		/* Set DDRAM Address */
		LCD_voidGoToXY(copy_u8YPos , copy_u8XPos);
    2334:	8e 81       	ldd	r24, Y+6	; 0x06
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>

		/* Write the corresponding pattern number to display from CGRAM */
		Send_voidData(copy_u8PatternNumber);
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
	}
}
    2342:	27 96       	adiw	r28, 0x07	; 7
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <WelcomeMessage>:
u8 Ball_Direction_Flag = 0;		// By default from right to left



void WelcomeMessage()
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	6c 97       	sbiw	r28, 0x1c	; 28
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61

	// Initialize the LCD
	LCD_voidInit();
    2368:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_voidInit>

	LCD_voidGoToXY(0,1);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("Hello Everybody");
    2374:	80 e6       	ldi	r24, 0x60	; 96
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidGoToXY(1,0);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("This is a Ping Pong");
    2384:	80 e7       	ldi	r24, 0x70	; 112
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidGoToXY(2,1);
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	61 e0       	ldi	r22, 0x01	; 1
    2390:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("Match between:");
    2394:	84 e8       	ldi	r24, 0x84	; 132
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidGoToXY(3,1);
    239c:	83 e0       	ldi	r24, 0x03	; 3
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("------------------");
    23a4:	83 e9       	ldi	r24, 0x93	; 147
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	aa e7       	ldi	r26, 0x7A	; 122
    23b2:	b4 e4       	ldi	r27, 0x44	; 68
    23b4:	89 8f       	std	Y+25, r24	; 0x19
    23b6:	9a 8f       	std	Y+26, r25	; 0x1a
    23b8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	69 8d       	ldd	r22, Y+25	; 0x19
    23be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a ef       	ldi	r20, 0xFA	; 250
    23ca:	54 e4       	ldi	r21, 0x44	; 68
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8d 8b       	std	Y+21, r24	; 0x15
    23d6:	9e 8b       	std	Y+22, r25	; 0x16
    23d8:	af 8b       	std	Y+23, r26	; 0x17
    23da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23dc:	6d 89       	ldd	r22, Y+21	; 0x15
    23de:	7e 89       	ldd	r23, Y+22	; 0x16
    23e0:	8f 89       	ldd	r24, Y+23	; 0x17
    23e2:	98 8d       	ldd	r25, Y+24	; 0x18
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f0:	88 23       	and	r24, r24
    23f2:	2c f4       	brge	.+10     	; 0x23fe <WelcomeMessage+0xaa>
		__ticks = 1;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 8b       	std	Y+20, r25	; 0x14
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	3f c0       	rjmp	.+126    	; 0x247c <WelcomeMessage+0x128>
	else if (__tmp > 65535)
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2412:	18 16       	cp	r1, r24
    2414:	4c f5       	brge	.+82     	; 0x2468 <WelcomeMessage+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	69 8d       	ldd	r22, Y+25	; 0x19
    2418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	0f c0       	rjmp	.+30     	; 0x245e <WelcomeMessage+0x10a>
    2440:	88 ec       	ldi	r24, 0xC8	; 200
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	9a 89       	ldd	r25, Y+18	; 0x12
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <WelcomeMessage+0xf8>
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	69 f7       	brne	.-38     	; 0x2440 <WelcomeMessage+0xec>
    2466:	14 c0       	rjmp	.+40     	; 0x2490 <WelcomeMessage+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f
    2484:	8f 85       	ldd	r24, Y+15	; 0x0f
    2486:	98 89       	ldd	r25, Y+16	; 0x10
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <WelcomeMessage+0x134>
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_voidClear();
    2490:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>

	LCD_voidGoToXY(0,3);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	63 e0       	ldi	r22, 0x03	; 3
    2498:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("Harb");
    249c:	86 ea       	ldi	r24, 0xA6	; 166
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidWriteCustomCharacter(3, Harb, 0, 14);
    24a4:	22 e0       	ldi	r18, 0x02	; 2
    24a6:	32 e0       	ldi	r19, 0x02	; 2
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	b9 01       	movw	r22, r18
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	2e e0       	ldi	r18, 0x0E	; 14
    24b0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidGoToXY(2,3);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	63 e0       	ldi	r22, 0x03	; 3
    24b8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("Khaled");
    24bc:	8b ea       	ldi	r24, 0xAB	; 171
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 14);
    24c4:	22 e2       	ldi	r18, 0x22	; 34
    24c6:	32 e0       	ldi	r19, 0x02	; 2
    24c8:	84 e0       	ldi	r24, 0x04	; 4
    24ca:	b9 01       	movw	r22, r18
    24cc:	42 e0       	ldi	r20, 0x02	; 2
    24ce:	2e e0       	ldi	r18, 0x0E	; 14
    24d0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e8       	ldi	r25, 0x80	; 128
    24d8:	ab eb       	ldi	r26, 0xBB	; 187
    24da:	b4 e4       	ldi	r27, 0x44	; 68
    24dc:	8b 87       	std	Y+11, r24	; 0x0b
    24de:	9c 87       	std	Y+12, r25	; 0x0c
    24e0:	ad 87       	std	Y+13, r26	; 0x0d
    24e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a ef       	ldi	r20, 0xFA	; 250
    24f2:	54 e4       	ldi	r21, 0x44	; 68
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	8f 83       	std	Y+7, r24	; 0x07
    24fe:	98 87       	std	Y+8, r25	; 0x08
    2500:	a9 87       	std	Y+9, r26	; 0x09
    2502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e8       	ldi	r20, 0x80	; 128
    2512:	5f e3       	ldi	r21, 0x3F	; 63
    2514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2518:	88 23       	and	r24, r24
    251a:	2c f4       	brge	.+10     	; 0x2526 <WelcomeMessage+0x1d2>
		__ticks = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	3f c0       	rjmp	.+126    	; 0x25a4 <WelcomeMessage+0x250>
	else if (__tmp > 65535)
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	57 e4       	ldi	r21, 0x47	; 71
    2536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	4c f5       	brge	.+82     	; 0x2590 <WelcomeMessage+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2540:	7c 85       	ldd	r23, Y+12	; 0x0c
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e2       	ldi	r20, 0x20	; 32
    254c:	51 e4       	ldi	r21, 0x41	; 65
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	0f c0       	rjmp	.+30     	; 0x2586 <WelcomeMessage+0x232>
    2568:	88 ec       	ldi	r24, 0xC8	; 200
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <WelcomeMessage+0x220>
    2578:	9c 83       	std	Y+4, r25	; 0x04
    257a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	69 f7       	brne	.-38     	; 0x2568 <WelcomeMessage+0x214>
    258e:	14 c0       	rjmp	.+40     	; 0x25b8 <WelcomeMessage+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2590:	6f 81       	ldd	r22, Y+7	; 0x07
    2592:	78 85       	ldd	r23, Y+8	; 0x08
    2594:	89 85       	ldd	r24, Y+9	; 0x09
    2596:	9a 85       	ldd	r25, Y+10	; 0x0a
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <WelcomeMessage+0x25c>
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_voidClear();
    25b8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>


}
    25bc:	6c 96       	adiw	r28, 0x1c	; 28
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <PindPong_voidInit>:
void PindPong_voidInit()
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	2e 97       	sbiw	r28, 0x0e	; 14
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
	/*Push Buttons Directions*/
	DIO_voidSetPinDirection(PING_PONG_PORT, PADDLE_1_UP 	, DIO_u8PIN_INPUT);
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PING_PONG_PORT, PADDLE_1_DOWN  	, DIO_u8PIN_INPUT);
    25ec:	82 e0       	ldi	r24, 0x02	; 2
    25ee:	61 e0       	ldi	r22, 0x01	; 1
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PING_PONG_PORT, PADDLE_2_UP 	, DIO_u8PIN_INPUT);
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	62 e0       	ldi	r22, 0x02	; 2
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PING_PONG_PORT, PADDLE_2_DOWN  	, DIO_u8PIN_INPUT);
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>

	// Display the player scores
	LCD_voidGoToXY(0,0);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("Harb: ");
    2612:	82 eb       	ldi	r24, 0xB2	; 178
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidWriteDecimal(PLAYER1_Score);
    261a:	80 91 43 02 	lds	r24, 0x0243
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>

	LCD_voidGoToXY(0, 11);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	6b e0       	ldi	r22, 0x0B	; 11
    2632:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString("Khaled: ");
    2636:	89 eb       	ldi	r24, 0xB9	; 185
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidWriteDecimal(PLAYER2_Score);
    263e:	80 91 44 02 	lds	r24, 0x0244
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e0       	ldi	r26, 0x00	; 0
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>


	DrawLeftPaddleAtXY(Paddle1_y,0);
    2652:	80 91 e8 01 	lds	r24, 0x01E8
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    265c:	80 91 e9 01 	lds	r24, 0x01E9
    2660:	63 e1       	ldi	r22, 0x13	; 19
    2662:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(1,0);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a8 ec       	ldi	r26, 0xC8	; 200
    2674:	b2 e4       	ldi	r27, 0x42	; 66
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	9c 87       	std	Y+12, r25	; 0x0c
    267a:	ad 87       	std	Y+13, r26	; 0x0d
    267c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8f 83       	std	Y+7, r24	; 0x07
    2698:	98 87       	std	Y+8, r25	; 0x08
    269a:	a9 87       	std	Y+9, r26	; 0x09
    269c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <PindPong_voidInit+0xf2>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	3f c0       	rjmp	.+126    	; 0x273e <PindPong_voidInit+0x170>
	else if (__tmp > 65535)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <PindPong_voidInit+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26da:	7c 85       	ldd	r23, Y+12	; 0x0c
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <PindPong_voidInit+0x152>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <PindPong_voidInit+0x140>
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <PindPong_voidInit+0x134>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <PindPong_voidInit+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <PindPong_voidInit+0x17c>
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	ClearXY(1,0);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
}
    275a:	2e 96       	adiw	r28, 0x0e	; 14
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <DrawBallAtXY>:

// Function to draw the ball on a specific position on the LCD
void DrawBallAtXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	00 d0       	rcall	.+0      	; 0x2772 <DrawBallAtXY+0x6>
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	6a 83       	std	Y+2, r22	; 0x02
    // Draw the ball at its new position
	LCD_voidWriteCustomCharacter(0, Ball, copy_u8YPos, copy_u8XPos);
    277a:	2a ee       	ldi	r18, 0xEA	; 234
    277c:	31 e0       	ldi	r19, 0x01	; 1
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	b9 01       	movw	r22, r18
    2782:	49 81       	ldd	r20, Y+1	; 0x01
    2784:	2a 81       	ldd	r18, Y+2	; 0x02
    2786:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <ClearXY>:

// Function to clear a specific position on the LCD
void ClearXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <ClearXY+0x6>
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	6a 83       	std	Y+2, r22	; 0x02
    // Clear the previous position
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	6a 81       	ldd	r22, Y+2	; 0x02
    27a6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteCharacter(' ');
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>
}
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <DrawLeftPaddleAtXY>:

void DrawLeftPaddleAtXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <DrawLeftPaddleAtXY+0x6>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	6a 83       	std	Y+2, r22	; 0x02
    // Draw the the left paddle at its new position
	LCD_voidWriteCustomCharacter(1, Left_Paddle, copy_u8YPos, copy_u8XPos);
    27c8:	22 ef       	ldi	r18, 0xF2	; 242
    27ca:	31 e0       	ldi	r19, 0x01	; 1
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	b9 01       	movw	r22, r18
    27d0:	49 81       	ldd	r20, Y+1	; 0x01
    27d2:	2a 81       	ldd	r18, Y+2	; 0x02
    27d4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <DrawRightPaddleAtXY>:

void DrawRightPaddleAtXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <DrawRightPaddleAtXY+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	6a 83       	std	Y+2, r22	; 0x02
    // Draw the right paddle at its new position
	LCD_voidWriteCustomCharacter(2, Right_Paddle, copy_u8YPos, copy_u8XPos);
    27f0:	2a ef       	ldi	r18, 0xFA	; 250
    27f2:	31 e0       	ldi	r19, 0x01	; 1
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	b9 01       	movw	r22, r18
    27f8:	49 81       	ldd	r20, Y+1	; 0x01
    27fa:	2a 81       	ldd	r18, Y+2	; 0x02
    27fc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <Update_Score>:



void Update_Score()
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	// Clear the old Scores
	LCD_voidGoToXY(0, 6);
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	66 e0       	ldi	r22, 0x06	; 6
    2816:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteCharacter(' ');
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>

	LCD_voidGoToXY(0, 19);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	63 e1       	ldi	r22, 0x13	; 19
    2824:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteCharacter(' ');
    2828:	80 e2       	ldi	r24, 0x20	; 32
    282a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>

	/* Update the new Scores */
	LCD_voidGoToXY(0, 6);
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	66 e0       	ldi	r22, 0x06	; 6
    2832:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteDecimal(PLAYER1_Score);
    2836:	80 91 43 02 	lds	r24, 0x0243
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e0       	ldi	r26, 0x00	; 0
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>

	LCD_voidGoToXY(0, 19);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	63 e1       	ldi	r22, 0x13	; 19
    284e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteDecimal(PLAYER2_Score);
    2852:	80 91 44 02 	lds	r24, 0x0244
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e0       	ldi	r26, 0x00	; 0
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <UpdatePaddles>:



void UpdatePaddles()
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8GetPinValue(PING_PONG_PORT, PADDLE_1_UP) == 0)
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_u8GetPinValue>
    287c:	88 23       	and	r24, r24
    287e:	a9 f4       	brne	.+42     	; 0x28aa <UpdatePaddles+0x3e>
	{
		if(Paddle1_y > 1)
    2880:	80 91 e8 01 	lds	r24, 0x01E8
    2884:	82 30       	cpi	r24, 0x02	; 2
    2886:	08 f4       	brcc	.+2      	; 0x288a <UpdatePaddles+0x1e>
    2888:	5e c0       	rjmp	.+188    	; 0x2946 <UpdatePaddles+0xda>
		{
			ClearXY(Paddle1_y, 0);
    288a:	80 91 e8 01 	lds	r24, 0x01E8
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>

			Paddle1_y --;
    2894:	80 91 e8 01 	lds	r24, 0x01E8
    2898:	81 50       	subi	r24, 0x01	; 1
    289a:	80 93 e8 01 	sts	0x01E8, r24
			DrawLeftPaddleAtXY(Paddle1_y, 0);
    289e:	80 91 e8 01 	lds	r24, 0x01E8
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
    28a8:	4e c0       	rjmp	.+156    	; 0x2946 <UpdatePaddles+0xda>
		}
	}
	else if (DIO_u8GetPinValue(PING_PONG_PORT, PADDLE_1_DOWN) == 0)
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	61 e0       	ldi	r22, 0x01	; 1
    28ae:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_u8GetPinValue>
    28b2:	88 23       	and	r24, r24
    28b4:	a9 f4       	brne	.+42     	; 0x28e0 <UpdatePaddles+0x74>
	{
		if(Paddle1_y < 3)
    28b6:	80 91 e8 01 	lds	r24, 0x01E8
    28ba:	83 30       	cpi	r24, 0x03	; 3
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <UpdatePaddles+0x54>
    28be:	43 c0       	rjmp	.+134    	; 0x2946 <UpdatePaddles+0xda>
		{
			ClearXY(Paddle1_y, 0);
    28c0:	80 91 e8 01 	lds	r24, 0x01E8
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>

			Paddle1_y ++;
    28ca:	80 91 e8 01 	lds	r24, 0x01E8
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	80 93 e8 01 	sts	0x01E8, r24
			DrawLeftPaddleAtXY(Paddle1_y, 0);
    28d4:	80 91 e8 01 	lds	r24, 0x01E8
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
    28de:	33 c0       	rjmp	.+102    	; 0x2946 <UpdatePaddles+0xda>
		}
	}
	else if (DIO_u8GetPinValue(PING_PONG_PORT, PADDLE_2_UP) == 0)
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	62 e0       	ldi	r22, 0x02	; 2
    28e4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_u8GetPinValue>
    28e8:	88 23       	and	r24, r24
    28ea:	a1 f4       	brne	.+40     	; 0x2914 <UpdatePaddles+0xa8>
	{
		if(Paddle2_y > 1)
    28ec:	80 91 e9 01 	lds	r24, 0x01E9
    28f0:	82 30       	cpi	r24, 0x02	; 2
    28f2:	48 f1       	brcs	.+82     	; 0x2946 <UpdatePaddles+0xda>
		{
			ClearXY(Paddle2_y, 19);
    28f4:	80 91 e9 01 	lds	r24, 0x01E9
    28f8:	63 e1       	ldi	r22, 0x13	; 19
    28fa:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>

			Paddle2_y --;
    28fe:	80 91 e9 01 	lds	r24, 0x01E9
    2902:	81 50       	subi	r24, 0x01	; 1
    2904:	80 93 e9 01 	sts	0x01E9, r24
			DrawLeftPaddleAtXY(Paddle2_y, 19);
    2908:	80 91 e9 01 	lds	r24, 0x01E9
    290c:	63 e1       	ldi	r22, 0x13	; 19
    290e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
    2912:	19 c0       	rjmp	.+50     	; 0x2946 <UpdatePaddles+0xda>
		}
	}
	else if (DIO_u8GetPinValue(PING_PONG_PORT, PADDLE_2_DOWN) == 0)
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	63 e0       	ldi	r22, 0x03	; 3
    2918:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_u8GetPinValue>
    291c:	88 23       	and	r24, r24
    291e:	99 f4       	brne	.+38     	; 0x2946 <UpdatePaddles+0xda>
	{
		if(Paddle2_y < 3)
    2920:	80 91 e9 01 	lds	r24, 0x01E9
    2924:	83 30       	cpi	r24, 0x03	; 3
    2926:	78 f4       	brcc	.+30     	; 0x2946 <UpdatePaddles+0xda>
		{
			ClearXY(Paddle2_y, 19);
    2928:	80 91 e9 01 	lds	r24, 0x01E9
    292c:	63 e1       	ldi	r22, 0x13	; 19
    292e:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>

			Paddle2_y ++;
    2932:	80 91 e9 01 	lds	r24, 0x01E9
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	80 93 e9 01 	sts	0x01E9, r24
			DrawLeftPaddleAtXY(Paddle2_y, 19);
    293c:	80 91 e9 01 	lds	r24, 0x01E9
    2940:	63 e1       	ldi	r22, 0x13	; 19
    2942:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
		}
	}
}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <PindPong_voidForward_Move>:



void PindPong_voidForward_Move()
{
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	c2 56       	subi	r28, 0x62	; 98
    295a:	d0 40       	sbci	r29, 0x00	; 0
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
	UpdatePaddles();
    2966:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    296a:	80 91 e8 01 	lds	r24, 0x01E8
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    2974:	80 91 e9 01 	lds	r24, 0x01E9
    2978:	63 e1       	ldi	r22, 0x13	; 19
    297a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(3,4);
    297e:	83 e0       	ldi	r24, 0x03	; 3
    2980:	64 e0       	ldi	r22, 0x04	; 4
    2982:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    2986:	fe 01       	movw	r30, r28
    2988:	e1 5a       	subi	r30, 0xA1	; 161
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a8 ec       	ldi	r26, 0xC8	; 200
    2992:	b2 e4       	ldi	r27, 0x42	; 66
    2994:	80 83       	st	Z, r24
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	a2 83       	std	Z+2, r26	; 0x02
    299a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	8e 01       	movw	r16, r28
    299e:	05 5a       	subi	r16, 0xA5	; 165
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	fe 01       	movw	r30, r28
    29a4:	e1 5a       	subi	r30, 0xA1	; 161
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a ef       	ldi	r20, 0xFA	; 250
    29b6:	54 e4       	ldi	r21, 0x44	; 68
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	f8 01       	movw	r30, r16
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	a2 83       	std	Z+2, r26	; 0x02
    29c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ca:	fe 01       	movw	r30, r28
    29cc:	e5 5a       	subi	r30, 0xA5	; 165
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	82 81       	ldd	r24, Z+2	; 0x02
    29d6:	93 81       	ldd	r25, Z+3	; 0x03
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	5f e3       	ldi	r21, 0x3F	; 63
    29e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e4:	88 23       	and	r24, r24
    29e6:	44 f4       	brge	.+16     	; 0x29f8 <PindPong_voidForward_Move+0xac>
		__ticks = 1;
    29e8:	fe 01       	movw	r30, r28
    29ea:	e7 5a       	subi	r30, 0xA7	; 167
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
    29f6:	64 c0       	rjmp	.+200    	; 0x2ac0 <PindPong_voidForward_Move+0x174>
	else if (__tmp > 65535)
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 5a       	subi	r30, 0xA5	; 165
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	0c f0       	brlt	.+2      	; 0x2a18 <PindPong_voidForward_Move+0xcc>
    2a16:	43 c0       	rjmp	.+134    	; 0x2a9e <PindPong_voidForward_Move+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e1 5a       	subi	r30, 0xA1	; 161
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8e 01       	movw	r16, r28
    2a38:	07 5a       	subi	r16, 0xA7	; 167
    2a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	f8 01       	movw	r30, r16
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	1f c0       	rjmp	.+62     	; 0x2a8e <PindPong_voidForward_Move+0x142>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e9 5a       	subi	r30, 0xA9	; 169
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	88 ec       	ldi	r24, 0xC8	; 200
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e9 5a       	subi	r30, 0xA9	; 169
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <PindPong_voidForward_Move+0x11c>
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e9 5a       	subi	r30, 0xA9	; 169
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a76:	de 01       	movw	r26, r28
    2a78:	a7 5a       	subi	r26, 0xA7	; 167
    2a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e7 5a       	subi	r30, 0xA7	; 167
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	11 96       	adiw	r26, 0x01	; 1
    2a8a:	9c 93       	st	X, r25
    2a8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e7 5a       	subi	r30, 0xA7	; 167
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	d1 f6       	brne	.-76     	; 0x2a50 <PindPong_voidForward_Move+0x104>
    2a9c:	27 c0       	rjmp	.+78     	; 0x2aec <PindPong_voidForward_Move+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9e:	8e 01       	movw	r16, r28
    2aa0:	07 5a       	subi	r16, 0xA7	; 167
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 5a       	subi	r30, 0xA5	; 165
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	60 81       	ld	r22, Z
    2aac:	71 81       	ldd	r23, Z+1	; 0x01
    2aae:	82 81       	ldd	r24, Z+2	; 0x02
    2ab0:	93 81       	ldd	r25, Z+3	; 0x03
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
    2ac0:	de 01       	movw	r26, r28
    2ac2:	ab 5a       	subi	r26, 0xAB	; 171
    2ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e7 5a       	subi	r30, 0xA7	; 167
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	8d 93       	st	X+, r24
    2ad2:	9c 93       	st	X, r25
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	eb 5a       	subi	r30, 0xAB	; 171
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <PindPong_voidForward_Move+0x192>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	eb 5a       	subi	r30, 0xAB	; 171
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
	_delay_ms(100);

	ClearXY(3,4);
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	64 e0       	ldi	r22, 0x04	; 4
    2af0:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    2af4:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    2af8:	80 91 e8 01 	lds	r24, 0x01E8
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    2b02:	80 91 e9 01 	lds	r24, 0x01E9
    2b06:	63 e1       	ldi	r22, 0x13	; 19
    2b08:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(1,7);
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	67 e0       	ldi	r22, 0x07	; 7
    2b10:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    2b14:	fe 01       	movw	r30, r28
    2b16:	ef 5a       	subi	r30, 0xAF	; 175
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a8 ec       	ldi	r26, 0xC8	; 200
    2b20:	b2 e4       	ldi	r27, 0x42	; 66
    2b22:	80 83       	st	Z, r24
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	a2 83       	std	Z+2, r26	; 0x02
    2b28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	03 5b       	subi	r16, 0xB3	; 179
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	fe 01       	movw	r30, r28
    2b32:	ef 5a       	subi	r30, 0xAF	; 175
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a ef       	ldi	r20, 0xFA	; 250
    2b44:	54 e4       	ldi	r21, 0x44	; 68
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	f8 01       	movw	r30, r16
    2b50:	80 83       	st	Z, r24
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	a2 83       	std	Z+2, r26	; 0x02
    2b56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e3 5b       	subi	r30, 0xB3	; 179
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e8       	ldi	r20, 0x80	; 128
    2b6c:	5f e3       	ldi	r21, 0x3F	; 63
    2b6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b72:	88 23       	and	r24, r24
    2b74:	44 f4       	brge	.+16     	; 0x2b86 <PindPong_voidForward_Move+0x23a>
		__ticks = 1;
    2b76:	fe 01       	movw	r30, r28
    2b78:	e5 5b       	subi	r30, 0xB5	; 181
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	80 83       	st	Z, r24
    2b84:	64 c0       	rjmp	.+200    	; 0x2c4e <PindPong_voidForward_Move+0x302>
	else if (__tmp > 65535)
    2b86:	fe 01       	movw	r30, r28
    2b88:	e3 5b       	subi	r30, 0xB3	; 179
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	0c f0       	brlt	.+2      	; 0x2ba6 <PindPong_voidForward_Move+0x25a>
    2ba4:	43 c0       	rjmp	.+134    	; 0x2c2c <PindPong_voidForward_Move+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ef 5a       	subi	r30, 0xAF	; 175
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	8e 01       	movw	r16, r28
    2bc6:	05 5b       	subi	r16, 0xB5	; 181
    2bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
    2bdc:	1f c0       	rjmp	.+62     	; 0x2c1c <PindPong_voidForward_Move+0x2d0>
    2bde:	fe 01       	movw	r30, r28
    2be0:	e7 5b       	subi	r30, 0xB7	; 183
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	fe 01       	movw	r30, r28
    2bee:	e7 5b       	subi	r30, 0xB7	; 183
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <PindPong_voidForward_Move+0x2aa>
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e7 5b       	subi	r30, 0xB7	; 183
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	de 01       	movw	r26, r28
    2c06:	a5 5b       	subi	r26, 0xB5	; 181
    2c08:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e5 5b       	subi	r30, 0xB5	; 181
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	11 96       	adiw	r26, 0x01	; 1
    2c18:	9c 93       	st	X, r25
    2c1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e5 5b       	subi	r30, 0xB5	; 181
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	d1 f6       	brne	.-76     	; 0x2bde <PindPong_voidForward_Move+0x292>
    2c2a:	27 c0       	rjmp	.+78     	; 0x2c7a <PindPong_voidForward_Move+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2c:	8e 01       	movw	r16, r28
    2c2e:	05 5b       	subi	r16, 0xB5	; 181
    2c30:	1f 4f       	sbci	r17, 0xFF	; 255
    2c32:	fe 01       	movw	r30, r28
    2c34:	e3 5b       	subi	r30, 0xB3	; 179
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	f8 01       	movw	r30, r16
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
    2c4e:	de 01       	movw	r26, r28
    2c50:	a9 5b       	subi	r26, 0xB9	; 185
    2c52:	bf 4f       	sbci	r27, 0xFF	; 255
    2c54:	fe 01       	movw	r30, r28
    2c56:	e5 5b       	subi	r30, 0xB5	; 181
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	8d 93       	st	X+, r24
    2c60:	9c 93       	st	X, r25
    2c62:	fe 01       	movw	r30, r28
    2c64:	e9 5b       	subi	r30, 0xB9	; 185
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 81       	ld	r24, Z
    2c6a:	91 81       	ldd	r25, Z+1	; 0x01
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <PindPong_voidForward_Move+0x320>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 5b       	subi	r30, 0xB9	; 185
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
	_delay_ms(100);

	ClearXY(1,7);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	67 e0       	ldi	r22, 0x07	; 7
    2c7e:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    2c82:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    2c86:	80 91 e8 01 	lds	r24, 0x01E8
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    2c90:	80 91 e9 01 	lds	r24, 0x01E9
    2c94:	63 e1       	ldi	r22, 0x13	; 19
    2c96:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(3,10);
    2c9a:	83 e0       	ldi	r24, 0x03	; 3
    2c9c:	6a e0       	ldi	r22, 0x0A	; 10
    2c9e:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	ed 5b       	subi	r30, 0xBD	; 189
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a8 ec       	ldi	r26, 0xC8	; 200
    2cae:	b2 e4       	ldi	r27, 0x42	; 66
    2cb0:	80 83       	st	Z, r24
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	a2 83       	std	Z+2, r26	; 0x02
    2cb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	8e 01       	movw	r16, r28
    2cba:	01 5c       	subi	r16, 0xC1	; 193
    2cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ed 5b       	subi	r30, 0xBD	; 189
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a ef       	ldi	r20, 0xFA	; 250
    2cd2:	54 e4       	ldi	r21, 0x44	; 68
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	f8 01       	movw	r30, r16
    2cde:	80 83       	st	Z, r24
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	a2 83       	std	Z+2, r26	; 0x02
    2ce4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	ff 96       	adiw	r30, 0x3f	; 63
    2cea:	60 81       	ld	r22, Z
    2cec:	71 81       	ldd	r23, Z+1	; 0x01
    2cee:	82 81       	ldd	r24, Z+2	; 0x02
    2cf0:	93 81       	ldd	r25, Z+3	; 0x03
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <PindPong_voidForward_Move+0x3c0>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9e af       	std	Y+62, r25	; 0x3e
    2d08:	8d af       	std	Y+61, r24	; 0x3d
    2d0a:	46 c0       	rjmp	.+140    	; 0x2d98 <PindPong_voidForward_Move+0x44c>
	else if (__tmp > 65535)
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	ff 96       	adiw	r30, 0x3f	; 63
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	4f e7       	ldi	r20, 0x7F	; 127
    2d1e:	57 e4       	ldi	r21, 0x47	; 71
    2d20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d24:	18 16       	cp	r1, r24
    2d26:	64 f5       	brge	.+88     	; 0x2d80 <PindPong_voidForward_Move+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ed 5b       	subi	r30, 0xBD	; 189
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9e af       	std	Y+62, r25	; 0x3e
    2d54:	8d af       	std	Y+61, r24	; 0x3d
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <PindPong_voidForward_Move+0x42a>
    2d58:	88 ec       	ldi	r24, 0xC8	; 200
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9c af       	std	Y+60, r25	; 0x3c
    2d5e:	8b af       	std	Y+59, r24	; 0x3b
    2d60:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d62:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <PindPong_voidForward_Move+0x418>
    2d68:	9c af       	std	Y+60, r25	; 0x3c
    2d6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	9e af       	std	Y+62, r25	; 0x3e
    2d74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	69 f7       	brne	.-38     	; 0x2d58 <PindPong_voidForward_Move+0x40c>
    2d7e:	16 c0       	rjmp	.+44     	; 0x2dac <PindPong_voidForward_Move+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d80:	fe 01       	movw	r30, r28
    2d82:	ff 96       	adiw	r30, 0x3f	; 63
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9e af       	std	Y+62, r25	; 0x3e
    2d96:	8d af       	std	Y+61, r24	; 0x3d
    2d98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d9c:	9a af       	std	Y+58, r25	; 0x3a
    2d9e:	89 af       	std	Y+57, r24	; 0x39
    2da0:	89 ad       	ldd	r24, Y+57	; 0x39
    2da2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <PindPong_voidForward_Move+0x458>
    2da8:	9a af       	std	Y+58, r25	; 0x3a
    2daa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);

	ClearXY(3,10);
    2dac:	83 e0       	ldi	r24, 0x03	; 3
    2dae:	6a e0       	ldi	r22, 0x0A	; 10
    2db0:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    2db4:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    2db8:	80 91 e8 01 	lds	r24, 0x01E8
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    2dc2:	80 91 e9 01 	lds	r24, 0x01E9
    2dc6:	63 e1       	ldi	r22, 0x13	; 19
    2dc8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(1,13);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	6d e0       	ldi	r22, 0x0D	; 13
    2dd0:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a8 ec       	ldi	r26, 0xC8	; 200
    2dda:	b2 e4       	ldi	r27, 0x42	; 66
    2ddc:	8d ab       	std	Y+53, r24	; 0x35
    2dde:	9e ab       	std	Y+54, r25	; 0x36
    2de0:	af ab       	std	Y+55, r26	; 0x37
    2de2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de4:	6d a9       	ldd	r22, Y+53	; 0x35
    2de6:	7e a9       	ldd	r23, Y+54	; 0x36
    2de8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dea:	98 ad       	ldd	r25, Y+56	; 0x38
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	4a ef       	ldi	r20, 0xFA	; 250
    2df2:	54 e4       	ldi	r21, 0x44	; 68
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	89 ab       	std	Y+49, r24	; 0x31
    2dfe:	9a ab       	std	Y+50, r25	; 0x32
    2e00:	ab ab       	std	Y+51, r26	; 0x33
    2e02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e04:	69 a9       	ldd	r22, Y+49	; 0x31
    2e06:	7a a9       	ldd	r23, Y+50	; 0x32
    2e08:	8b a9       	ldd	r24, Y+51	; 0x33
    2e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e18:	88 23       	and	r24, r24
    2e1a:	2c f4       	brge	.+10     	; 0x2e26 <PindPong_voidForward_Move+0x4da>
		__ticks = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	98 ab       	std	Y+48, r25	; 0x30
    2e22:	8f a7       	std	Y+47, r24	; 0x2f
    2e24:	3f c0       	rjmp	.+126    	; 0x2ea4 <PindPong_voidForward_Move+0x558>
	else if (__tmp > 65535)
    2e26:	69 a9       	ldd	r22, Y+49	; 0x31
    2e28:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	3f ef       	ldi	r19, 0xFF	; 255
    2e32:	4f e7       	ldi	r20, 0x7F	; 127
    2e34:	57 e4       	ldi	r21, 0x47	; 71
    2e36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3a:	18 16       	cp	r1, r24
    2e3c:	4c f5       	brge	.+82     	; 0x2e90 <PindPong_voidForward_Move+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e40:	7e a9       	ldd	r23, Y+54	; 0x36
    2e42:	8f a9       	ldd	r24, Y+55	; 0x37
    2e44:	98 ad       	ldd	r25, Y+56	; 0x38
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e2       	ldi	r20, 0x20	; 32
    2e4c:	51 e4       	ldi	r21, 0x41	; 65
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	98 ab       	std	Y+48, r25	; 0x30
    2e64:	8f a7       	std	Y+47, r24	; 0x2f
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <PindPong_voidForward_Move+0x53a>
    2e68:	88 ec       	ldi	r24, 0xC8	; 200
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	9e a7       	std	Y+46, r25	; 0x2e
    2e6e:	8d a7       	std	Y+45, r24	; 0x2d
    2e70:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e72:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <PindPong_voidForward_Move+0x528>
    2e78:	9e a7       	std	Y+46, r25	; 0x2e
    2e7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	98 ab       	std	Y+48, r25	; 0x30
    2e84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e88:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	69 f7       	brne	.-38     	; 0x2e68 <PindPong_voidForward_Move+0x51c>
    2e8e:	14 c0       	rjmp	.+40     	; 0x2eb8 <PindPong_voidForward_Move+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e90:	69 a9       	ldd	r22, Y+49	; 0x31
    2e92:	7a a9       	ldd	r23, Y+50	; 0x32
    2e94:	8b a9       	ldd	r24, Y+51	; 0x33
    2e96:	9c a9       	ldd	r25, Y+52	; 0x34
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	98 ab       	std	Y+48, r25	; 0x30
    2ea2:	8f a7       	std	Y+47, r24	; 0x2f
    2ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea8:	9c a7       	std	Y+44, r25	; 0x2c
    2eaa:	8b a7       	std	Y+43, r24	; 0x2b
    2eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <PindPong_voidForward_Move+0x564>
    2eb4:	9c a7       	std	Y+44, r25	; 0x2c
    2eb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	ClearXY(1,13);
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	6d e0       	ldi	r22, 0x0D	; 13
    2ebc:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    2ec0:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    2ec4:	80 91 e8 01 	lds	r24, 0x01E8
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    2ece:	80 91 e9 01 	lds	r24, 0x01E9
    2ed2:	63 e1       	ldi	r22, 0x13	; 19
    2ed4:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(3,16);
    2ed8:	83 e0       	ldi	r24, 0x03	; 3
    2eda:	60 e1       	ldi	r22, 0x10	; 16
    2edc:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a8 ec       	ldi	r26, 0xC8	; 200
    2ee6:	b2 e4       	ldi	r27, 0x42	; 66
    2ee8:	8f a3       	std	Y+39, r24	; 0x27
    2eea:	98 a7       	std	Y+40, r25	; 0x28
    2eec:	a9 a7       	std	Y+41, r26	; 0x29
    2eee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	4a ef       	ldi	r20, 0xFA	; 250
    2efe:	54 e4       	ldi	r21, 0x44	; 68
    2f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	8b a3       	std	Y+35, r24	; 0x23
    2f0a:	9c a3       	std	Y+36, r25	; 0x24
    2f0c:	ad a3       	std	Y+37, r26	; 0x25
    2f0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f10:	6b a1       	ldd	r22, Y+35	; 0x23
    2f12:	7c a1       	ldd	r23, Y+36	; 0x24
    2f14:	8d a1       	ldd	r24, Y+37	; 0x25
    2f16:	9e a1       	ldd	r25, Y+38	; 0x26
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	40 e8       	ldi	r20, 0x80	; 128
    2f1e:	5f e3       	ldi	r21, 0x3F	; 63
    2f20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f24:	88 23       	and	r24, r24
    2f26:	2c f4       	brge	.+10     	; 0x2f32 <PindPong_voidForward_Move+0x5e6>
		__ticks = 1;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	9a a3       	std	Y+34, r25	; 0x22
    2f2e:	89 a3       	std	Y+33, r24	; 0x21
    2f30:	3f c0       	rjmp	.+126    	; 0x2fb0 <PindPong_voidForward_Move+0x664>
	else if (__tmp > 65535)
    2f32:	6b a1       	ldd	r22, Y+35	; 0x23
    2f34:	7c a1       	ldd	r23, Y+36	; 0x24
    2f36:	8d a1       	ldd	r24, Y+37	; 0x25
    2f38:	9e a1       	ldd	r25, Y+38	; 0x26
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	3f ef       	ldi	r19, 0xFF	; 255
    2f3e:	4f e7       	ldi	r20, 0x7F	; 127
    2f40:	57 e4       	ldi	r21, 0x47	; 71
    2f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f46:	18 16       	cp	r1, r24
    2f48:	4c f5       	brge	.+82     	; 0x2f9c <PindPong_voidForward_Move+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e2       	ldi	r20, 0x20	; 32
    2f58:	51 e4       	ldi	r21, 0x41	; 65
    2f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	bc 01       	movw	r22, r24
    2f64:	cd 01       	movw	r24, r26
    2f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	9a a3       	std	Y+34, r25	; 0x22
    2f70:	89 a3       	std	Y+33, r24	; 0x21
    2f72:	0f c0       	rjmp	.+30     	; 0x2f92 <PindPong_voidForward_Move+0x646>
    2f74:	88 ec       	ldi	r24, 0xC8	; 200
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	98 a3       	std	Y+32, r25	; 0x20
    2f7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	f1 f7       	brne	.-4      	; 0x2f80 <PindPong_voidForward_Move+0x634>
    2f84:	98 a3       	std	Y+32, r25	; 0x20
    2f86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f88:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	9a a3       	std	Y+34, r25	; 0x22
    2f90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f92:	89 a1       	ldd	r24, Y+33	; 0x21
    2f94:	9a a1       	ldd	r25, Y+34	; 0x22
    2f96:	00 97       	sbiw	r24, 0x00	; 0
    2f98:	69 f7       	brne	.-38     	; 0x2f74 <PindPong_voidForward_Move+0x628>
    2f9a:	14 c0       	rjmp	.+40     	; 0x2fc4 <PindPong_voidForward_Move+0x678>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	9a a3       	std	Y+34, r25	; 0x22
    2fae:	89 a3       	std	Y+33, r24	; 0x21
    2fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <PindPong_voidForward_Move+0x670>
    2fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	ClearXY(3,16);
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	60 e1       	ldi	r22, 0x10	; 16
    2fc8:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    2fcc:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    2fd0:	80 91 e8 01 	lds	r24, 0x01E8
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    2fda:	80 91 e9 01 	lds	r24, 0x01E9
    2fde:	63 e1       	ldi	r22, 0x13	; 19
    2fe0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	if(Paddle2_y != 1)
    2fe4:	80 91 e9 01 	lds	r24, 0x01E9
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	09 f4       	brne	.+2      	; 0x2fee <PindPong_voidForward_Move+0x6a2>
    2fec:	8c c0       	rjmp	.+280    	; 0x3106 <PindPong_voidForward_Move+0x7ba>
	{
		DrawBallAtXY(1,19);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	63 e1       	ldi	r22, 0x13	; 19
    2ff2:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
		PLAYER1_Score ++;
    2ff6:	80 91 43 02 	lds	r24, 0x0243
    2ffa:	8f 5f       	subi	r24, 0xFF	; 255
    2ffc:	80 93 43 02 	sts	0x0243, r24
		Update_Score();
    3000:	0e 94 05 14 	call	0x280a	; 0x280a <Update_Score>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	a8 ec       	ldi	r26, 0xC8	; 200
    300a:	b2 e4       	ldi	r27, 0x42	; 66
    300c:	89 8f       	std	Y+25, r24	; 0x19
    300e:	9a 8f       	std	Y+26, r25	; 0x1a
    3010:	ab 8f       	std	Y+27, r26	; 0x1b
    3012:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3014:	69 8d       	ldd	r22, Y+25	; 0x19
    3016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	4a ef       	ldi	r20, 0xFA	; 250
    3022:	54 e4       	ldi	r21, 0x44	; 68
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	8d 8b       	std	Y+21, r24	; 0x15
    302e:	9e 8b       	std	Y+22, r25	; 0x16
    3030:	af 8b       	std	Y+23, r26	; 0x17
    3032:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e8       	ldi	r20, 0x80	; 128
    3042:	5f e3       	ldi	r21, 0x3F	; 63
    3044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3048:	88 23       	and	r24, r24
    304a:	2c f4       	brge	.+10     	; 0x3056 <PindPong_voidForward_Move+0x70a>
		__ticks = 1;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9c 8b       	std	Y+20, r25	; 0x14
    3052:	8b 8b       	std	Y+19, r24	; 0x13
    3054:	3f c0       	rjmp	.+126    	; 0x30d4 <PindPong_voidForward_Move+0x788>
	else if (__tmp > 65535)
    3056:	6d 89       	ldd	r22, Y+21	; 0x15
    3058:	7e 89       	ldd	r23, Y+22	; 0x16
    305a:	8f 89       	ldd	r24, Y+23	; 0x17
    305c:	98 8d       	ldd	r25, Y+24	; 0x18
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	57 e4       	ldi	r21, 0x47	; 71
    3066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306a:	18 16       	cp	r1, r24
    306c:	4c f5       	brge	.+82     	; 0x30c0 <PindPong_voidForward_Move+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306e:	69 8d       	ldd	r22, Y+25	; 0x19
    3070:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3072:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3074:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e2       	ldi	r20, 0x20	; 32
    307c:	51 e4       	ldi	r21, 0x41	; 65
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9c 8b       	std	Y+20, r25	; 0x14
    3094:	8b 8b       	std	Y+19, r24	; 0x13
    3096:	0f c0       	rjmp	.+30     	; 0x30b6 <PindPong_voidForward_Move+0x76a>
    3098:	88 ec       	ldi	r24, 0xC8	; 200
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	9a 8b       	std	Y+18, r25	; 0x12
    309e:	89 8b       	std	Y+17, r24	; 0x11
    30a0:	89 89       	ldd	r24, Y+17	; 0x11
    30a2:	9a 89       	ldd	r25, Y+18	; 0x12
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <PindPong_voidForward_Move+0x758>
    30a8:	9a 8b       	std	Y+18, r25	; 0x12
    30aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ac:	8b 89       	ldd	r24, Y+19	; 0x13
    30ae:	9c 89       	ldd	r25, Y+20	; 0x14
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	9c 8b       	std	Y+20, r25	; 0x14
    30b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b6:	8b 89       	ldd	r24, Y+19	; 0x13
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	69 f7       	brne	.-38     	; 0x3098 <PindPong_voidForward_Move+0x74c>
    30be:	14 c0       	rjmp	.+40     	; 0x30e8 <PindPong_voidForward_Move+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c0:	6d 89       	ldd	r22, Y+21	; 0x15
    30c2:	7e 89       	ldd	r23, Y+22	; 0x16
    30c4:	8f 89       	ldd	r24, Y+23	; 0x17
    30c6:	98 8d       	ldd	r25, Y+24	; 0x18
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9c 8b       	std	Y+20, r25	; 0x14
    30d2:	8b 8b       	std	Y+19, r24	; 0x13
    30d4:	8b 89       	ldd	r24, Y+19	; 0x13
    30d6:	9c 89       	ldd	r25, Y+20	; 0x14
    30d8:	98 8b       	std	Y+16, r25	; 0x10
    30da:	8f 87       	std	Y+15, r24	; 0x0f
    30dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    30de:	98 89       	ldd	r25, Y+16	; 0x10
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <PindPong_voidForward_Move+0x794>
    30e4:	98 8b       	std	Y+16, r25	; 0x10
    30e6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		if(PLAYER1_Score == 3)
    30e8:	80 91 43 02 	lds	r24, 0x0243
    30ec:	83 30       	cpi	r24, 0x03	; 3
    30ee:	31 f4       	brne	.+12     	; 0x30fc <PindPong_voidForward_Move+0x7b0>
		{
			Harb_Celebrate();
    30f0:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <Harb_Celebrate>
			exit(0);
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 8b 20 	call	0x4116	; 0x4116 <_exit>
		}

		ClearXY(1,19);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	63 e1       	ldi	r22, 0x13	; 19
    3100:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
    3104:	7a c0       	rjmp	.+244    	; 0x31fa <PindPong_voidForward_Move+0x8ae>

	}
	else
	{
		DrawBallAtXY(1,18);
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	62 e1       	ldi	r22, 0x12	; 18
    310a:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a8 ec       	ldi	r26, 0xC8	; 200
    3114:	b2 e4       	ldi	r27, 0x42	; 66
    3116:	8b 87       	std	Y+11, r24	; 0x0b
    3118:	9c 87       	std	Y+12, r25	; 0x0c
    311a:	ad 87       	std	Y+13, r26	; 0x0d
    311c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	4a ef       	ldi	r20, 0xFA	; 250
    312c:	54 e4       	ldi	r21, 0x44	; 68
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8f 83       	std	Y+7, r24	; 0x07
    3138:	98 87       	std	Y+8, r25	; 0x08
    313a:	a9 87       	std	Y+9, r26	; 0x09
    313c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	2c f4       	brge	.+10     	; 0x3160 <PindPong_voidForward_Move+0x814>
		__ticks = 1;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	3f c0       	rjmp	.+126    	; 0x31de <PindPong_voidForward_Move+0x892>
	else if (__tmp > 65535)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	3f ef       	ldi	r19, 0xFF	; 255
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	57 e4       	ldi	r21, 0x47	; 71
    3170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	4c f5       	brge	.+82     	; 0x31ca <PindPong_voidForward_Move+0x87e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3178:	6b 85       	ldd	r22, Y+11	; 0x0b
    317a:	7c 85       	ldd	r23, Y+12	; 0x0c
    317c:	8d 85       	ldd	r24, Y+13	; 0x0d
    317e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e2       	ldi	r20, 0x20	; 32
    3186:	51 e4       	ldi	r21, 0x41	; 65
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	0f c0       	rjmp	.+30     	; 0x31c0 <PindPong_voidForward_Move+0x874>
    31a2:	88 ec       	ldi	r24, 0xC8	; 200
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	8b 83       	std	Y+3, r24	; 0x03
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <PindPong_voidForward_Move+0x862>
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	69 f7       	brne	.-38     	; 0x31a2 <PindPong_voidForward_Move+0x856>
    31c8:	14 c0       	rjmp	.+40     	; 0x31f2 <PindPong_voidForward_Move+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ca:	6f 81       	ldd	r22, Y+7	; 0x07
    31cc:	78 85       	ldd	r23, Y+8	; 0x08
    31ce:	89 85       	ldd	r24, Y+9	; 0x09
    31d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <PindPong_voidForward_Move+0x89e>
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		ClearXY(1,18);
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	62 e1       	ldi	r22, 0x12	; 18
    31f6:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	}
}
    31fa:	ce 59       	subi	r28, 0x9E	; 158
    31fc:	df 4f       	sbci	r29, 0xFF	; 255
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	08 95       	ret

00003212 <PindPong_voidBackward_Move>:


void PindPong_voidBackward_Move()
{
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	c2 56       	subi	r28, 0x62	; 98
    3220:	d0 40       	sbci	r29, 0x00	; 0
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
	UpdatePaddles();
    322c:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    3230:	80 91 e8 01 	lds	r24, 0x01E8
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    323a:	80 91 e9 01 	lds	r24, 0x01E9
    323e:	63 e1       	ldi	r22, 0x13	; 19
    3240:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(3,16);
    3244:	83 e0       	ldi	r24, 0x03	; 3
    3246:	60 e1       	ldi	r22, 0x10	; 16
    3248:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    324c:	fe 01       	movw	r30, r28
    324e:	e1 5a       	subi	r30, 0xA1	; 161
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	a8 ec       	ldi	r26, 0xC8	; 200
    3258:	b2 e4       	ldi	r27, 0x42	; 66
    325a:	80 83       	st	Z, r24
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	a2 83       	std	Z+2, r26	; 0x02
    3260:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3262:	8e 01       	movw	r16, r28
    3264:	05 5a       	subi	r16, 0xA5	; 165
    3266:	1f 4f       	sbci	r17, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	e1 5a       	subi	r30, 0xA1	; 161
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a ef       	ldi	r20, 0xFA	; 250
    327c:	54 e4       	ldi	r21, 0x44	; 68
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	f8 01       	movw	r30, r16
    3288:	80 83       	st	Z, r24
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3290:	fe 01       	movw	r30, r28
    3292:	e5 5a       	subi	r30, 0xA5	; 165
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	44 f4       	brge	.+16     	; 0x32be <PindPong_voidBackward_Move+0xac>
		__ticks = 1;
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 5a       	subi	r30, 0xA7	; 167
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	64 c0       	rjmp	.+200    	; 0x3386 <PindPong_voidBackward_Move+0x174>
	else if (__tmp > 65535)
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 5a       	subi	r30, 0xA5	; 165
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	57 e4       	ldi	r21, 0x47	; 71
    32d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	0c f0       	brlt	.+2      	; 0x32de <PindPong_voidBackward_Move+0xcc>
    32dc:	43 c0       	rjmp	.+134    	; 0x3364 <PindPong_voidBackward_Move+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	fe 01       	movw	r30, r28
    32e0:	e1 5a       	subi	r30, 0xA1	; 161
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e2       	ldi	r20, 0x20	; 32
    32f2:	51 e4       	ldi	r21, 0x41	; 65
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8e 01       	movw	r16, r28
    32fe:	07 5a       	subi	r16, 0xA7	; 167
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    3314:	1f c0       	rjmp	.+62     	; 0x3354 <PindPong_voidBackward_Move+0x142>
    3316:	fe 01       	movw	r30, r28
    3318:	e9 5a       	subi	r30, 0xA9	; 169
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	88 ec       	ldi	r24, 0xC8	; 200
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	80 83       	st	Z, r24
    3324:	fe 01       	movw	r30, r28
    3326:	e9 5a       	subi	r30, 0xA9	; 169
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	f1 f7       	brne	.-4      	; 0x332e <PindPong_voidBackward_Move+0x11c>
    3332:	fe 01       	movw	r30, r28
    3334:	e9 5a       	subi	r30, 0xA9	; 169
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	de 01       	movw	r26, r28
    333e:	a7 5a       	subi	r26, 0xA7	; 167
    3340:	bf 4f       	sbci	r27, 0xFF	; 255
    3342:	fe 01       	movw	r30, r28
    3344:	e7 5a       	subi	r30, 0xA7	; 167
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	9c 93       	st	X, r25
    3352:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3354:	fe 01       	movw	r30, r28
    3356:	e7 5a       	subi	r30, 0xA7	; 167
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	d1 f6       	brne	.-76     	; 0x3316 <PindPong_voidBackward_Move+0x104>
    3362:	27 c0       	rjmp	.+78     	; 0x33b2 <PindPong_voidBackward_Move+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3364:	8e 01       	movw	r16, r28
    3366:	07 5a       	subi	r16, 0xA7	; 167
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	e5 5a       	subi	r30, 0xA5	; 165
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
    3386:	de 01       	movw	r26, r28
    3388:	ab 5a       	subi	r26, 0xAB	; 171
    338a:	bf 4f       	sbci	r27, 0xFF	; 255
    338c:	fe 01       	movw	r30, r28
    338e:	e7 5a       	subi	r30, 0xA7	; 167
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	8d 93       	st	X+, r24
    3398:	9c 93       	st	X, r25
    339a:	fe 01       	movw	r30, r28
    339c:	eb 5a       	subi	r30, 0xAB	; 171
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <PindPong_voidBackward_Move+0x192>
    33a8:	fe 01       	movw	r30, r28
    33aa:	eb 5a       	subi	r30, 0xAB	; 171
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
	_delay_ms(100);

	ClearXY(3,16);
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	60 e1       	ldi	r22, 0x10	; 16
    33b6:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    33ba:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    33be:	80 91 e8 01 	lds	r24, 0x01E8
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    33c8:	80 91 e9 01 	lds	r24, 0x01E9
    33cc:	63 e1       	ldi	r22, 0x13	; 19
    33ce:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(1,13);
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	6d e0       	ldi	r22, 0x0D	; 13
    33d6:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    33da:	fe 01       	movw	r30, r28
    33dc:	ef 5a       	subi	r30, 0xAF	; 175
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a8 ec       	ldi	r26, 0xC8	; 200
    33e6:	b2 e4       	ldi	r27, 0x42	; 66
    33e8:	80 83       	st	Z, r24
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	a2 83       	std	Z+2, r26	; 0x02
    33ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f0:	8e 01       	movw	r16, r28
    33f2:	03 5b       	subi	r16, 0xB3	; 179
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	fe 01       	movw	r30, r28
    33f8:	ef 5a       	subi	r30, 0xAF	; 175
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	4a ef       	ldi	r20, 0xFA	; 250
    340a:	54 e4       	ldi	r21, 0x44	; 68
    340c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	f8 01       	movw	r30, r16
    3416:	80 83       	st	Z, r24
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	a2 83       	std	Z+2, r26	; 0x02
    341c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    341e:	fe 01       	movw	r30, r28
    3420:	e3 5b       	subi	r30, 0xB3	; 179
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e8       	ldi	r20, 0x80	; 128
    3432:	5f e3       	ldi	r21, 0x3F	; 63
    3434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3438:	88 23       	and	r24, r24
    343a:	44 f4       	brge	.+16     	; 0x344c <PindPong_voidBackward_Move+0x23a>
		__ticks = 1;
    343c:	fe 01       	movw	r30, r28
    343e:	e5 5b       	subi	r30, 0xB5	; 181
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
    344a:	64 c0       	rjmp	.+200    	; 0x3514 <PindPong_voidBackward_Move+0x302>
	else if (__tmp > 65535)
    344c:	fe 01       	movw	r30, r28
    344e:	e3 5b       	subi	r30, 0xB3	; 179
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	3f ef       	ldi	r19, 0xFF	; 255
    345e:	4f e7       	ldi	r20, 0x7F	; 127
    3460:	57 e4       	ldi	r21, 0x47	; 71
    3462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3466:	18 16       	cp	r1, r24
    3468:	0c f0       	brlt	.+2      	; 0x346c <PindPong_voidBackward_Move+0x25a>
    346a:	43 c0       	rjmp	.+134    	; 0x34f2 <PindPong_voidBackward_Move+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346c:	fe 01       	movw	r30, r28
    346e:	ef 5a       	subi	r30, 0xAF	; 175
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	51 e4       	ldi	r21, 0x41	; 65
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	8e 01       	movw	r16, r28
    348c:	05 5b       	subi	r16, 0xB5	; 181
    348e:	1f 4f       	sbci	r17, 0xFF	; 255
    3490:	bc 01       	movw	r22, r24
    3492:	cd 01       	movw	r24, r26
    3494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	f8 01       	movw	r30, r16
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
    34a2:	1f c0       	rjmp	.+62     	; 0x34e2 <PindPong_voidBackward_Move+0x2d0>
    34a4:	fe 01       	movw	r30, r28
    34a6:	e7 5b       	subi	r30, 0xB7	; 183
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	88 ec       	ldi	r24, 0xC8	; 200
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	80 83       	st	Z, r24
    34b2:	fe 01       	movw	r30, r28
    34b4:	e7 5b       	subi	r30, 0xB7	; 183
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <PindPong_voidBackward_Move+0x2aa>
    34c0:	fe 01       	movw	r30, r28
    34c2:	e7 5b       	subi	r30, 0xB7	; 183
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ca:	de 01       	movw	r26, r28
    34cc:	a5 5b       	subi	r26, 0xB5	; 181
    34ce:	bf 4f       	sbci	r27, 0xFF	; 255
    34d0:	fe 01       	movw	r30, r28
    34d2:	e5 5b       	subi	r30, 0xB5	; 181
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	91 81       	ldd	r25, Z+1	; 0x01
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	11 96       	adiw	r26, 0x01	; 1
    34de:	9c 93       	st	X, r25
    34e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e2:	fe 01       	movw	r30, r28
    34e4:	e5 5b       	subi	r30, 0xB5	; 181
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	d1 f6       	brne	.-76     	; 0x34a4 <PindPong_voidBackward_Move+0x292>
    34f0:	27 c0       	rjmp	.+78     	; 0x3540 <PindPong_voidBackward_Move+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f2:	8e 01       	movw	r16, r28
    34f4:	05 5b       	subi	r16, 0xB5	; 181
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	fe 01       	movw	r30, r28
    34fa:	e3 5b       	subi	r30, 0xB3	; 179
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	60 81       	ld	r22, Z
    3500:	71 81       	ldd	r23, Z+1	; 0x01
    3502:	82 81       	ldd	r24, Z+2	; 0x02
    3504:	93 81       	ldd	r25, Z+3	; 0x03
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	f8 01       	movw	r30, r16
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	80 83       	st	Z, r24
    3514:	de 01       	movw	r26, r28
    3516:	a9 5b       	subi	r26, 0xB9	; 185
    3518:	bf 4f       	sbci	r27, 0xFF	; 255
    351a:	fe 01       	movw	r30, r28
    351c:	e5 5b       	subi	r30, 0xB5	; 181
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	8d 93       	st	X+, r24
    3526:	9c 93       	st	X, r25
    3528:	fe 01       	movw	r30, r28
    352a:	e9 5b       	subi	r30, 0xB9	; 185
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <PindPong_voidBackward_Move+0x320>
    3536:	fe 01       	movw	r30, r28
    3538:	e9 5b       	subi	r30, 0xB9	; 185
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	80 83       	st	Z, r24
	_delay_ms(100);

	ClearXY(1,13);
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	6d e0       	ldi	r22, 0x0D	; 13
    3544:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    3548:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    354c:	80 91 e8 01 	lds	r24, 0x01E8
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    3556:	80 91 e9 01 	lds	r24, 0x01E9
    355a:	63 e1       	ldi	r22, 0x13	; 19
    355c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(3,10);
    3560:	83 e0       	ldi	r24, 0x03	; 3
    3562:	6a e0       	ldi	r22, 0x0A	; 10
    3564:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    3568:	fe 01       	movw	r30, r28
    356a:	ed 5b       	subi	r30, 0xBD	; 189
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a8 ec       	ldi	r26, 0xC8	; 200
    3574:	b2 e4       	ldi	r27, 0x42	; 66
    3576:	80 83       	st	Z, r24
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	a2 83       	std	Z+2, r26	; 0x02
    357c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357e:	8e 01       	movw	r16, r28
    3580:	01 5c       	subi	r16, 0xC1	; 193
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	fe 01       	movw	r30, r28
    3586:	ed 5b       	subi	r30, 0xBD	; 189
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	4a ef       	ldi	r20, 0xFA	; 250
    3598:	54 e4       	ldi	r21, 0x44	; 68
    359a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	f8 01       	movw	r30, r16
    35a4:	80 83       	st	Z, r24
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	a2 83       	std	Z+2, r26	; 0x02
    35aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ac:	fe 01       	movw	r30, r28
    35ae:	ff 96       	adiw	r30, 0x3f	; 63
    35b0:	60 81       	ld	r22, Z
    35b2:	71 81       	ldd	r23, Z+1	; 0x01
    35b4:	82 81       	ldd	r24, Z+2	; 0x02
    35b6:	93 81       	ldd	r25, Z+3	; 0x03
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e8       	ldi	r20, 0x80	; 128
    35be:	5f e3       	ldi	r21, 0x3F	; 63
    35c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35c4:	88 23       	and	r24, r24
    35c6:	2c f4       	brge	.+10     	; 0x35d2 <PindPong_voidBackward_Move+0x3c0>
		__ticks = 1;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9e af       	std	Y+62, r25	; 0x3e
    35ce:	8d af       	std	Y+61, r24	; 0x3d
    35d0:	46 c0       	rjmp	.+140    	; 0x365e <PindPong_voidBackward_Move+0x44c>
	else if (__tmp > 65535)
    35d2:	fe 01       	movw	r30, r28
    35d4:	ff 96       	adiw	r30, 0x3f	; 63
    35d6:	60 81       	ld	r22, Z
    35d8:	71 81       	ldd	r23, Z+1	; 0x01
    35da:	82 81       	ldd	r24, Z+2	; 0x02
    35dc:	93 81       	ldd	r25, Z+3	; 0x03
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	64 f5       	brge	.+88     	; 0x3646 <PindPong_voidBackward_Move+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	fe 01       	movw	r30, r28
    35f0:	ed 5b       	subi	r30, 0xBD	; 189
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e2       	ldi	r20, 0x20	; 32
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9e af       	std	Y+62, r25	; 0x3e
    361a:	8d af       	std	Y+61, r24	; 0x3d
    361c:	0f c0       	rjmp	.+30     	; 0x363c <PindPong_voidBackward_Move+0x42a>
    361e:	88 ec       	ldi	r24, 0xC8	; 200
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	9c af       	std	Y+60, r25	; 0x3c
    3624:	8b af       	std	Y+59, r24	; 0x3b
    3626:	8b ad       	ldd	r24, Y+59	; 0x3b
    3628:	9c ad       	ldd	r25, Y+60	; 0x3c
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <PindPong_voidBackward_Move+0x418>
    362e:	9c af       	std	Y+60, r25	; 0x3c
    3630:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3632:	8d ad       	ldd	r24, Y+61	; 0x3d
    3634:	9e ad       	ldd	r25, Y+62	; 0x3e
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	9e af       	std	Y+62, r25	; 0x3e
    363a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363c:	8d ad       	ldd	r24, Y+61	; 0x3d
    363e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	69 f7       	brne	.-38     	; 0x361e <PindPong_voidBackward_Move+0x40c>
    3644:	16 c0       	rjmp	.+44     	; 0x3672 <PindPong_voidBackward_Move+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3646:	fe 01       	movw	r30, r28
    3648:	ff 96       	adiw	r30, 0x3f	; 63
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	9e af       	std	Y+62, r25	; 0x3e
    365c:	8d af       	std	Y+61, r24	; 0x3d
    365e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3660:	9e ad       	ldd	r25, Y+62	; 0x3e
    3662:	9a af       	std	Y+58, r25	; 0x3a
    3664:	89 af       	std	Y+57, r24	; 0x39
    3666:	89 ad       	ldd	r24, Y+57	; 0x39
    3668:	9a ad       	ldd	r25, Y+58	; 0x3a
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	f1 f7       	brne	.-4      	; 0x366a <PindPong_voidBackward_Move+0x458>
    366e:	9a af       	std	Y+58, r25	; 0x3a
    3670:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);

	ClearXY(3,10);
    3672:	83 e0       	ldi	r24, 0x03	; 3
    3674:	6a e0       	ldi	r22, 0x0A	; 10
    3676:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    367a:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    367e:	80 91 e8 01 	lds	r24, 0x01E8
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    3688:	80 91 e9 01 	lds	r24, 0x01E9
    368c:	63 e1       	ldi	r22, 0x13	; 19
    368e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(1,7);
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	67 e0       	ldi	r22, 0x07	; 7
    3696:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a8 ec       	ldi	r26, 0xC8	; 200
    36a0:	b2 e4       	ldi	r27, 0x42	; 66
    36a2:	8d ab       	std	Y+53, r24	; 0x35
    36a4:	9e ab       	std	Y+54, r25	; 0x36
    36a6:	af ab       	std	Y+55, r26	; 0x37
    36a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36aa:	6d a9       	ldd	r22, Y+53	; 0x35
    36ac:	7e a9       	ldd	r23, Y+54	; 0x36
    36ae:	8f a9       	ldd	r24, Y+55	; 0x37
    36b0:	98 ad       	ldd	r25, Y+56	; 0x38
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	4a ef       	ldi	r20, 0xFA	; 250
    36b8:	54 e4       	ldi	r21, 0x44	; 68
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	89 ab       	std	Y+49, r24	; 0x31
    36c4:	9a ab       	std	Y+50, r25	; 0x32
    36c6:	ab ab       	std	Y+51, r26	; 0x33
    36c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36ca:	69 a9       	ldd	r22, Y+49	; 0x31
    36cc:	7a a9       	ldd	r23, Y+50	; 0x32
    36ce:	8b a9       	ldd	r24, Y+51	; 0x33
    36d0:	9c a9       	ldd	r25, Y+52	; 0x34
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	40 e8       	ldi	r20, 0x80	; 128
    36d8:	5f e3       	ldi	r21, 0x3F	; 63
    36da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36de:	88 23       	and	r24, r24
    36e0:	2c f4       	brge	.+10     	; 0x36ec <PindPong_voidBackward_Move+0x4da>
		__ticks = 1;
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	98 ab       	std	Y+48, r25	; 0x30
    36e8:	8f a7       	std	Y+47, r24	; 0x2f
    36ea:	3f c0       	rjmp	.+126    	; 0x376a <PindPong_voidBackward_Move+0x558>
	else if (__tmp > 65535)
    36ec:	69 a9       	ldd	r22, Y+49	; 0x31
    36ee:	7a a9       	ldd	r23, Y+50	; 0x32
    36f0:	8b a9       	ldd	r24, Y+51	; 0x33
    36f2:	9c a9       	ldd	r25, Y+52	; 0x34
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	3f ef       	ldi	r19, 0xFF	; 255
    36f8:	4f e7       	ldi	r20, 0x7F	; 127
    36fa:	57 e4       	ldi	r21, 0x47	; 71
    36fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3700:	18 16       	cp	r1, r24
    3702:	4c f5       	brge	.+82     	; 0x3756 <PindPong_voidBackward_Move+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3704:	6d a9       	ldd	r22, Y+53	; 0x35
    3706:	7e a9       	ldd	r23, Y+54	; 0x36
    3708:	8f a9       	ldd	r24, Y+55	; 0x37
    370a:	98 ad       	ldd	r25, Y+56	; 0x38
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e2       	ldi	r20, 0x20	; 32
    3712:	51 e4       	ldi	r21, 0x41	; 65
    3714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	bc 01       	movw	r22, r24
    371e:	cd 01       	movw	r24, r26
    3720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	98 ab       	std	Y+48, r25	; 0x30
    372a:	8f a7       	std	Y+47, r24	; 0x2f
    372c:	0f c0       	rjmp	.+30     	; 0x374c <PindPong_voidBackward_Move+0x53a>
    372e:	88 ec       	ldi	r24, 0xC8	; 200
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	9e a7       	std	Y+46, r25	; 0x2e
    3734:	8d a7       	std	Y+45, r24	; 0x2d
    3736:	8d a5       	ldd	r24, Y+45	; 0x2d
    3738:	9e a5       	ldd	r25, Y+46	; 0x2e
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <PindPong_voidBackward_Move+0x528>
    373e:	9e a7       	std	Y+46, r25	; 0x2e
    3740:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3742:	8f a5       	ldd	r24, Y+47	; 0x2f
    3744:	98 a9       	ldd	r25, Y+48	; 0x30
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	98 ab       	std	Y+48, r25	; 0x30
    374a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374c:	8f a5       	ldd	r24, Y+47	; 0x2f
    374e:	98 a9       	ldd	r25, Y+48	; 0x30
    3750:	00 97       	sbiw	r24, 0x00	; 0
    3752:	69 f7       	brne	.-38     	; 0x372e <PindPong_voidBackward_Move+0x51c>
    3754:	14 c0       	rjmp	.+40     	; 0x377e <PindPong_voidBackward_Move+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3756:	69 a9       	ldd	r22, Y+49	; 0x31
    3758:	7a a9       	ldd	r23, Y+50	; 0x32
    375a:	8b a9       	ldd	r24, Y+51	; 0x33
    375c:	9c a9       	ldd	r25, Y+52	; 0x34
    375e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	98 ab       	std	Y+48, r25	; 0x30
    3768:	8f a7       	std	Y+47, r24	; 0x2f
    376a:	8f a5       	ldd	r24, Y+47	; 0x2f
    376c:	98 a9       	ldd	r25, Y+48	; 0x30
    376e:	9c a7       	std	Y+44, r25	; 0x2c
    3770:	8b a7       	std	Y+43, r24	; 0x2b
    3772:	8b a5       	ldd	r24, Y+43	; 0x2b
    3774:	9c a5       	ldd	r25, Y+44	; 0x2c
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <PindPong_voidBackward_Move+0x564>
    377a:	9c a7       	std	Y+44, r25	; 0x2c
    377c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	ClearXY(1,7);
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	67 e0       	ldi	r22, 0x07	; 7
    3782:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    3786:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    378a:	80 91 e8 01 	lds	r24, 0x01E8
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    3794:	80 91 e9 01 	lds	r24, 0x01E9
    3798:	63 e1       	ldi	r22, 0x13	; 19
    379a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	DrawBallAtXY(3,4);
    379e:	83 e0       	ldi	r24, 0x03	; 3
    37a0:	64 e0       	ldi	r22, 0x04	; 4
    37a2:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a8 ec       	ldi	r26, 0xC8	; 200
    37ac:	b2 e4       	ldi	r27, 0x42	; 66
    37ae:	8f a3       	std	Y+39, r24	; 0x27
    37b0:	98 a7       	std	Y+40, r25	; 0x28
    37b2:	a9 a7       	std	Y+41, r26	; 0x29
    37b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b6:	6f a1       	ldd	r22, Y+39	; 0x27
    37b8:	78 a5       	ldd	r23, Y+40	; 0x28
    37ba:	89 a5       	ldd	r24, Y+41	; 0x29
    37bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4a ef       	ldi	r20, 0xFA	; 250
    37c4:	54 e4       	ldi	r21, 0x44	; 68
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	8b a3       	std	Y+35, r24	; 0x23
    37d0:	9c a3       	std	Y+36, r25	; 0x24
    37d2:	ad a3       	std	Y+37, r26	; 0x25
    37d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37d6:	6b a1       	ldd	r22, Y+35	; 0x23
    37d8:	7c a1       	ldd	r23, Y+36	; 0x24
    37da:	8d a1       	ldd	r24, Y+37	; 0x25
    37dc:	9e a1       	ldd	r25, Y+38	; 0x26
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e8       	ldi	r20, 0x80	; 128
    37e4:	5f e3       	ldi	r21, 0x3F	; 63
    37e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ea:	88 23       	and	r24, r24
    37ec:	2c f4       	brge	.+10     	; 0x37f8 <PindPong_voidBackward_Move+0x5e6>
		__ticks = 1;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9a a3       	std	Y+34, r25	; 0x22
    37f4:	89 a3       	std	Y+33, r24	; 0x21
    37f6:	3f c0       	rjmp	.+126    	; 0x3876 <PindPong_voidBackward_Move+0x664>
	else if (__tmp > 65535)
    37f8:	6b a1       	ldd	r22, Y+35	; 0x23
    37fa:	7c a1       	ldd	r23, Y+36	; 0x24
    37fc:	8d a1       	ldd	r24, Y+37	; 0x25
    37fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	3f ef       	ldi	r19, 0xFF	; 255
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	57 e4       	ldi	r21, 0x47	; 71
    3808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	4c f5       	brge	.+82     	; 0x3862 <PindPong_voidBackward_Move+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3810:	6f a1       	ldd	r22, Y+39	; 0x27
    3812:	78 a5       	ldd	r23, Y+40	; 0x28
    3814:	89 a5       	ldd	r24, Y+41	; 0x29
    3816:	9a a5       	ldd	r25, Y+42	; 0x2a
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e2       	ldi	r20, 0x20	; 32
    381e:	51 e4       	ldi	r21, 0x41	; 65
    3820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	9a a3       	std	Y+34, r25	; 0x22
    3836:	89 a3       	std	Y+33, r24	; 0x21
    3838:	0f c0       	rjmp	.+30     	; 0x3858 <PindPong_voidBackward_Move+0x646>
    383a:	88 ec       	ldi	r24, 0xC8	; 200
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	98 a3       	std	Y+32, r25	; 0x20
    3840:	8f 8f       	std	Y+31, r24	; 0x1f
    3842:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3844:	98 a1       	ldd	r25, Y+32	; 0x20
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <PindPong_voidBackward_Move+0x634>
    384a:	98 a3       	std	Y+32, r25	; 0x20
    384c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	89 a1       	ldd	r24, Y+33	; 0x21
    3850:	9a a1       	ldd	r25, Y+34	; 0x22
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	9a a3       	std	Y+34, r25	; 0x22
    3856:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	89 a1       	ldd	r24, Y+33	; 0x21
    385a:	9a a1       	ldd	r25, Y+34	; 0x22
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	69 f7       	brne	.-38     	; 0x383a <PindPong_voidBackward_Move+0x628>
    3860:	14 c0       	rjmp	.+40     	; 0x388a <PindPong_voidBackward_Move+0x678>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3862:	6b a1       	ldd	r22, Y+35	; 0x23
    3864:	7c a1       	ldd	r23, Y+36	; 0x24
    3866:	8d a1       	ldd	r24, Y+37	; 0x25
    3868:	9e a1       	ldd	r25, Y+38	; 0x26
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9a a3       	std	Y+34, r25	; 0x22
    3874:	89 a3       	std	Y+33, r24	; 0x21
    3876:	89 a1       	ldd	r24, Y+33	; 0x21
    3878:	9a a1       	ldd	r25, Y+34	; 0x22
    387a:	9e 8f       	std	Y+30, r25	; 0x1e
    387c:	8d 8f       	std	Y+29, r24	; 0x1d
    387e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3880:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <PindPong_voidBackward_Move+0x670>
    3886:	9e 8f       	std	Y+30, r25	; 0x1e
    3888:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	ClearXY(3,4);
    388a:	83 e0       	ldi	r24, 0x03	; 3
    388c:	64 e0       	ldi	r22, 0x04	; 4
    388e:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	UpdatePaddles();
    3892:	0e 94 36 14 	call	0x286c	; 0x286c <UpdatePaddles>
	DrawLeftPaddleAtXY(Paddle1_y,0);
    3896:	80 91 e8 01 	lds	r24, 0x01E8
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <DrawLeftPaddleAtXY>
	DrawRightPaddleAtXY(Paddle2_y,19);
    38a0:	80 91 e9 01 	lds	r24, 0x01E9
    38a4:	63 e1       	ldi	r22, 0x13	; 19
    38a6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <DrawRightPaddleAtXY>
	if(Paddle1_y != 1)
    38aa:	80 91 e8 01 	lds	r24, 0x01E8
    38ae:	81 30       	cpi	r24, 0x01	; 1
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <PindPong_voidBackward_Move+0x6a2>
    38b2:	8c c0       	rjmp	.+280    	; 0x39cc <PindPong_voidBackward_Move+0x7ba>
	{
		DrawBallAtXY(1,0);
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
		PLAYER2_Score ++;
    38bc:	80 91 44 02 	lds	r24, 0x0244
    38c0:	8f 5f       	subi	r24, 0xFF	; 255
    38c2:	80 93 44 02 	sts	0x0244, r24
		Update_Score();
    38c6:	0e 94 05 14 	call	0x280a	; 0x280a <Update_Score>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a8 ec       	ldi	r26, 0xC8	; 200
    38d0:	b2 e4       	ldi	r27, 0x42	; 66
    38d2:	89 8f       	std	Y+25, r24	; 0x19
    38d4:	9a 8f       	std	Y+26, r25	; 0x1a
    38d6:	ab 8f       	std	Y+27, r26	; 0x1b
    38d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38da:	69 8d       	ldd	r22, Y+25	; 0x19
    38dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	4a ef       	ldi	r20, 0xFA	; 250
    38e8:	54 e4       	ldi	r21, 0x44	; 68
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	8d 8b       	std	Y+21, r24	; 0x15
    38f4:	9e 8b       	std	Y+22, r25	; 0x16
    38f6:	af 8b       	std	Y+23, r26	; 0x17
    38f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    390e:	88 23       	and	r24, r24
    3910:	2c f4       	brge	.+10     	; 0x391c <PindPong_voidBackward_Move+0x70a>
		__ticks = 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c 8b       	std	Y+20, r25	; 0x14
    3918:	8b 8b       	std	Y+19, r24	; 0x13
    391a:	3f c0       	rjmp	.+126    	; 0x399a <PindPong_voidBackward_Move+0x788>
	else if (__tmp > 65535)
    391c:	6d 89       	ldd	r22, Y+21	; 0x15
    391e:	7e 89       	ldd	r23, Y+22	; 0x16
    3920:	8f 89       	ldd	r24, Y+23	; 0x17
    3922:	98 8d       	ldd	r25, Y+24	; 0x18
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	4f e7       	ldi	r20, 0x7F	; 127
    392a:	57 e4       	ldi	r21, 0x47	; 71
    392c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3930:	18 16       	cp	r1, r24
    3932:	4c f5       	brge	.+82     	; 0x3986 <PindPong_voidBackward_Move+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3934:	69 8d       	ldd	r22, Y+25	; 0x19
    3936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    393a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e2       	ldi	r20, 0x20	; 32
    3942:	51 e4       	ldi	r21, 0x41	; 65
    3944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9c 8b       	std	Y+20, r25	; 0x14
    395a:	8b 8b       	std	Y+19, r24	; 0x13
    395c:	0f c0       	rjmp	.+30     	; 0x397c <PindPong_voidBackward_Move+0x76a>
    395e:	88 ec       	ldi	r24, 0xC8	; 200
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9a 8b       	std	Y+18, r25	; 0x12
    3964:	89 8b       	std	Y+17, r24	; 0x11
    3966:	89 89       	ldd	r24, Y+17	; 0x11
    3968:	9a 89       	ldd	r25, Y+18	; 0x12
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	f1 f7       	brne	.-4      	; 0x396a <PindPong_voidBackward_Move+0x758>
    396e:	9a 8b       	std	Y+18, r25	; 0x12
    3970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3972:	8b 89       	ldd	r24, Y+19	; 0x13
    3974:	9c 89       	ldd	r25, Y+20	; 0x14
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	69 f7       	brne	.-38     	; 0x395e <PindPong_voidBackward_Move+0x74c>
    3984:	14 c0       	rjmp	.+40     	; 0x39ae <PindPong_voidBackward_Move+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3986:	6d 89       	ldd	r22, Y+21	; 0x15
    3988:	7e 89       	ldd	r23, Y+22	; 0x16
    398a:	8f 89       	ldd	r24, Y+23	; 0x17
    398c:	98 8d       	ldd	r25, Y+24	; 0x18
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	9c 8b       	std	Y+20, r25	; 0x14
    3998:	8b 8b       	std	Y+19, r24	; 0x13
    399a:	8b 89       	ldd	r24, Y+19	; 0x13
    399c:	9c 89       	ldd	r25, Y+20	; 0x14
    399e:	98 8b       	std	Y+16, r25	; 0x10
    39a0:	8f 87       	std	Y+15, r24	; 0x0f
    39a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a4:	98 89       	ldd	r25, Y+16	; 0x10
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <PindPong_voidBackward_Move+0x794>
    39aa:	98 8b       	std	Y+16, r25	; 0x10
    39ac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		if(PLAYER2_Score == 3)
    39ae:	80 91 44 02 	lds	r24, 0x0244
    39b2:	83 30       	cpi	r24, 0x03	; 3
    39b4:	31 f4       	brne	.+12     	; 0x39c2 <PindPong_voidBackward_Move+0x7b0>
		{
			Khaled_Celebrate();
    39b6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <Khaled_Celebrate>
			exit(0);
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	0e 94 8b 20 	call	0x4116	; 0x4116 <_exit>
		}
		ClearXY(1,0);
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	60 e0       	ldi	r22, 0x00	; 0
    39c6:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
    39ca:	7a c0       	rjmp	.+244    	; 0x3ac0 <PindPong_voidBackward_Move+0x8ae>

	}
	else
	{
		DrawBallAtXY(1,1);
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	61 e0       	ldi	r22, 0x01	; 1
    39d0:	0e 94 b6 13 	call	0x276c	; 0x276c <DrawBallAtXY>
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	a8 ec       	ldi	r26, 0xC8	; 200
    39da:	b2 e4       	ldi	r27, 0x42	; 66
    39dc:	8b 87       	std	Y+11, r24	; 0x0b
    39de:	9c 87       	std	Y+12, r25	; 0x0c
    39e0:	ad 87       	std	Y+13, r26	; 0x0d
    39e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	4a ef       	ldi	r20, 0xFA	; 250
    39f2:	54 e4       	ldi	r21, 0x44	; 68
    39f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	8f 83       	std	Y+7, r24	; 0x07
    39fe:	98 87       	std	Y+8, r25	; 0x08
    3a00:	a9 87       	std	Y+9, r26	; 0x09
    3a02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a04:	6f 81       	ldd	r22, Y+7	; 0x07
    3a06:	78 85       	ldd	r23, Y+8	; 0x08
    3a08:	89 85       	ldd	r24, Y+9	; 0x09
    3a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e8       	ldi	r20, 0x80	; 128
    3a12:	5f e3       	ldi	r21, 0x3F	; 63
    3a14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a18:	88 23       	and	r24, r24
    3a1a:	2c f4       	brge	.+10     	; 0x3a26 <PindPong_voidBackward_Move+0x814>
		__ticks = 1;
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	3f c0       	rjmp	.+126    	; 0x3aa4 <PindPong_voidBackward_Move+0x892>
	else if (__tmp > 65535)
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	3f ef       	ldi	r19, 0xFF	; 255
    3a32:	4f e7       	ldi	r20, 0x7F	; 127
    3a34:	57 e4       	ldi	r21, 0x47	; 71
    3a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	4c f5       	brge	.+82     	; 0x3a90 <PindPong_voidBackward_Move+0x87e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e2       	ldi	r20, 0x20	; 32
    3a4c:	51 e4       	ldi	r21, 0x41	; 65
    3a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	0f c0       	rjmp	.+30     	; 0x3a86 <PindPong_voidBackward_Move+0x874>
    3a68:	88 ec       	ldi	r24, 0xC8	; 200
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	9c 81       	ldd	r25, Y+4	; 0x04
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <PindPong_voidBackward_Move+0x862>
    3a78:	9c 83       	std	Y+4, r25	; 0x04
    3a7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
    3a88:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	69 f7       	brne	.-38     	; 0x3a68 <PindPong_voidBackward_Move+0x856>
    3a8e:	14 c0       	rjmp	.+40     	; 0x3ab8 <PindPong_voidBackward_Move+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a90:	6f 81       	ldd	r22, Y+7	; 0x07
    3a92:	78 85       	ldd	r23, Y+8	; 0x08
    3a94:	89 85       	ldd	r24, Y+9	; 0x09
    3a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <PindPong_voidBackward_Move+0x89e>
    3ab4:	9a 83       	std	Y+2, r25	; 0x02
    3ab6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		ClearXY(1,1);
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	61 e0       	ldi	r22, 0x01	; 1
    3abc:	0e 94 ca 13 	call	0x2794	; 0x2794 <ClearXY>
	}
}
    3ac0:	ce 59       	subi	r28, 0x9E	; 158
    3ac2:	df 4f       	sbci	r29, 0xFF	; 255
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	cf 91       	pop	r28
    3ad0:	df 91       	pop	r29
    3ad2:	1f 91       	pop	r17
    3ad4:	0f 91       	pop	r16
    3ad6:	08 95       	ret

00003ad8 <Harb_Celebrate>:



void Harb_Celebrate()
{
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	cd b7       	in	r28, 0x3d	; 61
    3ade:	de b7       	in	r29, 0x3e	; 62
    3ae0:	2e 97       	sbiw	r28, 0x0e	; 14
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    3aec:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>
	LCD_voidGoToXY(1,3);
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	63 e0       	ldi	r22, 0x03	; 3
    3af4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>

	LCD_voidWriteString("Harb wins !!!");
    3af8:	82 ec       	ldi	r24, 0xC2	; 194
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidWriteCustomCharacter(3, Harb, 2, 8);
    3b00:	22 e0       	ldi	r18, 0x02	; 2
    3b02:	32 e0       	ldi	r19, 0x02	; 2
    3b04:	83 e0       	ldi	r24, 0x03	; 3
    3b06:	b9 01       	movw	r22, r18
    3b08:	42 e0       	ldi	r20, 0x02	; 2
    3b0a:	28 e0       	ldi	r18, 0x08	; 8
    3b0c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb, 2, 9);
    3b10:	22 e0       	ldi	r18, 0x02	; 2
    3b12:	32 e0       	ldi	r19, 0x02	; 2
    3b14:	83 e0       	ldi	r24, 0x03	; 3
    3b16:	b9 01       	movw	r22, r18
    3b18:	42 e0       	ldi	r20, 0x02	; 2
    3b1a:	29 e0       	ldi	r18, 0x09	; 9
    3b1c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb, 2, 10);
    3b20:	22 e0       	ldi	r18, 0x02	; 2
    3b22:	32 e0       	ldi	r19, 0x02	; 2
    3b24:	83 e0       	ldi	r24, 0x03	; 3
    3b26:	b9 01       	movw	r22, r18
    3b28:	42 e0       	ldi	r20, 0x02	; 2
    3b2a:	2a e0       	ldi	r18, 0x0A	; 10
    3b2c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(3, Harb1, 2, 8);
    3b30:	2a e0       	ldi	r18, 0x0A	; 10
    3b32:	32 e0       	ldi	r19, 0x02	; 2
    3b34:	83 e0       	ldi	r24, 0x03	; 3
    3b36:	b9 01       	movw	r22, r18
    3b38:	42 e0       	ldi	r20, 0x02	; 2
    3b3a:	28 e0       	ldi	r18, 0x08	; 8
    3b3c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb1, 2, 9);
    3b40:	2a e0       	ldi	r18, 0x0A	; 10
    3b42:	32 e0       	ldi	r19, 0x02	; 2
    3b44:	83 e0       	ldi	r24, 0x03	; 3
    3b46:	b9 01       	movw	r22, r18
    3b48:	42 e0       	ldi	r20, 0x02	; 2
    3b4a:	29 e0       	ldi	r18, 0x09	; 9
    3b4c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb1, 2, 10);
    3b50:	2a e0       	ldi	r18, 0x0A	; 10
    3b52:	32 e0       	ldi	r19, 0x02	; 2
    3b54:	83 e0       	ldi	r24, 0x03	; 3
    3b56:	b9 01       	movw	r22, r18
    3b58:	42 e0       	ldi	r20, 0x02	; 2
    3b5a:	2a e0       	ldi	r18, 0x0A	; 10
    3b5c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(3, Harb2, 2, 8);
    3b60:	22 e1       	ldi	r18, 0x12	; 18
    3b62:	32 e0       	ldi	r19, 0x02	; 2
    3b64:	83 e0       	ldi	r24, 0x03	; 3
    3b66:	b9 01       	movw	r22, r18
    3b68:	42 e0       	ldi	r20, 0x02	; 2
    3b6a:	28 e0       	ldi	r18, 0x08	; 8
    3b6c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb2, 2, 9);
    3b70:	22 e1       	ldi	r18, 0x12	; 18
    3b72:	32 e0       	ldi	r19, 0x02	; 2
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	b9 01       	movw	r22, r18
    3b78:	42 e0       	ldi	r20, 0x02	; 2
    3b7a:	29 e0       	ldi	r18, 0x09	; 9
    3b7c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb2, 2, 10);
    3b80:	22 e1       	ldi	r18, 0x12	; 18
    3b82:	32 e0       	ldi	r19, 0x02	; 2
    3b84:	83 e0       	ldi	r24, 0x03	; 3
    3b86:	b9 01       	movw	r22, r18
    3b88:	42 e0       	ldi	r20, 0x02	; 2
    3b8a:	2a e0       	ldi	r18, 0x0A	; 10
    3b8c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(3, Harb3, 2, 8);
    3b90:	2a e1       	ldi	r18, 0x1A	; 26
    3b92:	32 e0       	ldi	r19, 0x02	; 2
    3b94:	83 e0       	ldi	r24, 0x03	; 3
    3b96:	b9 01       	movw	r22, r18
    3b98:	42 e0       	ldi	r20, 0x02	; 2
    3b9a:	28 e0       	ldi	r18, 0x08	; 8
    3b9c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb3, 2, 9);
    3ba0:	2a e1       	ldi	r18, 0x1A	; 26
    3ba2:	32 e0       	ldi	r19, 0x02	; 2
    3ba4:	83 e0       	ldi	r24, 0x03	; 3
    3ba6:	b9 01       	movw	r22, r18
    3ba8:	42 e0       	ldi	r20, 0x02	; 2
    3baa:	29 e0       	ldi	r18, 0x09	; 9
    3bac:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb3, 2, 10);
    3bb0:	2a e1       	ldi	r18, 0x1A	; 26
    3bb2:	32 e0       	ldi	r19, 0x02	; 2
    3bb4:	83 e0       	ldi	r24, 0x03	; 3
    3bb6:	b9 01       	movw	r22, r18
    3bb8:	42 e0       	ldi	r20, 0x02	; 2
    3bba:	2a e0       	ldi	r18, 0x0A	; 10
    3bbc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	/*Repeat -----------------------------------------*/
	LCD_voidWriteCustomCharacter(3, Harb, 2, 8);
    3bc0:	22 e0       	ldi	r18, 0x02	; 2
    3bc2:	32 e0       	ldi	r19, 0x02	; 2
    3bc4:	83 e0       	ldi	r24, 0x03	; 3
    3bc6:	b9 01       	movw	r22, r18
    3bc8:	42 e0       	ldi	r20, 0x02	; 2
    3bca:	28 e0       	ldi	r18, 0x08	; 8
    3bcc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb, 2, 9);
    3bd0:	22 e0       	ldi	r18, 0x02	; 2
    3bd2:	32 e0       	ldi	r19, 0x02	; 2
    3bd4:	83 e0       	ldi	r24, 0x03	; 3
    3bd6:	b9 01       	movw	r22, r18
    3bd8:	42 e0       	ldi	r20, 0x02	; 2
    3bda:	29 e0       	ldi	r18, 0x09	; 9
    3bdc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb, 2, 10);
    3be0:	22 e0       	ldi	r18, 0x02	; 2
    3be2:	32 e0       	ldi	r19, 0x02	; 2
    3be4:	83 e0       	ldi	r24, 0x03	; 3
    3be6:	b9 01       	movw	r22, r18
    3be8:	42 e0       	ldi	r20, 0x02	; 2
    3bea:	2a e0       	ldi	r18, 0x0A	; 10
    3bec:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(3, Harb1, 2, 8);
    3bf0:	2a e0       	ldi	r18, 0x0A	; 10
    3bf2:	32 e0       	ldi	r19, 0x02	; 2
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	b9 01       	movw	r22, r18
    3bf8:	42 e0       	ldi	r20, 0x02	; 2
    3bfa:	28 e0       	ldi	r18, 0x08	; 8
    3bfc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb1, 2, 9);
    3c00:	2a e0       	ldi	r18, 0x0A	; 10
    3c02:	32 e0       	ldi	r19, 0x02	; 2
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	b9 01       	movw	r22, r18
    3c08:	42 e0       	ldi	r20, 0x02	; 2
    3c0a:	29 e0       	ldi	r18, 0x09	; 9
    3c0c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb1, 2, 10);
    3c10:	2a e0       	ldi	r18, 0x0A	; 10
    3c12:	32 e0       	ldi	r19, 0x02	; 2
    3c14:	83 e0       	ldi	r24, 0x03	; 3
    3c16:	b9 01       	movw	r22, r18
    3c18:	42 e0       	ldi	r20, 0x02	; 2
    3c1a:	2a e0       	ldi	r18, 0x0A	; 10
    3c1c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(3, Harb2, 2, 8);
    3c20:	22 e1       	ldi	r18, 0x12	; 18
    3c22:	32 e0       	ldi	r19, 0x02	; 2
    3c24:	83 e0       	ldi	r24, 0x03	; 3
    3c26:	b9 01       	movw	r22, r18
    3c28:	42 e0       	ldi	r20, 0x02	; 2
    3c2a:	28 e0       	ldi	r18, 0x08	; 8
    3c2c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb2, 2, 9);
    3c30:	22 e1       	ldi	r18, 0x12	; 18
    3c32:	32 e0       	ldi	r19, 0x02	; 2
    3c34:	83 e0       	ldi	r24, 0x03	; 3
    3c36:	b9 01       	movw	r22, r18
    3c38:	42 e0       	ldi	r20, 0x02	; 2
    3c3a:	29 e0       	ldi	r18, 0x09	; 9
    3c3c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb2, 2, 10);
    3c40:	22 e1       	ldi	r18, 0x12	; 18
    3c42:	32 e0       	ldi	r19, 0x02	; 2
    3c44:	83 e0       	ldi	r24, 0x03	; 3
    3c46:	b9 01       	movw	r22, r18
    3c48:	42 e0       	ldi	r20, 0x02	; 2
    3c4a:	2a e0       	ldi	r18, 0x0A	; 10
    3c4c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(3, Harb3, 2, 8);
    3c50:	2a e1       	ldi	r18, 0x1A	; 26
    3c52:	32 e0       	ldi	r19, 0x02	; 2
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	b9 01       	movw	r22, r18
    3c58:	42 e0       	ldi	r20, 0x02	; 2
    3c5a:	28 e0       	ldi	r18, 0x08	; 8
    3c5c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb3, 2, 9);
    3c60:	2a e1       	ldi	r18, 0x1A	; 26
    3c62:	32 e0       	ldi	r19, 0x02	; 2
    3c64:	83 e0       	ldi	r24, 0x03	; 3
    3c66:	b9 01       	movw	r22, r18
    3c68:	42 e0       	ldi	r20, 0x02	; 2
    3c6a:	29 e0       	ldi	r18, 0x09	; 9
    3c6c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, Harb3, 2, 10);
    3c70:	2a e1       	ldi	r18, 0x1A	; 26
    3c72:	32 e0       	ldi	r19, 0x02	; 2
    3c74:	83 e0       	ldi	r24, 0x03	; 3
    3c76:	b9 01       	movw	r22, r18
    3c78:	42 e0       	ldi	r20, 0x02	; 2
    3c7a:	2a e0       	ldi	r18, 0x0A	; 10
    3c7c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	aa ef       	ldi	r26, 0xFA	; 250
    3c86:	b3 e4       	ldi	r27, 0x43	; 67
    3c88:	8b 87       	std	Y+11, r24	; 0x0b
    3c8a:	9c 87       	std	Y+12, r25	; 0x0c
    3c8c:	ad 87       	std	Y+13, r26	; 0x0d
    3c8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	4a ef       	ldi	r20, 0xFA	; 250
    3c9e:	54 e4       	ldi	r21, 0x44	; 68
    3ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	8f 83       	std	Y+7, r24	; 0x07
    3caa:	98 87       	std	Y+8, r25	; 0x08
    3cac:	a9 87       	std	Y+9, r26	; 0x09
    3cae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb2:	78 85       	ldd	r23, Y+8	; 0x08
    3cb4:	89 85       	ldd	r24, Y+9	; 0x09
    3cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e8       	ldi	r20, 0x80	; 128
    3cbe:	5f e3       	ldi	r21, 0x3F	; 63
    3cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc4:	88 23       	and	r24, r24
    3cc6:	2c f4       	brge	.+10     	; 0x3cd2 <Harb_Celebrate+0x1fa>
		__ticks = 1;
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	9e 83       	std	Y+6, r25	; 0x06
    3cce:	8d 83       	std	Y+5, r24	; 0x05
    3cd0:	3f c0       	rjmp	.+126    	; 0x3d50 <Harb_Celebrate+0x278>
	else if (__tmp > 65535)
    3cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd4:	78 85       	ldd	r23, Y+8	; 0x08
    3cd6:	89 85       	ldd	r24, Y+9	; 0x09
    3cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	3f ef       	ldi	r19, 0xFF	; 255
    3cde:	4f e7       	ldi	r20, 0x7F	; 127
    3ce0:	57 e4       	ldi	r21, 0x47	; 71
    3ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ce6:	18 16       	cp	r1, r24
    3ce8:	4c f5       	brge	.+82     	; 0x3d3c <Harb_Celebrate+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e2       	ldi	r20, 0x20	; 32
    3cf8:	51 e4       	ldi	r21, 0x41	; 65
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	bc 01       	movw	r22, r24
    3d04:	cd 01       	movw	r24, r26
    3d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	9e 83       	std	Y+6, r25	; 0x06
    3d10:	8d 83       	std	Y+5, r24	; 0x05
    3d12:	0f c0       	rjmp	.+30     	; 0x3d32 <Harb_Celebrate+0x25a>
    3d14:	88 ec       	ldi	r24, 0xC8	; 200
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9c 83       	std	Y+4, r25	; 0x04
    3d1a:	8b 83       	std	Y+3, r24	; 0x03
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <Harb_Celebrate+0x248>
    3d24:	9c 83       	std	Y+4, r25	; 0x04
    3d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d28:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	9e 83       	std	Y+6, r25	; 0x06
    3d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d32:	8d 81       	ldd	r24, Y+5	; 0x05
    3d34:	9e 81       	ldd	r25, Y+6	; 0x06
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	69 f7       	brne	.-38     	; 0x3d14 <Harb_Celebrate+0x23c>
    3d3a:	14 c0       	rjmp	.+40     	; 0x3d64 <Harb_Celebrate+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3e:	78 85       	ldd	r23, Y+8	; 0x08
    3d40:	89 85       	ldd	r24, Y+9	; 0x09
    3d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	9e 83       	std	Y+6, r25	; 0x06
    3d4e:	8d 83       	std	Y+5, r24	; 0x05
    3d50:	8d 81       	ldd	r24, Y+5	; 0x05
    3d52:	9e 81       	ldd	r25, Y+6	; 0x06
    3d54:	9a 83       	std	Y+2, r25	; 0x02
    3d56:	89 83       	std	Y+1, r24	; 0x01
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <Harb_Celebrate+0x284>
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);
}
    3d64:	2e 96       	adiw	r28, 0x0e	; 14
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	cf 91       	pop	r28
    3d72:	df 91       	pop	r29
    3d74:	08 95       	ret

00003d76 <Khaled_Celebrate>:

void Khaled_Celebrate()
{
    3d76:	df 93       	push	r29
    3d78:	cf 93       	push	r28
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	2e 97       	sbiw	r28, 0x0e	; 14
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    3d8a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>
	LCD_voidGoToXY(1,3);
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	63 e0       	ldi	r22, 0x03	; 3
    3d92:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>

	LCD_voidWriteString("Khaled wins !!!");
    3d96:	80 ed       	ldi	r24, 0xD0	; 208
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 8);
    3d9e:	22 e2       	ldi	r18, 0x22	; 34
    3da0:	32 e0       	ldi	r19, 0x02	; 2
    3da2:	84 e0       	ldi	r24, 0x04	; 4
    3da4:	b9 01       	movw	r22, r18
    3da6:	42 e0       	ldi	r20, 0x02	; 2
    3da8:	28 e0       	ldi	r18, 0x08	; 8
    3daa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 9);
    3dae:	22 e2       	ldi	r18, 0x22	; 34
    3db0:	32 e0       	ldi	r19, 0x02	; 2
    3db2:	84 e0       	ldi	r24, 0x04	; 4
    3db4:	b9 01       	movw	r22, r18
    3db6:	42 e0       	ldi	r20, 0x02	; 2
    3db8:	29 e0       	ldi	r18, 0x09	; 9
    3dba:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 10);
    3dbe:	22 e2       	ldi	r18, 0x22	; 34
    3dc0:	32 e0       	ldi	r19, 0x02	; 2
    3dc2:	84 e0       	ldi	r24, 0x04	; 4
    3dc4:	b9 01       	movw	r22, r18
    3dc6:	42 e0       	ldi	r20, 0x02	; 2
    3dc8:	2a e0       	ldi	r18, 0x0A	; 10
    3dca:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(4, Khaled1, 2, 8);
    3dce:	2a e2       	ldi	r18, 0x2A	; 42
    3dd0:	32 e0       	ldi	r19, 0x02	; 2
    3dd2:	84 e0       	ldi	r24, 0x04	; 4
    3dd4:	b9 01       	movw	r22, r18
    3dd6:	42 e0       	ldi	r20, 0x02	; 2
    3dd8:	28 e0       	ldi	r18, 0x08	; 8
    3dda:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled1, 2, 9);
    3dde:	2a e2       	ldi	r18, 0x2A	; 42
    3de0:	32 e0       	ldi	r19, 0x02	; 2
    3de2:	84 e0       	ldi	r24, 0x04	; 4
    3de4:	b9 01       	movw	r22, r18
    3de6:	42 e0       	ldi	r20, 0x02	; 2
    3de8:	29 e0       	ldi	r18, 0x09	; 9
    3dea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled1, 2, 10);
    3dee:	2a e2       	ldi	r18, 0x2A	; 42
    3df0:	32 e0       	ldi	r19, 0x02	; 2
    3df2:	84 e0       	ldi	r24, 0x04	; 4
    3df4:	b9 01       	movw	r22, r18
    3df6:	42 e0       	ldi	r20, 0x02	; 2
    3df8:	2a e0       	ldi	r18, 0x0A	; 10
    3dfa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(4, Khaled2, 2, 8);
    3dfe:	22 e3       	ldi	r18, 0x32	; 50
    3e00:	32 e0       	ldi	r19, 0x02	; 2
    3e02:	84 e0       	ldi	r24, 0x04	; 4
    3e04:	b9 01       	movw	r22, r18
    3e06:	42 e0       	ldi	r20, 0x02	; 2
    3e08:	28 e0       	ldi	r18, 0x08	; 8
    3e0a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled2, 2, 9);
    3e0e:	22 e3       	ldi	r18, 0x32	; 50
    3e10:	32 e0       	ldi	r19, 0x02	; 2
    3e12:	84 e0       	ldi	r24, 0x04	; 4
    3e14:	b9 01       	movw	r22, r18
    3e16:	42 e0       	ldi	r20, 0x02	; 2
    3e18:	29 e0       	ldi	r18, 0x09	; 9
    3e1a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled2, 2, 10);
    3e1e:	22 e3       	ldi	r18, 0x32	; 50
    3e20:	32 e0       	ldi	r19, 0x02	; 2
    3e22:	84 e0       	ldi	r24, 0x04	; 4
    3e24:	b9 01       	movw	r22, r18
    3e26:	42 e0       	ldi	r20, 0x02	; 2
    3e28:	2a e0       	ldi	r18, 0x0A	; 10
    3e2a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(4, Khaled3, 2, 8);
    3e2e:	2a e3       	ldi	r18, 0x3A	; 58
    3e30:	32 e0       	ldi	r19, 0x02	; 2
    3e32:	84 e0       	ldi	r24, 0x04	; 4
    3e34:	b9 01       	movw	r22, r18
    3e36:	42 e0       	ldi	r20, 0x02	; 2
    3e38:	28 e0       	ldi	r18, 0x08	; 8
    3e3a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled3, 2, 9);
    3e3e:	2a e3       	ldi	r18, 0x3A	; 58
    3e40:	32 e0       	ldi	r19, 0x02	; 2
    3e42:	84 e0       	ldi	r24, 0x04	; 4
    3e44:	b9 01       	movw	r22, r18
    3e46:	42 e0       	ldi	r20, 0x02	; 2
    3e48:	29 e0       	ldi	r18, 0x09	; 9
    3e4a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled3, 2, 10);
    3e4e:	2a e3       	ldi	r18, 0x3A	; 58
    3e50:	32 e0       	ldi	r19, 0x02	; 2
    3e52:	84 e0       	ldi	r24, 0x04	; 4
    3e54:	b9 01       	movw	r22, r18
    3e56:	42 e0       	ldi	r20, 0x02	; 2
    3e58:	2a e0       	ldi	r18, 0x0A	; 10
    3e5a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	/*Repeat -----------------------------------------*/
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 8);
    3e5e:	22 e2       	ldi	r18, 0x22	; 34
    3e60:	32 e0       	ldi	r19, 0x02	; 2
    3e62:	84 e0       	ldi	r24, 0x04	; 4
    3e64:	b9 01       	movw	r22, r18
    3e66:	42 e0       	ldi	r20, 0x02	; 2
    3e68:	28 e0       	ldi	r18, 0x08	; 8
    3e6a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 9);
    3e6e:	22 e2       	ldi	r18, 0x22	; 34
    3e70:	32 e0       	ldi	r19, 0x02	; 2
    3e72:	84 e0       	ldi	r24, 0x04	; 4
    3e74:	b9 01       	movw	r22, r18
    3e76:	42 e0       	ldi	r20, 0x02	; 2
    3e78:	29 e0       	ldi	r18, 0x09	; 9
    3e7a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled, 2, 10);
    3e7e:	22 e2       	ldi	r18, 0x22	; 34
    3e80:	32 e0       	ldi	r19, 0x02	; 2
    3e82:	84 e0       	ldi	r24, 0x04	; 4
    3e84:	b9 01       	movw	r22, r18
    3e86:	42 e0       	ldi	r20, 0x02	; 2
    3e88:	2a e0       	ldi	r18, 0x0A	; 10
    3e8a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(4, Khaled1, 2, 8);
    3e8e:	2a e2       	ldi	r18, 0x2A	; 42
    3e90:	32 e0       	ldi	r19, 0x02	; 2
    3e92:	84 e0       	ldi	r24, 0x04	; 4
    3e94:	b9 01       	movw	r22, r18
    3e96:	42 e0       	ldi	r20, 0x02	; 2
    3e98:	28 e0       	ldi	r18, 0x08	; 8
    3e9a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled1, 2, 9);
    3e9e:	2a e2       	ldi	r18, 0x2A	; 42
    3ea0:	32 e0       	ldi	r19, 0x02	; 2
    3ea2:	84 e0       	ldi	r24, 0x04	; 4
    3ea4:	b9 01       	movw	r22, r18
    3ea6:	42 e0       	ldi	r20, 0x02	; 2
    3ea8:	29 e0       	ldi	r18, 0x09	; 9
    3eaa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled1, 2, 10);
    3eae:	2a e2       	ldi	r18, 0x2A	; 42
    3eb0:	32 e0       	ldi	r19, 0x02	; 2
    3eb2:	84 e0       	ldi	r24, 0x04	; 4
    3eb4:	b9 01       	movw	r22, r18
    3eb6:	42 e0       	ldi	r20, 0x02	; 2
    3eb8:	2a e0       	ldi	r18, 0x0A	; 10
    3eba:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(4, Khaled2, 2, 8);
    3ebe:	22 e3       	ldi	r18, 0x32	; 50
    3ec0:	32 e0       	ldi	r19, 0x02	; 2
    3ec2:	84 e0       	ldi	r24, 0x04	; 4
    3ec4:	b9 01       	movw	r22, r18
    3ec6:	42 e0       	ldi	r20, 0x02	; 2
    3ec8:	28 e0       	ldi	r18, 0x08	; 8
    3eca:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled2, 2, 9);
    3ece:	22 e3       	ldi	r18, 0x32	; 50
    3ed0:	32 e0       	ldi	r19, 0x02	; 2
    3ed2:	84 e0       	ldi	r24, 0x04	; 4
    3ed4:	b9 01       	movw	r22, r18
    3ed6:	42 e0       	ldi	r20, 0x02	; 2
    3ed8:	29 e0       	ldi	r18, 0x09	; 9
    3eda:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled2, 2, 10);
    3ede:	22 e3       	ldi	r18, 0x32	; 50
    3ee0:	32 e0       	ldi	r19, 0x02	; 2
    3ee2:	84 e0       	ldi	r24, 0x04	; 4
    3ee4:	b9 01       	movw	r22, r18
    3ee6:	42 e0       	ldi	r20, 0x02	; 2
    3ee8:	2a e0       	ldi	r18, 0x0A	; 10
    3eea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>

	LCD_voidWriteCustomCharacter(4, Khaled3, 2, 8);
    3eee:	2a e3       	ldi	r18, 0x3A	; 58
    3ef0:	32 e0       	ldi	r19, 0x02	; 2
    3ef2:	84 e0       	ldi	r24, 0x04	; 4
    3ef4:	b9 01       	movw	r22, r18
    3ef6:	42 e0       	ldi	r20, 0x02	; 2
    3ef8:	28 e0       	ldi	r18, 0x08	; 8
    3efa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled3, 2, 9);
    3efe:	2a e3       	ldi	r18, 0x3A	; 58
    3f00:	32 e0       	ldi	r19, 0x02	; 2
    3f02:	84 e0       	ldi	r24, 0x04	; 4
    3f04:	b9 01       	movw	r22, r18
    3f06:	42 e0       	ldi	r20, 0x02	; 2
    3f08:	29 e0       	ldi	r18, 0x09	; 9
    3f0a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(4, Khaled3, 2, 10);
    3f0e:	2a e3       	ldi	r18, 0x3A	; 58
    3f10:	32 e0       	ldi	r19, 0x02	; 2
    3f12:	84 e0       	ldi	r24, 0x04	; 4
    3f14:	b9 01       	movw	r22, r18
    3f16:	42 e0       	ldi	r20, 0x02	; 2
    3f18:	2a e0       	ldi	r18, 0x0A	; 10
    3f1a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	aa ef       	ldi	r26, 0xFA	; 250
    3f24:	b3 e4       	ldi	r27, 0x43	; 67
    3f26:	8b 87       	std	Y+11, r24	; 0x0b
    3f28:	9c 87       	std	Y+12, r25	; 0x0c
    3f2a:	ad 87       	std	Y+13, r26	; 0x0d
    3f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	4a ef       	ldi	r20, 0xFA	; 250
    3f3c:	54 e4       	ldi	r21, 0x44	; 68
    3f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	8f 83       	std	Y+7, r24	; 0x07
    3f48:	98 87       	std	Y+8, r25	; 0x08
    3f4a:	a9 87       	std	Y+9, r26	; 0x09
    3f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f50:	78 85       	ldd	r23, Y+8	; 0x08
    3f52:	89 85       	ldd	r24, Y+9	; 0x09
    3f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e8       	ldi	r20, 0x80	; 128
    3f5c:	5f e3       	ldi	r21, 0x3F	; 63
    3f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f62:	88 23       	and	r24, r24
    3f64:	2c f4       	brge	.+10     	; 0x3f70 <Khaled_Celebrate+0x1fa>
		__ticks = 1;
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
    3f6e:	3f c0       	rjmp	.+126    	; 0x3fee <Khaled_Celebrate+0x278>
	else if (__tmp > 65535)
    3f70:	6f 81       	ldd	r22, Y+7	; 0x07
    3f72:	78 85       	ldd	r23, Y+8	; 0x08
    3f74:	89 85       	ldd	r24, Y+9	; 0x09
    3f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	3f ef       	ldi	r19, 0xFF	; 255
    3f7c:	4f e7       	ldi	r20, 0x7F	; 127
    3f7e:	57 e4       	ldi	r21, 0x47	; 71
    3f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f84:	18 16       	cp	r1, r24
    3f86:	4c f5       	brge	.+82     	; 0x3fda <Khaled_Celebrate+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e2       	ldi	r20, 0x20	; 32
    3f96:	51 e4       	ldi	r21, 0x41	; 65
    3f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	bc 01       	movw	r22, r24
    3fa2:	cd 01       	movw	r24, r26
    3fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	8d 83       	std	Y+5, r24	; 0x05
    3fb0:	0f c0       	rjmp	.+30     	; 0x3fd0 <Khaled_Celebrate+0x25a>
    3fb2:	88 ec       	ldi	r24, 0xC8	; 200
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	9c 83       	std	Y+4, r25	; 0x04
    3fb8:	8b 83       	std	Y+3, r24	; 0x03
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <Khaled_Celebrate+0x248>
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd4:	00 97       	sbiw	r24, 0x00	; 0
    3fd6:	69 f7       	brne	.-38     	; 0x3fb2 <Khaled_Celebrate+0x23c>
    3fd8:	14 c0       	rjmp	.+40     	; 0x4002 <Khaled_Celebrate+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fda:	6f 81       	ldd	r22, Y+7	; 0x07
    3fdc:	78 85       	ldd	r23, Y+8	; 0x08
    3fde:	89 85       	ldd	r24, Y+9	; 0x09
    3fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	9e 83       	std	Y+6, r25	; 0x06
    3fec:	8d 83       	std	Y+5, r24	; 0x05
    3fee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff2:	9a 83       	std	Y+2, r25	; 0x02
    3ff4:	89 83       	std	Y+1, r24	; 0x01
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <Khaled_Celebrate+0x284>
    3ffe:	9a 83       	std	Y+2, r25	; 0x02
    4000:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);
}
    4002:	2e 96       	adiw	r28, 0x0e	; 14
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	de bf       	out	0x3e, r29	; 62
    400a:	0f be       	out	0x3f, r0	; 63
    400c:	cd bf       	out	0x3d, r28	; 61
    400e:	cf 91       	pop	r28
    4010:	df 91       	pop	r29
    4012:	08 95       	ret

00004014 <main>:
#include "PingPong_interface.h"


// Main function
int main()
{
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
	WelcomeMessage();
    401c:	0e 94 aa 11 	call	0x2354	; 0x2354 <WelcomeMessage>

	PindPong_voidInit();
    4020:	0e 94 e7 12 	call	0x25ce	; 0x25ce <PindPong_voidInit>


	while(1)	// can add time out
	{
		PindPong_voidForward_Move();
    4024:	0e 94 a6 14 	call	0x294c	; 0x294c <PindPong_voidForward_Move>
		PindPong_voidBackward_Move();
    4028:	0e 94 09 19 	call	0x3212	; 0x3212 <PindPong_voidBackward_Move>
    402c:	fb cf       	rjmp	.-10     	; 0x4024 <main+0x10>

0000402e <__divmodsi4>:
    402e:	97 fb       	bst	r25, 7
    4030:	09 2e       	mov	r0, r25
    4032:	05 26       	eor	r0, r21
    4034:	0e d0       	rcall	.+28     	; 0x4052 <__divmodsi4_neg1>
    4036:	57 fd       	sbrc	r21, 7
    4038:	04 d0       	rcall	.+8      	; 0x4042 <__divmodsi4_neg2>
    403a:	14 d0       	rcall	.+40     	; 0x4064 <__udivmodsi4>
    403c:	0a d0       	rcall	.+20     	; 0x4052 <__divmodsi4_neg1>
    403e:	00 1c       	adc	r0, r0
    4040:	38 f4       	brcc	.+14     	; 0x4050 <__divmodsi4_exit>

00004042 <__divmodsi4_neg2>:
    4042:	50 95       	com	r21
    4044:	40 95       	com	r20
    4046:	30 95       	com	r19
    4048:	21 95       	neg	r18
    404a:	3f 4f       	sbci	r19, 0xFF	; 255
    404c:	4f 4f       	sbci	r20, 0xFF	; 255
    404e:	5f 4f       	sbci	r21, 0xFF	; 255

00004050 <__divmodsi4_exit>:
    4050:	08 95       	ret

00004052 <__divmodsi4_neg1>:
    4052:	f6 f7       	brtc	.-4      	; 0x4050 <__divmodsi4_exit>
    4054:	90 95       	com	r25
    4056:	80 95       	com	r24
    4058:	70 95       	com	r23
    405a:	61 95       	neg	r22
    405c:	7f 4f       	sbci	r23, 0xFF	; 255
    405e:	8f 4f       	sbci	r24, 0xFF	; 255
    4060:	9f 4f       	sbci	r25, 0xFF	; 255
    4062:	08 95       	ret

00004064 <__udivmodsi4>:
    4064:	a1 e2       	ldi	r26, 0x21	; 33
    4066:	1a 2e       	mov	r1, r26
    4068:	aa 1b       	sub	r26, r26
    406a:	bb 1b       	sub	r27, r27
    406c:	fd 01       	movw	r30, r26
    406e:	0d c0       	rjmp	.+26     	; 0x408a <__udivmodsi4_ep>

00004070 <__udivmodsi4_loop>:
    4070:	aa 1f       	adc	r26, r26
    4072:	bb 1f       	adc	r27, r27
    4074:	ee 1f       	adc	r30, r30
    4076:	ff 1f       	adc	r31, r31
    4078:	a2 17       	cp	r26, r18
    407a:	b3 07       	cpc	r27, r19
    407c:	e4 07       	cpc	r30, r20
    407e:	f5 07       	cpc	r31, r21
    4080:	20 f0       	brcs	.+8      	; 0x408a <__udivmodsi4_ep>
    4082:	a2 1b       	sub	r26, r18
    4084:	b3 0b       	sbc	r27, r19
    4086:	e4 0b       	sbc	r30, r20
    4088:	f5 0b       	sbc	r31, r21

0000408a <__udivmodsi4_ep>:
    408a:	66 1f       	adc	r22, r22
    408c:	77 1f       	adc	r23, r23
    408e:	88 1f       	adc	r24, r24
    4090:	99 1f       	adc	r25, r25
    4092:	1a 94       	dec	r1
    4094:	69 f7       	brne	.-38     	; 0x4070 <__udivmodsi4_loop>
    4096:	60 95       	com	r22
    4098:	70 95       	com	r23
    409a:	80 95       	com	r24
    409c:	90 95       	com	r25
    409e:	9b 01       	movw	r18, r22
    40a0:	ac 01       	movw	r20, r24
    40a2:	bd 01       	movw	r22, r26
    40a4:	cf 01       	movw	r24, r30
    40a6:	08 95       	ret

000040a8 <__prologue_saves__>:
    40a8:	2f 92       	push	r2
    40aa:	3f 92       	push	r3
    40ac:	4f 92       	push	r4
    40ae:	5f 92       	push	r5
    40b0:	6f 92       	push	r6
    40b2:	7f 92       	push	r7
    40b4:	8f 92       	push	r8
    40b6:	9f 92       	push	r9
    40b8:	af 92       	push	r10
    40ba:	bf 92       	push	r11
    40bc:	cf 92       	push	r12
    40be:	df 92       	push	r13
    40c0:	ef 92       	push	r14
    40c2:	ff 92       	push	r15
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	ca 1b       	sub	r28, r26
    40d2:	db 0b       	sbc	r29, r27
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	f8 94       	cli
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	09 94       	ijmp

000040e0 <__epilogue_restores__>:
    40e0:	2a 88       	ldd	r2, Y+18	; 0x12
    40e2:	39 88       	ldd	r3, Y+17	; 0x11
    40e4:	48 88       	ldd	r4, Y+16	; 0x10
    40e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    40e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    40ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    40ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    40ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    40f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    40f2:	b9 84       	ldd	r11, Y+9	; 0x09
    40f4:	c8 84       	ldd	r12, Y+8	; 0x08
    40f6:	df 80       	ldd	r13, Y+7	; 0x07
    40f8:	ee 80       	ldd	r14, Y+6	; 0x06
    40fa:	fd 80       	ldd	r15, Y+5	; 0x05
    40fc:	0c 81       	ldd	r16, Y+4	; 0x04
    40fe:	1b 81       	ldd	r17, Y+3	; 0x03
    4100:	aa 81       	ldd	r26, Y+2	; 0x02
    4102:	b9 81       	ldd	r27, Y+1	; 0x01
    4104:	ce 0f       	add	r28, r30
    4106:	d1 1d       	adc	r29, r1
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	ed 01       	movw	r28, r26
    4114:	08 95       	ret

00004116 <_exit>:
    4116:	f8 94       	cli

00004118 <__stop_program>:
    4118:	ff cf       	rjmp	.-2      	; 0x4118 <__stop_program>
