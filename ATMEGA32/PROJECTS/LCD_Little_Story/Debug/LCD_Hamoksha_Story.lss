
LCD_Hamoksha_Story.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000314  00800060  00005df8  00005e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800374  00800374  000061a0  2**0
                  ALLOC
  3 .stab         00003ae0  00000000  00000000  000061a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000df0  00000000  00000000  00009c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000ac10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000ae00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000e583  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000f91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000105dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 11 	call	0x2354	; 0x2354 <main>
      8a:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ee       	ldi	r26, 0xEC	; 236
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ee       	ldi	r24, 0xEC	; 236
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ee       	ldi	r22, 0xEC	; 236
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e8 2e 	jmp	0x5dd0	; 0x5dd0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ef 2e 	jmp	0x5dde	; 0x5dde <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ec 50       	subi	r30, 0x0C	; 12
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidSetPinDirection>:
		/*		- Copy_u8Port: The port to set the pin direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*		- Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*		- Copy_u8Direction: The desired direction (DIO_u8PIN_OUTPUT or DIO_u8PIN_INPUT).							*/
		/********************************************************************************************************************/
		void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
		{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	08 f0       	brcs	.+2      	; 0xe1a <DIO_voidSetPinDirection+0x22>
     e18:	ee c0       	rjmp	.+476    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <DIO_voidSetPinDirection+0x2a>
     e20:	ea c0       	rjmp	.+468    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
			{
				if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	09 f0       	breq	.+2      	; 0xe2a <DIO_voidSetPinDirection+0x32>
     e28:	6f c0       	rjmp	.+222    	; 0xf08 <DIO_voidSetPinDirection+0x110>
				{
					switch(Copy_u8Port)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	3f 83       	std	Y+7, r19	; 0x07
     e32:	2e 83       	std	Y+6, r18	; 0x06
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	91 05       	cpc	r25, r1
     e3c:	49 f1       	breq	.+82     	; 0xe90 <DIO_voidSetPinDirection+0x98>
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	3f 81       	ldd	r19, Y+7	; 0x07
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	2c f4       	brge	.+10     	; 0xe52 <DIO_voidSetPinDirection+0x5a>
     e48:	8e 81       	ldd	r24, Y+6	; 0x06
     e4a:	9f 81       	ldd	r25, Y+7	; 0x07
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	61 f0       	breq	.+24     	; 0xe68 <DIO_voidSetPinDirection+0x70>
     e50:	d2 c0       	rjmp	.+420    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     e52:	2e 81       	ldd	r18, Y+6	; 0x06
     e54:	3f 81       	ldd	r19, Y+7	; 0x07
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	71 f1       	breq	.+92     	; 0xeb8 <DIO_voidSetPinDirection+0xc0>
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	91 05       	cpc	r25, r1
     e64:	e9 f1       	breq	.+122    	; 0xee0 <DIO_voidSetPinDirection+0xe8>
     e66:	c7 c0       	rjmp	.+398    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(DDRA , Copy_u8Pin); 	break;
     e68:	aa e3       	ldi	r26, 0x3A	; 58
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_voidSetPinDirection+0x8e>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_voidSetPinDirection+0x8a>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	b3 c0       	rjmp	.+358    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  SET_BIT(DDRB , Copy_u8Pin); 	break;
     e90:	a7 e3       	ldi	r26, 0x37	; 55
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e7 e3       	ldi	r30, 0x37	; 55
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinDirection+0xb6>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinDirection+0xb2>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	9f c0       	rjmp	.+318    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  SET_BIT(DDRC , Copy_u8Pin); 	break;
     eb8:	a4 e3       	ldi	r26, 0x34	; 52
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e4 e3       	ldi	r30, 0x34	; 52
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_voidSetPinDirection+0xde>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_voidSetPinDirection+0xda>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	8b c0       	rjmp	.+278    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  SET_BIT(DDRD , Copy_u8Pin); 	break;
     ee0:	a1 e3       	ldi	r26, 0x31	; 49
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e1 e3       	ldi	r30, 0x31	; 49
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_voidSetPinDirection+0x106>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_voidSetPinDirection+0x102>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	77 c0       	rjmp	.+238    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						default       :  								break;
					}
				}
				else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <DIO_voidSetPinDirection+0x118>
     f0e:	73 c0       	rjmp	.+230    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
				{
					switch(Copy_u8Port)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	59 f1       	breq	.+86     	; 0xf7a <DIO_voidSetPinDirection+0x182>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	2c f4       	brge	.+10     	; 0xf38 <DIO_voidSetPinDirection+0x140>
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f0       	breq	.+26     	; 0xf50 <DIO_voidSetPinDirection+0x158>
     f36:	5f c0       	rjmp	.+190    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	89 f1       	breq	.+98     	; 0xfa4 <DIO_voidSetPinDirection+0x1ac>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <DIO_voidSetPinDirection+0x156>
     f4c:	40 c0       	rjmp	.+128    	; 0xfce <DIO_voidSetPinDirection+0x1d6>
     f4e:	53 c0       	rjmp	.+166    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(DDRA , Copy_u8Pin); 	break;
     f50:	aa e3       	ldi	r26, 0x3A	; 58
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ea e3       	ldi	r30, 0x3A	; 58
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_voidSetPinDirection+0x176>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_voidSetPinDirection+0x172>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	3e c0       	rjmp	.+124    	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(DDRB , Copy_u8Pin); 	break;
     f7a:	a7 e3       	ldi	r26, 0x37	; 55
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e3       	ldi	r30, 0x37	; 55
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_voidSetPinDirection+0x1a0>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_voidSetPinDirection+0x19c>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	29 c0       	rjmp	.+82     	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(DDRC , Copy_u8Pin); 	break;
     fa4:	a4 e3       	ldi	r26, 0x34	; 52
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e4 e3       	ldi	r30, 0x34	; 52
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinDirection+0x1ca>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinDirection+0x1c6>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <DIO_voidSetPinDirection+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(DDRD , Copy_u8Pin); 	break;
     fce:	a1 e3       	ldi	r26, 0x31	; 49
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e3       	ldi	r30, 0x31	; 49
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_voidSetPinDirection+0x1f4>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_voidSetPinDirection+0x1f0>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
						default       :  								break;
					}
				}
			}
		}
     ff6:	27 96       	adiw	r28, 0x07	; 7
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_voidSetPortDirection>:
		/*   Parameters:																								*/
		/*        - Copy_u8Port: The port to set the direction for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).*/
		/*        - Copy_u8Direction: The desired direction (DIO_PORT_OUTPUT or DIO_PORT_INPUT).						*/
		/****************************************************************************************************************/
		void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
		{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_voidSetPortDirection+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_voidSetPortDirection+0x8>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	90 f5       	brcc	.+100    	; 0x1082 <DIO_voidSetPortDirection+0x7a>
			{
				switch(Copy_u8Port)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3c 83       	std	Y+4, r19	; 0x04
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	d1 f0       	breq	.+52     	; 0x1066 <DIO_voidSetPortDirection+0x5e>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	2c f4       	brge	.+10     	; 0x1046 <DIO_voidSetPortDirection+0x3e>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	61 f0       	breq	.+24     	; 0x105c <DIO_voidSetPortDirection+0x54>
    1044:	1e c0       	rjmp	.+60     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
    1046:	2b 81       	ldd	r18, Y+3	; 0x03
    1048:	3c 81       	ldd	r19, Y+4	; 0x04
    104a:	22 30       	cpi	r18, 0x02	; 2
    104c:	31 05       	cpc	r19, r1
    104e:	81 f0       	breq	.+32     	; 0x1070 <DIO_voidSetPortDirection+0x68>
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	81 f0       	breq	.+32     	; 0x107a <DIO_voidSetPortDirection+0x72>
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
				{
					case DIO_u8PORTA:  DDRA = Copy_u8Direction; 		break;
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
    1064:	0e c0       	rjmp	.+28     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTB:  DDRB = Copy_u8Direction; 		break;
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTC:  DDRC = Copy_u8Direction; 		break;
    1070:	e4 e3       	ldi	r30, 0x34	; 52
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 83       	st	Z, r24
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <DIO_voidSetPortDirection+0x7a>
					case DIO_u8PORTD:  DDRD = Copy_u8Direction; 		break;
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	80 83       	st	Z, r24
					default       :  									break;
				}
			}
		}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_voidSetPinValue>:
		/*        - Copy_u8Port: The port to set the pin value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).		*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.															*/
		/*        - Copy_u8PinValue: The desired value (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).										*/
		/************************************************************************************************************************/
		void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
		{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	27 97       	sbiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02
    10a8:	4b 83       	std	Y+3, r20	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <DIO_voidSetPinValue+0x22>
    10b0:	ee c0       	rjmp	.+476    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <DIO_voidSetPinValue+0x2a>
    10b8:	ea c0       	rjmp	.+468    	; 0x128e <DIO_voidSetPinValue+0x1fe>
			{
				if(Copy_u8PinValue == DIO_u8PIN_HIGH)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <DIO_voidSetPinValue+0x32>
    10c0:	6f c0       	rjmp	.+222    	; 0x11a0 <DIO_voidSetPinValue+0x110>
				{
					switch(Copy_u8Port)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3f 83       	std	Y+7, r19	; 0x07
    10ca:	2e 83       	std	Y+6, r18	; 0x06
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	49 f1       	breq	.+82     	; 0x1128 <DIO_voidSetPinValue+0x98>
    10d6:	2e 81       	ldd	r18, Y+6	; 0x06
    10d8:	3f 81       	ldd	r19, Y+7	; 0x07
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <DIO_voidSetPinValue+0x5a>
    10e0:	8e 81       	ldd	r24, Y+6	; 0x06
    10e2:	9f 81       	ldd	r25, Y+7	; 0x07
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <DIO_voidSetPinValue+0x70>
    10e8:	d2 c0       	rjmp	.+420    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    10ea:	2e 81       	ldd	r18, Y+6	; 0x06
    10ec:	3f 81       	ldd	r19, Y+7	; 0x07
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f1       	breq	.+92     	; 0x1150 <DIO_voidSetPinValue+0xc0>
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	e9 f1       	breq	.+122    	; 0x1178 <DIO_voidSetPinValue+0xe8>
    10fe:	c7 c0       	rjmp	.+398    	; 0x128e <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  SET_BIT(PORTA , Copy_u8Pin); 	break;
    1100:	ab e3       	ldi	r26, 0x3B	; 59
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_voidSetPinValue+0x8e>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_voidSetPinValue+0x8a>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	b3 c0       	rjmp	.+358    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  SET_BIT(PORTB , Copy_u8Pin); 	break;
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_voidSetPinValue+0xb6>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_voidSetPinValue+0xb2>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	9f c0       	rjmp	.+318    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  SET_BIT(PORTC , Copy_u8Pin); 	break;
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_voidSetPinValue+0xde>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_voidSetPinValue+0xda>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	8b c0       	rjmp	.+278    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  SET_BIT(PORTD , Copy_u8Pin); 	break;
    1178:	a2 e3       	ldi	r26, 0x32	; 50
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_voidSetPinValue+0x106>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_voidSetPinValue+0x102>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	77 c0       	rjmp	.+238    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						default       	:  									break;
					}
				}
				else if(Copy_u8PinValue == DIO_u8PIN_LOW)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 23       	and	r24, r24
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <DIO_voidSetPinValue+0x118>
    11a6:	73 c0       	rjmp	.+230    	; 0x128e <DIO_voidSetPinValue+0x1fe>
				{
					switch(Copy_u8Port)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	59 f1       	breq	.+86     	; 0x1212 <DIO_voidSetPinValue+0x182>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <DIO_voidSetPinValue+0x140>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f0       	breq	.+26     	; 0x11e8 <DIO_voidSetPinValue+0x158>
    11ce:	5f c0       	rjmp	.+190    	; 0x128e <DIO_voidSetPinValue+0x1fe>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	89 f1       	breq	.+98     	; 0x123c <DIO_voidSetPinValue+0x1ac>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_voidSetPinValue+0x156>
    11e4:	40 c0       	rjmp	.+128    	; 0x1266 <DIO_voidSetPinValue+0x1d6>
    11e6:	53 c0       	rjmp	.+166    	; 0x128e <DIO_voidSetPinValue+0x1fe>
					{
						case DIO_u8PORTA:  CLR_BIT(PORTA , Copy_u8Pin); 	break;
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	eb e3       	ldi	r30, 0x3B	; 59
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_voidSetPinValue+0x176>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_voidSetPinValue+0x172>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	3e c0       	rjmp	.+124    	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTB:  CLR_BIT(PORTB , Copy_u8Pin); 	break;
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_voidSetPinValue+0x1a0>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_voidSetPinValue+0x19c>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	29 c0       	rjmp	.+82     	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTC:  CLR_BIT(PORTC , Copy_u8Pin); 	break;
    123c:	a5 e3       	ldi	r26, 0x35	; 53
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_voidSetPinValue+0x1ca>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_voidSetPinValue+0x1c6>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	14 c0       	rjmp	.+40     	; 0x128e <DIO_voidSetPinValue+0x1fe>
						case DIO_u8PORTD:  CLR_BIT(PORTD , Copy_u8Pin); 	break;
    1266:	a2 e3       	ldi	r26, 0x32	; 50
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_voidSetPinValue+0x1f4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_voidSetPinValue+0x1f0>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
						default       	:  									break;
					}
				}
			}
		}
    128e:	27 96       	adiw	r28, 0x07	; 7
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_voidSetPortValue>:
		/*    Parameters:																								*/
		/*        - Copy_u8Port: The port to set the value for (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8PortVALUE: The desired value (DIO_u8PORT_HIGH or DIO_u8PORT_LOW).							*/
		/****************************************************************************************************************/
		void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8PortValue)
		{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_voidSetPortValue+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_voidSetPortValue+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	90 f5       	brcc	.+100    	; 0x131a <DIO_voidSetPortValue+0x7a>
			{
				switch(Copy_u8Port)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <DIO_voidSetPortValue+0x5e>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <DIO_voidSetPortValue+0x3e>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <DIO_voidSetPortValue+0x54>
    12dc:	1e c0       	rjmp	.+60     	; 0x131a <DIO_voidSetPortValue+0x7a>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <DIO_voidSetPortValue+0x68>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <DIO_voidSetPortValue+0x72>
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <DIO_voidSetPortValue+0x7a>
				{
					case DIO_u8PORTA:  	PORTA = Copy_u8PortValue; 		break;
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	0e c0       	rjmp	.+28     	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTB:  	PORTB = Copy_u8PortValue; 		break;
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	09 c0       	rjmp	.+18     	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTC:  	PORTC = Copy_u8PortValue; 		break;
    1308:	e5 e3       	ldi	r30, 0x35	; 53
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	04 c0       	rjmp	.+8      	; 0x131a <DIO_voidSetPortValue+0x7a>
					case DIO_u8PORTD:  	PORTD = Copy_u8PortValue; 		break;
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
					default       	: 									break;
				}
			}
		}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO_u8GetPinValue>:
		/*        - Copy_u8Port: The port to read the pin value from (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) within the port.														*/
		/*    Returns: The value of the pin (DIO_u8PIN_HIGH or DIO_u8PIN_LOW).												*/
		/********************************************************************************************************************/
		u8 	 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_u8GetPinValue+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_u8GetPinValue+0x8>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_u8GetPinValue+0xa>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	6b 83       	std	Y+3, r22	; 0x03
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	08 f0       	brcs	.+2      	; 0x1342 <DIO_u8GetPinValue+0x1a>
    1340:	6e c0       	rjmp	.+220    	; 0x141e <DIO_u8GetPinValue+0xf6>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	08 f0       	brcs	.+2      	; 0x134a <DIO_u8GetPinValue+0x22>
    1348:	6a c0       	rjmp	.+212    	; 0x141e <DIO_u8GetPinValue+0xf6>
			{
				u8 Local_u8PinValue;

				switch(Copy_u8Port)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3e 83       	std	Y+6, r19	; 0x06
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	4d 81       	ldd	r20, Y+5	; 0x05
    1356:	5e 81       	ldd	r21, Y+6	; 0x06
    1358:	41 30       	cpi	r20, 0x01	; 1
    135a:	51 05       	cpc	r21, r1
    135c:	41 f1       	breq	.+80     	; 0x13ae <DIO_u8GetPinValue+0x86>
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	91 05       	cpc	r25, r1
    1366:	34 f4       	brge	.+12     	; 0x1374 <DIO_u8GetPinValue+0x4c>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	21 15       	cp	r18, r1
    136e:	31 05       	cpc	r19, r1
    1370:	61 f0       	breq	.+24     	; 0x138a <DIO_u8GetPinValue+0x62>
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <DIO_u8GetPinValue+0xf0>
    1374:	4d 81       	ldd	r20, Y+5	; 0x05
    1376:	5e 81       	ldd	r21, Y+6	; 0x06
    1378:	42 30       	cpi	r20, 0x02	; 2
    137a:	51 05       	cpc	r21, r1
    137c:	51 f1       	breq	.+84     	; 0x13d2 <DIO_u8GetPinValue+0xaa>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	b9 f1       	breq	.+110    	; 0x13f6 <DIO_u8GetPinValue+0xce>
    1388:	47 c0       	rjmp	.+142    	; 0x1418 <DIO_u8GetPinValue+0xf0>
				{
					case DIO_u8PORTA: 	Local_u8PinValue = GET_BIT(PINA , Copy_u8Pin); 		break;
    138a:	e9 e3       	ldi	r30, 0x39	; 57
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0x7a>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0x76>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	35 c0       	rjmp	.+106    	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTB: 	Local_u8PinValue = GET_BIT(PINB , Copy_u8Pin); 		break;
    13ae:	e6 e3       	ldi	r30, 0x36	; 54
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinValue+0x9e>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinValue+0x9a>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	23 c0       	rjmp	.+70     	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTC: 	Local_u8PinValue = GET_BIT(PINC , Copy_u8Pin); 		break;
    13d2:	e3 e3       	ldi	r30, 0x33	; 51
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinValue+0xc2>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinValue+0xbe>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	11 c0       	rjmp	.+34     	; 0x1418 <DIO_u8GetPinValue+0xf0>
					case DIO_u8PORTD: 	Local_u8PinValue = GET_BIT(PIND , Copy_u8Pin); 		break;
    13f6:	e0 e3       	ldi	r30, 0x30	; 48
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8GetPinValue+0xe6>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8GetPinValue+0xe2>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
					default      	: 														break;
				}

				return Local_u8PinValue;
    1418:	59 81       	ldd	r21, Y+1	; 0x01
    141a:	5c 83       	std	Y+4, r21	; 0x04
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8GetPinValue+0xfa>
			}

			else
			{
				return	-1;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	8c 83       	std	Y+4, r24	; 0x04
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
			}
		}
    1424:	26 96       	adiw	r28, 0x06	; 6
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_voidTogglePin>:
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pin to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/*        - Copy_u8Pin: The pin number (0-7) to be toggled.																	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePin(u8 Copy_u8Port , u8 Copy_u8Pin)
		{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_voidTogglePin+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_voidTogglePin+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
			if(( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT) && ( Copy_u8Pin >= MIN_PIN && Copy_u8Pin <= MAX_PIN))
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	08 f0       	brcs	.+2      	; 0x144e <DIO_voidTogglePin+0x18>
    144c:	72 c0       	rjmp	.+228    	; 0x1532 <DIO_voidTogglePin+0xfc>
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	88 30       	cpi	r24, 0x08	; 8
    1452:	08 f0       	brcs	.+2      	; 0x1456 <DIO_voidTogglePin+0x20>
    1454:	6e c0       	rjmp	.+220    	; 0x1532 <DIO_voidTogglePin+0xfc>
			{
				switch (Copy_u8Port)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	49 f1       	breq	.+82     	; 0x14bc <DIO_voidTogglePin+0x86>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_voidTogglePin+0x48>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <DIO_voidTogglePin+0x5e>
    147c:	5a c0       	rjmp	.+180    	; 0x1532 <DIO_voidTogglePin+0xfc>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	71 f1       	breq	.+92     	; 0x14e4 <DIO_voidTogglePin+0xae>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	e9 f1       	breq	.+122    	; 0x150c <DIO_voidTogglePin+0xd6>
    1492:	4f c0       	rjmp	.+158    	; 0x1532 <DIO_voidTogglePin+0xfc>
				{
					case DIO_u8PORTA : 	TOG_BIT(PORTA , Copy_u8Pin); 		break ;
    1494:	ab e3       	ldi	r26, 0x3B	; 59
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_voidTogglePin+0x7c>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_voidTogglePin+0x78>
    14b6:	84 27       	eor	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	3b c0       	rjmp	.+118    	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTB : 	TOG_BIT(PORTB , Copy_u8Pin); 		break ;
    14bc:	a8 e3       	ldi	r26, 0x38	; 56
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e3       	ldi	r30, 0x38	; 56
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_voidTogglePin+0xa4>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_voidTogglePin+0xa0>
    14de:	84 27       	eor	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTC : 	TOG_BIT(PORTC , Copy_u8Pin); 		break ;
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_voidTogglePin+0xcc>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_voidTogglePin+0xc8>
    1506:	84 27       	eor	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <DIO_voidTogglePin+0xfc>
					case DIO_u8PORTD :	TOG_BIT(PORTD , Copy_u8Pin); 		break ;
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_voidTogglePin+0xf4>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_voidTogglePin+0xf0>
    152e:	84 27       	eor	r24, r20
    1530:	8c 93       	st	X, r24
					default 	   	 : 							 			break ;
				}
			}
		}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <DIO_voidTogglePort>:
		/*    Description: Toggles the values of the entire port.																	*/
		/*    Parameters:																											*/
		/*        - Copy_u8Port: The port containing the pins to be toggled (DIO_u8PORTA, DIO_u8PORTB, DIO_u8PORTC, DIO_u8PORTD).	*/
		/****************************************************************************************************************************/
		void DIO_voidTogglePort(u8 Copy_u8Port)
		{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_voidTogglePort+0x6>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
			if( Copy_u8Port >= MIN_PORT && Copy_u8Port <= MAX_PORT )
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	08 f0       	brcs	.+2      	; 0x1556 <DIO_voidTogglePort+0x16>
    1554:	3e c0       	rjmp	.+124    	; 0x15d2 <DIO_voidTogglePort+0x92>
			{
				switch (Copy_u8Port)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3b 83       	std	Y+3, r19	; 0x03
    155e:	2a 83       	std	Y+2, r18	; 0x02
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	e9 f0       	breq	.+58     	; 0x15a4 <DIO_voidTogglePort+0x64>
    156a:	2a 81       	ldd	r18, Y+2	; 0x02
    156c:	3b 81       	ldd	r19, Y+3	; 0x03
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	2c f4       	brge	.+10     	; 0x157e <DIO_voidTogglePort+0x3e>
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	61 f0       	breq	.+24     	; 0x1594 <DIO_voidTogglePort+0x54>
    157c:	2a c0       	rjmp	.+84     	; 0x15d2 <DIO_voidTogglePort+0x92>
    157e:	2a 81       	ldd	r18, Y+2	; 0x02
    1580:	3b 81       	ldd	r19, Y+3	; 0x03
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	b1 f0       	breq	.+44     	; 0x15b4 <DIO_voidTogglePort+0x74>
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	9b 81       	ldd	r25, Y+3	; 0x03
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	c9 f0       	breq	.+50     	; 0x15c4 <DIO_voidTogglePort+0x84>
    1592:	1f c0       	rjmp	.+62     	; 0x15d2 <DIO_voidTogglePort+0x92>
				{
					case DIO_u8PORTA : 	TOG_REG(PORTA , DIO_u8PORT_HIGH); 		break ;
    1594:	ab e3       	ldi	r26, 0x3B	; 59
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e3       	ldi	r30, 0x3B	; 59
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 95       	com	r24
    15a0:	8c 93       	st	X, r24
    15a2:	17 c0       	rjmp	.+46     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTB : 	TOG_REG(PORTB , DIO_u8PORT_HIGH); 		break ;
    15a4:	a8 e3       	ldi	r26, 0x38	; 56
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 e3       	ldi	r30, 0x38	; 56
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 95       	com	r24
    15b0:	8c 93       	st	X, r24
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTC : 	TOG_REG(PORTC , DIO_u8PORT_HIGH); 		break ;
    15b4:	a5 e3       	ldi	r26, 0x35	; 53
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 95       	com	r24
    15c0:	8c 93       	st	X, r24
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <DIO_voidTogglePort+0x92>
					case DIO_u8PORTD :	TOG_REG(PORTD , DIO_u8PORT_HIGH); 		break ;
    15c4:	a2 e3       	ldi	r26, 0x32	; 50
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 95       	com	r24
    15d0:	8c 93       	st	X, r24
					default 	     :	 										break ;
				}
			}
		}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <LCD_voidInit>:



/* Functions Initialization */
void LCD_voidInit()
{
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	c6 54       	subi	r28, 0x46	; 70
    15ec:	d0 40       	sbci	r29, 0x00	; 0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
	/* PINS Directions Configuration */
	SET_voidLCDPinsDirection();
    15f8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <SET_voidLCDPinsDirection>
    15fc:	fe 01       	movw	r30, r28
    15fe:	ed 5b       	subi	r30, 0xBD	; 189
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a8 ec       	ldi	r26, 0xC8	; 200
    1608:	b2 e4       	ldi	r27, 0x42	; 66
    160a:	80 83       	st	Z, r24
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	a2 83       	std	Z+2, r26	; 0x02
    1610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	8e 01       	movw	r16, r28
    1614:	01 5c       	subi	r16, 0xC1	; 193
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	fe 01       	movw	r30, r28
    161a:	ed 5b       	subi	r30, 0xBD	; 189
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a e7       	ldi	r20, 0x7A	; 122
    162c:	55 e4       	ldi	r21, 0x45	; 69
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	f8 01       	movw	r30, r16
    1638:	80 83       	st	Z, r24
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	a2 83       	std	Z+2, r26	; 0x02
    163e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1640:	fe 01       	movw	r30, r28
    1642:	ff 96       	adiw	r30, 0x3f	; 63
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <LCD_voidInit+0x88>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e af       	std	Y+62, r25	; 0x3e
    1662:	8d af       	std	Y+61, r24	; 0x3d
    1664:	46 c0       	rjmp	.+140    	; 0x16f2 <LCD_voidInit+0x114>
	else if (__tmp > 65535)
    1666:	fe 01       	movw	r30, r28
    1668:	ff 96       	adiw	r30, 0x3f	; 63
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	64 f5       	brge	.+88     	; 0x16da <LCD_voidInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	fe 01       	movw	r30, r28
    1684:	ed 5b       	subi	r30, 0xBD	; 189
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e af       	std	Y+62, r25	; 0x3e
    16ae:	8d af       	std	Y+61, r24	; 0x3d
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <LCD_voidInit+0xf2>
    16b2:	80 e9       	ldi	r24, 0x90	; 144
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	9c af       	std	Y+60, r25	; 0x3c
    16b8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    16bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCD_voidInit+0xe0>
    16c2:	9c af       	std	Y+60, r25	; 0x3c
    16c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e af       	std	Y+62, r25	; 0x3e
    16ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <LCD_voidInit+0xd4>
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <LCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	fe 01       	movw	r30, r28
    16dc:	ff 96       	adiw	r30, 0x3f	; 63
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
    16f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f6:	9a af       	std	Y+58, r25	; 0x3a
    16f8:	89 af       	std	Y+57, r24	; 0x39
    16fa:	89 ad       	ldd	r24, Y+57	; 0x39
    16fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <LCD_voidInit+0x120>
    1702:	9a af       	std	Y+58, r25	; 0x3a
    1704:	89 af       	std	Y+57, r24	; 0x39
	#if		CONNECTION_MODE == LCD_FOUR_BIT_MODE	// 4 Bits Mode
			// Wait for more than 30 ms
			_delay_ms(100);

			// Function Set
			Send_voidCommand(FUNCTION_SET1);	// Data length = 4 , N = 2 lines , F = 5*7
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(FUNCTION_SET2);
    170c:	80 e2       	ldi	r24, 0x20	; 32
    170e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(FUNCTION_SET3);
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e8       	ldi	r26, 0x80	; 128
    171e:	bf e3       	ldi	r27, 0x3F	; 63
    1720:	8d ab       	std	Y+53, r24	; 0x35
    1722:	9e ab       	std	Y+54, r25	; 0x36
    1724:	af ab       	std	Y+55, r26	; 0x37
    1726:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	6d a9       	ldd	r22, Y+53	; 0x35
    172a:	7e a9       	ldd	r23, Y+54	; 0x36
    172c:	8f a9       	ldd	r24, Y+55	; 0x37
    172e:	98 ad       	ldd	r25, Y+56	; 0x38
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a e7       	ldi	r20, 0x7A	; 122
    1736:	55 e4       	ldi	r21, 0x45	; 69
    1738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	89 ab       	std	Y+49, r24	; 0x31
    1742:	9a ab       	std	Y+50, r25	; 0x32
    1744:	ab ab       	std	Y+51, r26	; 0x33
    1746:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1748:	69 a9       	ldd	r22, Y+49	; 0x31
    174a:	7a a9       	ldd	r23, Y+50	; 0x32
    174c:	8b a9       	ldd	r24, Y+51	; 0x33
    174e:	9c a9       	ldd	r25, Y+52	; 0x34
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	2c f4       	brge	.+10     	; 0x176a <LCD_voidInit+0x18c>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	98 ab       	std	Y+48, r25	; 0x30
    1766:	8f a7       	std	Y+47, r24	; 0x2f
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <LCD_voidInit+0x20a>
	else if (__tmp > 65535)
    176a:	69 a9       	ldd	r22, Y+49	; 0x31
    176c:	7a a9       	ldd	r23, Y+50	; 0x32
    176e:	8b a9       	ldd	r24, Y+51	; 0x33
    1770:	9c a9       	ldd	r25, Y+52	; 0x34
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	4c f5       	brge	.+82     	; 0x17d4 <LCD_voidInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	6d a9       	ldd	r22, Y+53	; 0x35
    1784:	7e a9       	ldd	r23, Y+54	; 0x36
    1786:	8f a9       	ldd	r24, Y+55	; 0x37
    1788:	98 ad       	ldd	r25, Y+56	; 0x38
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_voidInit+0x1ec>
    17ac:	80 e9       	ldi	r24, 0x90	; 144
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	9e a7       	std	Y+46, r25	; 0x2e
    17b2:	8d a7       	std	Y+45, r24	; 0x2d
    17b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_voidInit+0x1da>
    17bc:	9e a7       	std	Y+46, r25	; 0x2e
    17be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c2:	98 a9       	ldd	r25, Y+48	; 0x30
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	98 ab       	std	Y+48, r25	; 0x30
    17c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    17cc:	98 a9       	ldd	r25, Y+48	; 0x30
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <LCD_voidInit+0x1ce>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <LCD_voidInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	69 a9       	ldd	r22, Y+49	; 0x31
    17d6:	7a a9       	ldd	r23, Y+50	; 0x32
    17d8:	8b a9       	ldd	r24, Y+51	; 0x33
    17da:	9c a9       	ldd	r25, Y+52	; 0x34
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	98 ab       	std	Y+48, r25	; 0x30
    17e6:	8f a7       	std	Y+47, r24	; 0x2f
    17e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ea:	98 a9       	ldd	r25, Y+48	; 0x30
    17ec:	9c a7       	std	Y+44, r25	; 0x2c
    17ee:	8b a7       	std	Y+43, r24	; 0x2b
    17f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_voidInit+0x216>
    17f8:	9c a7       	std	Y+44, r25	; 0x2c
    17fa:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);	// delay > 39 micro sec

			// Display ON/OFF Control
			Send_voidCommand(DISPLAY_ON_OFF_CONTROL1);	// Display = ON , Cursor = OFF , Blink = OFF
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(DISPLAY_ON_OFF_CONTROL2);
    1802:	80 ec       	ldi	r24, 0xC0	; 192
    1804:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e8       	ldi	r26, 0x80	; 128
    180e:	bf e3       	ldi	r27, 0x3F	; 63
    1810:	8f a3       	std	Y+39, r24	; 0x27
    1812:	98 a7       	std	Y+40, r25	; 0x28
    1814:	a9 a7       	std	Y+41, r26	; 0x29
    1816:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a e7       	ldi	r20, 0x7A	; 122
    1826:	55 e4       	ldi	r21, 0x45	; 69
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8b a3       	std	Y+35, r24	; 0x23
    1832:	9c a3       	std	Y+36, r25	; 0x24
    1834:	ad a3       	std	Y+37, r26	; 0x25
    1836:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1838:	6b a1       	ldd	r22, Y+35	; 0x23
    183a:	7c a1       	ldd	r23, Y+36	; 0x24
    183c:	8d a1       	ldd	r24, Y+37	; 0x25
    183e:	9e a1       	ldd	r25, Y+38	; 0x26
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	2c f4       	brge	.+10     	; 0x185a <LCD_voidInit+0x27c>
		__ticks = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    185a:	6b a1       	ldd	r22, Y+35	; 0x23
    185c:	7c a1       	ldd	r23, Y+36	; 0x24
    185e:	8d a1       	ldd	r24, Y+37	; 0x25
    1860:	9e a1       	ldd	r25, Y+38	; 0x26
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	4c f5       	brge	.+82     	; 0x18c4 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	6f a1       	ldd	r22, Y+39	; 0x27
    1874:	78 a5       	ldd	r23, Y+40	; 0x28
    1876:	89 a5       	ldd	r24, Y+41	; 0x29
    1878:	9a a5       	ldd	r25, Y+42	; 0x2a
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9a a3       	std	Y+34, r25	; 0x22
    1898:	89 a3       	std	Y+33, r24	; 0x21
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <LCD_voidInit+0x2dc>
    189c:	80 e9       	ldi	r24, 0x90	; 144
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	98 a3       	std	Y+32, r25	; 0x20
    18a2:	8f 8f       	std	Y+31, r24	; 0x1f
    18a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a6:	98 a1       	ldd	r25, Y+32	; 0x20
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_voidInit+0x2ca>
    18ac:	98 a3       	std	Y+32, r25	; 0x20
    18ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	9a a3       	std	Y+34, r25	; 0x22
    18b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	89 a1       	ldd	r24, Y+33	; 0x21
    18bc:	9a a1       	ldd	r25, Y+34	; 0x22
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f7       	brne	.-38     	; 0x189c <LCD_voidInit+0x2be>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <LCD_voidInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9a a3       	std	Y+34, r25	; 0x22
    18d6:	89 a3       	std	Y+33, r24	; 0x21
    18d8:	89 a1       	ldd	r24, Y+33	; 0x21
    18da:	9a a1       	ldd	r25, Y+34	; 0x22
    18dc:	9e 8f       	std	Y+30, r25	; 0x1e
    18de:	8d 8f       	std	Y+29, r24	; 0x1d
    18e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_voidInit+0x306>
    18e8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ea:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);	// delay > 39 micro sec

			// Display Clear
			Send_voidCommand(DISPLAY_CLEAR1);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(DISPLAY_CLEAR2);
    18f2:	80 e1       	ldi	r24, 0x10	; 16
    18f4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e4       	ldi	r27, 0x40	; 64
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	9a 8f       	std	Y+26, r25	; 0x1a
    1904:	ab 8f       	std	Y+27, r26	; 0x1b
    1906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a e7       	ldi	r20, 0x7A	; 122
    1916:	55 e4       	ldi	r21, 0x45	; 69
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_voidInit+0x36c>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_voidInit+0x3cc>
    198c:	80 e9       	ldi	r24, 0x90	; 144
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_voidInit+0x3ba>
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_voidInit+0x3ae>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	98 89       	ldd	r25, Y+16	; 0x10
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_voidInit+0x3f6>
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);	// delay > 1.53 ms

			// Entry Mode Set
			Send_voidCommand(ENTRY_MODE_SET1); // I/D: increase (write from left to right) = 1 , SH: No Shift = 0
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(ENTRY_MODE_SET2);
    19e2:	80 e6       	ldi	r24, 0x60	; 96
    19e4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
			Send_voidCommand(0b00000110); // I/D: increase (write from left to right) = 1 , SH: No Shift = 0
	#else
		#error	"INVALID MODE !!!"
	#endif

	Is_Init_Finished = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 74 03 	sts	0x0374, r24
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e4       	ldi	r27, 0x40	; 64
    19f6:	8b 87       	std	Y+11, r24	; 0x0b
    19f8:	9c 87       	std	Y+12, r25	; 0x0c
    19fa:	ad 87       	std	Y+13, r26	; 0x0d
    19fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a e7       	ldi	r20, 0x7A	; 122
    1a0c:	55 e4       	ldi	r21, 0x45	; 69
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8f 83       	std	Y+7, r24	; 0x07
    1a18:	98 87       	std	Y+8, r25	; 0x08
    1a1a:	a9 87       	std	Y+9, r26	; 0x09
    1a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <LCD_voidInit+0x462>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <LCD_voidInit+0x4e0>
	else if (__tmp > 65535)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <LCD_voidInit+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_voidInit+0x4c2>
    1a82:	80 e9       	ldi	r24, 0x90	; 144
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_voidInit+0x4b0>
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_voidInit+0x4a4>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <LCD_voidInit+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_voidInit+0x4ec>
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	// delay > 1.53 ms
}
    1ad2:	ca 5b       	subi	r28, 0xBA	; 186
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret

00001aea <SET_voidLCDPinsDirection>:



void SET_voidLCDPinsDirection()
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	// Set Ditrections of 4 bits mode
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, DIO_u8PIN_OUTPUT);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, DIO_u8PIN_OUTPUT);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, DIO_u8PIN_OUTPUT);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, DIO_u8PIN_OUTPUT);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	// set direction of Control Pins
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_OUTPUT);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	62 e0       	ldi	r22, 0x02	; 2
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_OUTPUT);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>

	// Set LCD PORT direction for simulation
	//DIO_voidSetPortDirection(LCD_PORT, DIO_PORT_OUTPUT);
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <Send_voidEnablePulse>:

void Send_voidEnablePulse()
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_HIGH);	// Set Enable
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	55 e4       	ldi	r21, 0x45	; 69
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <Send_voidEnablePulse+0x70>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <Send_voidEnablePulse+0xee>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <Send_voidEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <Send_voidEnablePulse+0xd0>
    1be6:	80 e9       	ldi	r24, 0x90	; 144
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <Send_voidEnablePulse+0xbe>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <Send_voidEnablePulse+0xb2>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <Send_voidEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <Send_voidEnablePulse+0xfa>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	// delay more than 50 mico seconds
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_u8PIN_LOW);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	//_delay_ms(2);
}
    1c40:	2e 96       	adiw	r28, 0x0e	; 14
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <Send_voidCommand>:

void Send_voidCommand(u8 Copy_u8Command)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	// 1-Set RS pin low for command
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_LOW);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	63 e0       	ldi	r22, 0x03	; 3
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	#if 	READ_OPERATION_STATUS == LCD_ENABLED
			DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_u8PIN_LOW);	// connected to ground to be set write all the time
	#endif

	#if 	CONNECTION_MODE == LCD_FOUR_BIT_MODE
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN4));		// error .... Remember that GET_BIT not DIO_GetPinValue
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	82 95       	swap	r24
    1c6c:	8f 70       	andi	r24, 0x0F	; 15
    1c6e:	98 2f       	mov	r25, r24
    1c70:	91 70       	andi	r25, 0x01	; 1
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	49 2f       	mov	r20, r25
    1c78:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN5));
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	82 95       	swap	r24
    1c80:	86 95       	lsr	r24
    1c82:	87 70       	andi	r24, 0x07	; 7
    1c84:	98 2f       	mov	r25, r24
    1c86:	91 70       	andi	r25, 0x01	; 1
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	49 2f       	mov	r20, r25
    1c8e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN6));
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	82 95       	swap	r24
    1c96:	86 95       	lsr	r24
    1c98:	86 95       	lsr	r24
    1c9a:	83 70       	andi	r24, 0x03	; 3
    1c9c:	98 2f       	mov	r25, r24
    1c9e:	91 70       	andi	r25, 0x01	; 1
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	49 2f       	mov	r20, r25
    1ca6:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN7));
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	98 2f       	mov	r25, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	99 27       	eor	r25, r25
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	64 e0       	ldi	r22, 0x04	; 4
    1cb8:	49 2f       	mov	r20, r25
    1cba:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1cbe:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>

			if(Is_Init_Finished)
    1cc2:	80 91 74 03 	lds	r24, 0x0374
    1cc6:	88 23       	and	r24, r24
    1cc8:	41 f1       	breq	.+80     	; 0x1d1a <Send_voidCommand+0xc8>
			{
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN0));
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	98 2f       	mov	r25, r24
    1cce:	91 70       	andi	r25, 0x01	; 1
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	49 2f       	mov	r20, r25
    1cd6:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN1));
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	86 95       	lsr	r24
    1cde:	98 2f       	mov	r25, r24
    1ce0:	91 70       	andi	r25, 0x01	; 1
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	49 2f       	mov	r20, r25
    1ce8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN2));
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	91 70       	andi	r25, 0x01	; 1
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	62 e0       	ldi	r22, 0x02	; 2
    1cfa:	49 2f       	mov	r20, r25
    1cfc:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Command,DIO_u8PIN3));
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	86 95       	lsr	r24
    1d04:	86 95       	lsr	r24
    1d06:	86 95       	lsr	r24
    1d08:	98 2f       	mov	r25, r24
    1d0a:	91 70       	andi	r25, 0x01	; 1
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	49 2f       	mov	r20, r25
    1d12:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
				Send_voidEnablePulse();
    1d16:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>
	#else
		#error	"Invalid MODE to Send Command !!!"
	#endif

	//_delay_ms(2);
}
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <Send_voidData>:

void Send_voidData(u8 copy_u8Data)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	// 1-Set RS pin HIGH for data
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_u8PIN_HIGH);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	63 e0       	ldi	r22, 0x03	; 3
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
	#if 	READ_OPERATION_STATUS == LCD_ENABLED
			DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_PIN_LOW);	// connected to ground to be set write all the time
	#endif

	#if		CONNECTION_MODE == LCD_FOUR_BIT_MODE
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Data,DIO_u8PIN4));
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	82 95       	swap	r24
    1d3c:	8f 70       	andi	r24, 0x0F	; 15
    1d3e:	98 2f       	mov	r25, r24
    1d40:	91 70       	andi	r25, 0x01	; 1
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	49 2f       	mov	r20, r25
    1d48:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Data,DIO_u8PIN5));
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	82 95       	swap	r24
    1d50:	86 95       	lsr	r24
    1d52:	87 70       	andi	r24, 0x07	; 7
    1d54:	98 2f       	mov	r25, r24
    1d56:	91 70       	andi	r25, 0x01	; 1
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	49 2f       	mov	r20, r25
    1d5e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Data,DIO_u8PIN6));
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	82 95       	swap	r24
    1d66:	86 95       	lsr	r24
    1d68:	86 95       	lsr	r24
    1d6a:	83 70       	andi	r24, 0x03	; 3
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	91 70       	andi	r25, 0x01	; 1
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	49 2f       	mov	r20, r25
    1d76:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Data,DIO_u8PIN7));
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	99 27       	eor	r25, r25
    1d82:	99 1f       	adc	r25, r25
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	64 e0       	ldi	r22, 0x04	; 4
    1d88:	49 2f       	mov	r20, r25
    1d8a:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1d8e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>

			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Data,DIO_u8PIN0));
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	98 2f       	mov	r25, r24
    1d96:	91 70       	andi	r25, 0x01	; 1
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	49 2f       	mov	r20, r25
    1d9e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Data,DIO_u8PIN1));
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	86 95       	lsr	r24
    1da6:	98 2f       	mov	r25, r24
    1da8:	91 70       	andi	r25, 0x01	; 1
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	49 2f       	mov	r20, r25
    1db0:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Data,DIO_u8PIN2));
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	86 95       	lsr	r24
    1db8:	86 95       	lsr	r24
    1dba:	98 2f       	mov	r25, r24
    1dbc:	91 70       	andi	r25, 0x01	; 1
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	49 2f       	mov	r20, r25
    1dc4:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Data,DIO_u8PIN3));
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	86 95       	lsr	r24
    1dcc:	86 95       	lsr	r24
    1dce:	86 95       	lsr	r24
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	49 2f       	mov	r20, r25
    1dda:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_voidSetPinValue>
			Send_voidEnablePulse();
    1dde:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Send_voidEnablePulse>
	#else
		#error	"Invalid MODE to Write Data !!!"
	#endif

	//_delay_ms(2);
}
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_voidClear>:




void LCD_voidClear()
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	Send_voidCommand(DISPLAY_CLEAR);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_voidClearLine>:

void LCD_voidClearLine(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LCD_voidClearLine+0x6>
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 Local_u8Counter = copy_u8Xpos; Local_u8Counter < 20; Local_u8Counter++)
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <LCD_voidClearLine+0x26>
	{
		LCD_voidWriteCharacterAtXY('\0' , copy_u8Ypos , Local_u8Counter);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	6a 81       	ldd	r22, Y+2	; 0x02
    1e18:	49 81       	ldd	r20, Y+1	; 0x01
    1e1a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	Send_voidCommand(DISPLAY_CLEAR);
}

void LCD_voidClearLine(u8 copy_u8Ypos , u8 copy_u8Xpos)
{
	for(u8 Local_u8Counter = copy_u8Xpos; Local_u8Counter < 20; Local_u8Counter++)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	84 31       	cpi	r24, 0x14	; 20
    1e28:	a8 f3       	brcs	.-22     	; 0x1e14 <LCD_voidClearLine+0x16>
	{
		LCD_voidWriteCharacterAtXY('\0' , copy_u8Ypos , Local_u8Counter);
	}
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_voidWriteCharacter>:




void LCD_voidWriteCharacter(u8 copy_u8Character)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	89 83       	std	Y+1, r24	; 0x01
	Send_voidData(copy_u8Character);
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
}
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <LCD_voidWriteCharacterAtXY>:

void LCD_voidWriteCharacterAtXY(u8 copy_u8Character, u8 copy_u8YPos , u8 copy_u8XPos)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <LCD_voidWriteCharacterAtXY+0x6>
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	6a 83       	std	Y+2, r22	; 0x02
    1e60:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	6b 81       	ldd	r22, Y+3	; 0x03
    1e66:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteCharacter(copy_u8Character);
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <LCD_voidWriteString>:



void LCD_voidWriteString(u8* copy_pu8String)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <LCD_voidWriteString+0x6>
    1e82:	0f 92       	push	r0
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	9b 83       	std	Y+3, r25	; 0x03
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	0e c0       	rjmp	.+28     	; 0x1eac <LCD_voidWriteString+0x30>
	while(copy_pu8String[Local_u8Counter] != '\0')
	{
		Send_voidData(copy_pu8String[Local_u8Counter]);
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	e2 0f       	add	r30, r18
    1e9e:	f3 1f       	adc	r31, r19
    1ea0:	80 81       	ld	r24, Z
    1ea2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
		Local_u8Counter++;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidWriteString(u8* copy_pu8String)
{
	u8 Local_u8Counter = 0;
	while(copy_pu8String[Local_u8Counter] != '\0')
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	e2 0f       	add	r30, r18
    1eba:	f3 1f       	adc	r31, r19
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 23       	and	r24, r24
    1ec0:	39 f7       	brne	.-50     	; 0x1e90 <LCD_voidWriteString+0x14>
	{
		Send_voidData(copy_pu8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_voidWriteStringAtXY>:

void LCD_voidWriteStringAtXY(u8* copy_pu8String, u8 copy_u8YPos , u8 copy_u8XPos)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <LCD_voidWriteStringAtXY+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <LCD_voidWriteStringAtXY+0x8>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	6b 83       	std	Y+3, r22	; 0x03
    1ee0:	4c 83       	std	Y+4, r20	; 0x04
	LCD_voidGoToXY(copy_u8YPos, copy_u8XPos);
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ee6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>
	LCD_voidWriteString(copy_pu8String);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_voidWriteString>
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_voidGoToXY>:



void LCD_voidGoToXY(u8 copy_u8YPos , u8 copy_u8XPos)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	6b 97       	sbiw	r28, 0x1b	; 27
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	8a 8f       	std	Y+26, r24	; 0x1a
    1f16:	6b 8f       	std	Y+27, r22	; 0x1b
	u8 Local_u8DDRAM_Address = 0;
    1f18:	19 8e       	std	Y+25, r1	; 0x19
	//0x80, 0xC0, 0x94, 0xD4

	if(copy_u8YPos == LCD_LINE_ONE)
    1f1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1c:	88 23       	and	r24, r24
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0x80;
    1f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f22:	80 58       	subi	r24, 0x80	; 128
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_TWO)
    1f28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <LCD_voidGoToXY+0x36>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0xC0;
    1f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f30:	80 54       	subi	r24, 0x40	; 64
    1f32:	89 8f       	std	Y+25, r24	; 0x19
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_THREE)
    1f36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <LCD_voidGoToXY+0x44>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0x94;
    1f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3e:	8c 56       	subi	r24, 0x6C	; 108
    1f40:	89 8f       	std	Y+25, r24	; 0x19
    1f42:	06 c0       	rjmp	.+12     	; 0x1f50 <LCD_voidGoToXY+0x50>
	}
	else if(copy_u8YPos == LCD_LINE_FOUR)
    1f44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	19 f4       	brne	.+6      	; 0x1f50 <LCD_voidGoToXY+0x50>
	{
		Local_u8DDRAM_Address = copy_u8XPos + 0xD4;
    1f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4c:	8c 52       	subi	r24, 0x2C	; 44
    1f4e:	89 8f       	std	Y+25, r24	; 0x19
	}

	SET_BIT(Local_u8DDRAM_Address , 7);				// Set bit 7 to 1
    1f50:	89 8d       	ldd	r24, Y+25	; 0x19
    1f52:	80 68       	ori	r24, 0x80	; 128
    1f54:	89 8f       	std	Y+25, r24	; 0x19
	Send_voidCommand(Local_u8DDRAM_Address);			// Go to this Address
    1f56:	89 8d       	ldd	r24, Y+25	; 0x19
    1f58:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e2       	ldi	r26, 0x20	; 32
    1f62:	b2 e4       	ldi	r27, 0x42	; 66
    1f64:	8d 8b       	std	Y+21, r24	; 0x15
    1f66:	9e 8b       	std	Y+22, r25	; 0x16
    1f68:	af 8b       	std	Y+23, r26	; 0x17
    1f6a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f70:	8f 89       	ldd	r24, Y+23	; 0x17
    1f72:	98 8d       	ldd	r25, Y+24	; 0x18
    1f74:	2b ea       	ldi	r18, 0xAB	; 171
    1f76:	3a ea       	ldi	r19, 0xAA	; 170
    1f78:	4a ea       	ldi	r20, 0xAA	; 170
    1f7a:	50 e4       	ldi	r21, 0x40	; 64
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	89 8b       	std	Y+17, r24	; 0x11
    1f86:	9a 8b       	std	Y+18, r25	; 0x12
    1f88:	ab 8b       	std	Y+19, r26	; 0x13
    1f8a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f8c:	69 89       	ldd	r22, Y+17	; 0x11
    1f8e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f90:	8b 89       	ldd	r24, Y+19	; 0x13
    1f92:	9c 89       	ldd	r25, Y+20	; 0x14
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	1c f4       	brge	.+6      	; 0x1faa <LCD_voidGoToXY+0xaa>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	88 8b       	std	Y+16, r24	; 0x10
    1fa8:	91 c0       	rjmp	.+290    	; 0x20cc <LCD_voidGoToXY+0x1cc>
	else if (__tmp > 255)
    1faa:	69 89       	ldd	r22, Y+17	; 0x11
    1fac:	7a 89       	ldd	r23, Y+18	; 0x12
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	53 e4       	ldi	r21, 0x43	; 67
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <LCD_voidGoToXY+0xc4>
    1fc2:	7b c0       	rjmp	.+246    	; 0x20ba <LCD_voidGoToXY+0x1ba>
	{
		_delay_ms(__us / 1000.0);
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8c 87       	std	Y+12, r24	; 0x0c
    1fde:	9d 87       	std	Y+13, r25	; 0x0d
    1fe0:	ae 87       	std	Y+14, r26	; 0x0e
    1fe2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fe6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fe8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a e7       	ldi	r20, 0x7A	; 122
    1ff2:	55 e4       	ldi	r21, 0x45	; 69
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	88 87       	std	Y+8, r24	; 0x08
    1ffe:	99 87       	std	Y+9, r25	; 0x09
    2000:	aa 87       	std	Y+10, r26	; 0x0a
    2002:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2004:	68 85       	ldd	r22, Y+8	; 0x08
    2006:	79 85       	ldd	r23, Y+9	; 0x09
    2008:	8a 85       	ldd	r24, Y+10	; 0x0a
    200a:	9b 85       	ldd	r25, Y+11	; 0x0b
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_voidGoToXY+0x126>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9f 83       	std	Y+7, r25	; 0x07
    2022:	8e 83       	std	Y+6, r24	; 0x06
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_voidGoToXY+0x1a4>
	else if (__tmp > 65535)
    2026:	68 85       	ldd	r22, Y+8	; 0x08
    2028:	79 85       	ldd	r23, Y+9	; 0x09
    202a:	8a 85       	ldd	r24, Y+10	; 0x0a
    202c:	9b 85       	ldd	r25, Y+11	; 0x0b
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_voidGoToXY+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2040:	7d 85       	ldd	r23, Y+13	; 0x0d
    2042:	8e 85       	ldd	r24, Y+14	; 0x0e
    2044:	9f 85       	ldd	r25, Y+15	; 0x0f
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9f 83       	std	Y+7, r25	; 0x07
    2064:	8e 83       	std	Y+6, r24	; 0x06
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_voidGoToXY+0x186>
    2068:	80 e9       	ldi	r24, 0x90	; 144
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	9d 83       	std	Y+5, r25	; 0x05
    206e:	8c 83       	std	Y+4, r24	; 0x04
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_voidGoToXY+0x174>
    2078:	9d 83       	std	Y+5, r25	; 0x05
    207a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8e 81       	ldd	r24, Y+6	; 0x06
    207e:	9f 81       	ldd	r25, Y+7	; 0x07
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9f 83       	std	Y+7, r25	; 0x07
    2084:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	9f 81       	ldd	r25, Y+7	; 0x07
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_voidGoToXY+0x168>
    208e:	24 c0       	rjmp	.+72     	; 0x20d8 <LCD_voidGoToXY+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	68 85       	ldd	r22, Y+8	; 0x08
    2092:	79 85       	ldd	r23, Y+9	; 0x09
    2094:	8a 85       	ldd	r24, Y+10	; 0x0a
    2096:	9b 85       	ldd	r25, Y+11	; 0x0b
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9f 83       	std	Y+7, r25	; 0x07
    20a2:	8e 83       	std	Y+6, r24	; 0x06
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_voidGoToXY+0x1b0>
    20b4:	9b 83       	std	Y+3, r25	; 0x03
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_voidGoToXY+0x1d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ba:	69 89       	ldd	r22, Y+17	; 0x11
    20bc:	7a 89       	ldd	r23, Y+18	; 0x12
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	88 8b       	std	Y+16, r24	; 0x10
    20cc:	88 89       	ldd	r24, Y+16	; 0x10
    20ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8a 95       	dec	r24
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_voidGoToXY+0x1d2>
    20d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
}
    20d8:	6b 96       	adiw	r28, 0x1b	; 27
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <LCD_voidWriteDecimal>:



void LCD_voidWriteDecimal(s32 copy_s32Number) {
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	60 97       	sbiw	r28, 0x10	; 16
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	6d 87       	std	Y+13, r22	; 0x0d
    2104:	7e 87       	std	Y+14, r23	; 0x0e
    2106:	8f 87       	std	Y+15, r24	; 0x0f
    2108:	98 8b       	std	Y+16, r25	; 0x10

	if (copy_s32Number < 0)
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	af 85       	ldd	r26, Y+15	; 0x0f
    2110:	b8 89       	ldd	r27, Y+16	; 0x10
    2112:	bb 23       	and	r27, r27
    2114:	94 f4       	brge	.+36     	; 0x213a <LCD_voidWriteDecimal+0x50>
	{
		Send_voidData('-'); // Display negative sign
    2116:	8d e2       	ldi	r24, 0x2D	; 45
    2118:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
		copy_s32Number = -copy_s32Number; // Convert to positive number
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	af 85       	ldd	r26, Y+15	; 0x0f
    2122:	b8 89       	ldd	r27, Y+16	; 0x10
    2124:	b0 95       	com	r27
    2126:	a0 95       	com	r26
    2128:	90 95       	com	r25
    212a:	81 95       	neg	r24
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	af 4f       	sbci	r26, 0xFF	; 255
    2130:	bf 4f       	sbci	r27, 0xFF	; 255
    2132:	8d 87       	std	Y+13, r24	; 0x0d
    2134:	9e 87       	std	Y+14, r25	; 0x0e
    2136:	af 87       	std	Y+15, r26	; 0x0f
    2138:	b8 8b       	std	Y+16, r27	; 0x10
//    {
//    	LCD_voidSendData('0');
//    	return ;
//    }

    u8 digits[10] = {0}; // Array to store up to 10 digits (maximum for s32)
    213a:	8a e0       	ldi	r24, 0x0A	; 10
    213c:	fe 01       	movw	r30, r28
    213e:	33 96       	adiw	r30, 0x03	; 3
    2140:	df 01       	movw	r26, r30
    2142:	98 2f       	mov	r25, r24
    2144:	1d 92       	st	X+, r1
    2146:	9a 95       	dec	r25
    2148:	e9 f7       	brne	.-6      	; 0x2144 <LCD_voidWriteDecimal+0x5a>
    u8 digits_No = 0;
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	2d c0       	rjmp	.+90     	; 0x21a8 <LCD_voidWriteDecimal+0xbe>

    while (copy_s32Number > 0)
    {
        digits[digits_No] = copy_s32Number % 10; // Extract the least significant digit
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	08 2f       	mov	r16, r24
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	af 85       	ldd	r26, Y+15	; 0x0f
    215a:	b8 89       	ldd	r27, Y+16	; 0x10
    215c:	2a e0       	ldi	r18, 0x0A	; 10
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <__divmodsi4>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	28 2f       	mov	r18, r24
    2172:	ce 01       	movw	r24, r28
    2174:	03 96       	adiw	r24, 0x03	; 3
    2176:	fc 01       	movw	r30, r24
    2178:	e0 0f       	add	r30, r16
    217a:	f1 1f       	adc	r31, r17
    217c:	20 83       	st	Z, r18
        copy_s32Number /= 10; // Move to the next digit
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	af 85       	ldd	r26, Y+15	; 0x0f
    2184:	b8 89       	ldd	r27, Y+16	; 0x10
    2186:	2a e0       	ldi	r18, 0x0A	; 10
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <__divmodsi4>
    2196:	da 01       	movw	r26, r20
    2198:	c9 01       	movw	r24, r18
    219a:	8d 87       	std	Y+13, r24	; 0x0d
    219c:	9e 87       	std	Y+14, r25	; 0x0e
    219e:	af 87       	std	Y+15, r26	; 0x0f
    21a0:	b8 8b       	std	Y+16, r27	; 0x10
        digits_No++;
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	8a 83       	std	Y+2, r24	; 0x02
//    }

    u8 digits[10] = {0}; // Array to store up to 10 digits (maximum for s32)
    u8 digits_No = 0;

    while (copy_s32Number > 0)
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	af 85       	ldd	r26, Y+15	; 0x0f
    21ae:	b8 89       	ldd	r27, Y+16	; 0x10
    21b0:	18 16       	cp	r1, r24
    21b2:	19 06       	cpc	r1, r25
    21b4:	1a 06       	cpc	r1, r26
    21b6:	1b 06       	cpc	r1, r27
    21b8:	54 f2       	brlt	.-108    	; 0x214e <LCD_voidWriteDecimal+0x64>
        digits[digits_No] = copy_s32Number % 10; // Extract the least significant digit
        copy_s32Number /= 10; // Move to the next digit
        digits_No++;
    }

    if (digits_No == 0) {
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	88 23       	and	r24, r24
    21be:	11 f4       	brne	.+4      	; 0x21c4 <LCD_voidWriteDecimal+0xda>
        digits_No = 1; // At least one digit (zero) should be displayed
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	8a 83       	std	Y+2, r24	; 0x02
    }

    for (u8 i = digits_No; i > 0; i--) {
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	12 c0       	rjmp	.+36     	; 0x21ee <LCD_voidWriteDecimal+0x104>
    	Send_voidData(digits[i - 1] + '0'); // Display the digit on LCD
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 01       	movw	r18, r24
    21d2:	21 50       	subi	r18, 0x01	; 1
    21d4:	30 40       	sbci	r19, 0x00	; 0
    21d6:	ce 01       	movw	r24, r28
    21d8:	03 96       	adiw	r24, 0x03	; 3
    21da:	fc 01       	movw	r30, r24
    21dc:	e2 0f       	add	r30, r18
    21de:	f3 1f       	adc	r31, r19
    21e0:	80 81       	ld	r24, Z
    21e2:	80 5d       	subi	r24, 0xD0	; 208
    21e4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>

    if (digits_No == 0) {
        digits_No = 1; // At least one digit (zero) should be displayed
    }

    for (u8 i = digits_No; i > 0; i--) {
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	81 50       	subi	r24, 0x01	; 1
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	88 23       	and	r24, r24
    21f2:	59 f7       	brne	.-42     	; 0x21ca <LCD_voidWriteDecimal+0xe0>
    	Send_voidData(digits[i - 1] + '0'); // Display the digit on LCD
    }
}
    21f4:	60 96       	adiw	r28, 0x10	; 16
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	08 95       	ret

0000220a <LCD_voidWriteFloat>:

void LCD_voidWriteFloat(f32 copy_f32Number)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	2d 97       	sbiw	r28, 0x0d	; 13
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	6a 87       	std	Y+10, r22	; 0x0a
    2220:	7b 87       	std	Y+11, r23	; 0x0b
    2222:	8c 87       	std	Y+12, r24	; 0x0c
    2224:	9d 87       	std	Y+13, r25	; 0x0d
    // Split the float number into its integer and fractional parts
    s32 Local_s32IntegerPart = (s32)copy_f32Number;
    2226:	6a 85       	ldd	r22, Y+10	; 0x0a
    2228:	7b 85       	ldd	r23, Y+11	; 0x0b
    222a:	8c 85       	ldd	r24, Y+12	; 0x0c
    222c:	9d 85       	ldd	r25, Y+13	; 0x0d
    222e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8e 83       	std	Y+6, r24	; 0x06
    2238:	9f 83       	std	Y+7, r25	; 0x07
    223a:	a8 87       	std	Y+8, r26	; 0x08
    223c:	b9 87       	std	Y+9, r27	; 0x09
    f32 Local_f32FractionalPart = copy_f32Number - Local_s32IntegerPart;
    223e:	6e 81       	ldd	r22, Y+6	; 0x06
    2240:	7f 81       	ldd	r23, Y+7	; 0x07
    2242:	88 85       	ldd	r24, Y+8	; 0x08
    2244:	99 85       	ldd	r25, Y+9	; 0x09
    2246:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2250:	7b 85       	ldd	r23, Y+11	; 0x0b
    2252:	8c 85       	ldd	r24, Y+12	; 0x0c
    2254:	9d 85       	ldd	r25, Y+13	; 0x0d
    2256:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	9b 83       	std	Y+3, r25	; 0x03
    2262:	ac 83       	std	Y+4, r26	; 0x04
    2264:	bd 83       	std	Y+5, r27	; 0x05

    // Write the integer part to the LCD
    LCD_voidWriteDecimal(Local_s32IntegerPart);
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	a8 85       	ldd	r26, Y+8	; 0x08
    226c:	b9 85       	ldd	r27, Y+9	; 0x09
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>

    // Write the decimal point to the LCD
    LCD_voidWriteCharacter('.');
    2276:	8e e2       	ldi	r24, 0x2E	; 46
    2278:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidWriteCharacter>

    // Write the fractional part to the LCD, multiplied by 100 to get two decimal places
    u8 Local_u8FractionalPartAsInteger = (u8)(Local_f32FractionalPart * 100);
    227c:	6a 81       	ldd	r22, Y+2	; 0x02
    227e:	7b 81       	ldd	r23, Y+3	; 0x03
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	48 ec       	ldi	r20, 0xC8	; 200
    228a:	52 e4       	ldi	r21, 0x42	; 66
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	89 83       	std	Y+1, r24	; 0x01
    LCD_voidWriteDecimal(Local_u8FractionalPartAsInteger);
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e0       	ldi	r26, 0x00	; 0
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_voidWriteDecimal>
}
    22b4:	2d 96       	adiw	r28, 0x0d	; 13
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <LCD_voidWriteCustomCharacter>:


void LCD_voidWriteCustomCharacter(u8 copy_u8PatternNumber, u8 copy_pu8PatternArr[], u8 copy_u8YPos, u8 copy_u8XPos)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	27 97       	sbiw	r28, 0x07	; 7
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	8b 83       	std	Y+3, r24	; 0x03
    22dc:	7d 83       	std	Y+5, r23	; 0x05
    22de:	6c 83       	std	Y+4, r22	; 0x04
    22e0:	4e 83       	std	Y+6, r20	; 0x06
    22e2:	2f 83       	std	Y+7, r18	; 0x07
	if ( copy_pu8PatternArr != NULL )
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	59 f1       	breq	.+86     	; 0x2342 <LCD_voidWriteCustomCharacter+0x7c>
	{
		u8 Local_u8CGRAM_Address = copy_u8PatternNumber * 8;
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8Counter = 0;
    2300:	19 82       	std	Y+1, r1	; 0x01

		/* Set Bit 6 & Clear Bit 7 for Setting CGRAM Address Command */
		SET_BIT(Local_u8CGRAM_Address , 6) ;
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	80 64       	ori	r24, 0x40	; 64
    2306:	8a 83       	std	Y+2, r24	; 0x02

		/* Set CGRAM Address */
		Send_voidCommand(Local_u8CGRAM_Address);
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <Send_voidCommand>

		/* Write the pattern inside CGRAM */
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter ++)
    230e:	19 82       	std	Y+1, r1	; 0x01
    2310:	0e c0       	rjmp	.+28     	; 0x232e <LCD_voidWriteCustomCharacter+0x68>
		{
			Send_voidData(copy_pu8PatternArr[Local_u8Counter]);
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	9d 81       	ldd	r25, Y+5	; 0x05
    231c:	fc 01       	movw	r30, r24
    231e:	e2 0f       	add	r30, r18
    2320:	f3 1f       	adc	r31, r19
    2322:	80 81       	ld	r24, Z
    2324:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>

		/* Set CGRAM Address */
		Send_voidCommand(Local_u8CGRAM_Address);

		/* Write the pattern inside CGRAM */
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter ++)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	88 30       	cpi	r24, 0x08	; 8
    2332:	78 f3       	brcs	.-34     	; 0x2312 <LCD_voidWriteCustomCharacter+0x4c>
		{
			Send_voidData(copy_pu8PatternArr[Local_u8Counter]);
		}

		/* Set DDRAM Address */
		LCD_voidGoToXY(copy_u8YPos , copy_u8XPos);
    2334:	8e 81       	ldd	r24, Y+6	; 0x06
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_voidGoToXY>

		/* Write the corresponding pattern number to display from CGRAM */
		Send_voidData(copy_u8PatternNumber);
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Send_voidData>
	}
}
    2342:	27 96       	adiw	r28, 0x07	; 7
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <main>:

u8 True[] = { 0x00, 0x00, 0x01, 0x02, 0x14, 0x08, 0x00, 0x00 };
u8 False[] = { 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00, 0x00 };

int main()
{
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	c6 50       	subi	r28, 0x06	; 6
    2362:	d2 40       	sbci	r29, 0x02	; 2
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61

	LCD_voidInit();
    236e:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_voidInit>

	/*Welcome*/
	LCD_voidWriteStringAtXY("HELLO ...", 0, 0);
    2372:	80 e6       	ldi	r24, 0x60	; 96
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("Welcome Everybody", 1, 0);
    237e:	8a e6       	ldi	r24, 0x6A	; 106
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("I'm Mohamed Harb", 2, 0);
    238a:	8c e7       	ldi	r24, 0x7C	; 124
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	62 e0       	ldi	r22, 0x02	; 2
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteCustomCharacter(0, Smile, 3, 7);
    2396:	24 e4       	ldi	r18, 0x44	; 68
    2398:	33 e0       	ldi	r19, 0x03	; 3
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	b9 01       	movw	r22, r18
    239e:	43 e0       	ldi	r20, 0x03	; 3
    23a0:	27 e0       	ldi	r18, 0x07	; 7
    23a2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Smile, 3, 9);
    23a6:	24 e4       	ldi	r18, 0x44	; 68
    23a8:	33 e0       	ldi	r19, 0x03	; 3
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	b9 01       	movw	r22, r18
    23ae:	43 e0       	ldi	r20, 0x03	; 3
    23b0:	29 e0       	ldi	r18, 0x09	; 9
    23b2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Smile, 3, 11);
    23b6:	24 e4       	ldi	r18, 0x44	; 68
    23b8:	33 e0       	ldi	r19, 0x03	; 3
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	b9 01       	movw	r22, r18
    23be:	43 e0       	ldi	r20, 0x03	; 3
    23c0:	2b e0       	ldi	r18, 0x0B	; 11
    23c2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    23c6:	fe 01       	movw	r30, r28
    23c8:	ed 5f       	subi	r30, 0xFD	; 253
    23ca:	fd 4f       	sbci	r31, 0xFD	; 253
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e8       	ldi	r25, 0x80	; 128
    23d0:	ab eb       	ldi	r26, 0xBB	; 187
    23d2:	b4 e4       	ldi	r27, 0x44	; 68
    23d4:	80 83       	st	Z, r24
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	a2 83       	std	Z+2, r26	; 0x02
    23da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	8e 01       	movw	r16, r28
    23de:	01 50       	subi	r16, 0x01	; 1
    23e0:	1e 4f       	sbci	r17, 0xFE	; 254
    23e2:	fe 01       	movw	r30, r28
    23e4:	ed 5f       	subi	r30, 0xFD	; 253
    23e6:	fd 4f       	sbci	r31, 0xFD	; 253
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a e7       	ldi	r20, 0x7A	; 122
    23f6:	55 e4       	ldi	r21, 0x45	; 69
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	80 83       	st	Z, r24
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	a2 83       	std	Z+2, r26	; 0x02
    2408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    240a:	fe 01       	movw	r30, r28
    240c:	e1 50       	subi	r30, 0x01	; 1
    240e:	fe 4f       	sbci	r31, 0xFE	; 254
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	44 f4       	brge	.+16     	; 0x2438 <main+0xe4>
		__ticks = 1;
    2428:	fe 01       	movw	r30, r28
    242a:	e3 50       	subi	r30, 0x03	; 3
    242c:	fe 4f       	sbci	r31, 0xFE	; 254
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	64 c0       	rjmp	.+200    	; 0x2500 <main+0x1ac>
	else if (__tmp > 65535)
    2438:	fe 01       	movw	r30, r28
    243a:	e1 50       	subi	r30, 0x01	; 1
    243c:	fe 4f       	sbci	r31, 0xFE	; 254
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	0c f0       	brlt	.+2      	; 0x2458 <main+0x104>
    2456:	43 c0       	rjmp	.+134    	; 0x24de <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2458:	fe 01       	movw	r30, r28
    245a:	ed 5f       	subi	r30, 0xFD	; 253
    245c:	fd 4f       	sbci	r31, 0xFD	; 253
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8e 01       	movw	r16, r28
    2478:	03 50       	subi	r16, 0x03	; 3
    247a:	1e 4f       	sbci	r17, 0xFE	; 254
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	1f c0       	rjmp	.+62     	; 0x24ce <main+0x17a>
    2490:	fe 01       	movw	r30, r28
    2492:	e5 50       	subi	r30, 0x05	; 5
    2494:	fe 4f       	sbci	r31, 0xFE	; 254
    2496:	80 e9       	ldi	r24, 0x90	; 144
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    249e:	fe 01       	movw	r30, r28
    24a0:	e5 50       	subi	r30, 0x05	; 5
    24a2:	fe 4f       	sbci	r31, 0xFE	; 254
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <main+0x154>
    24ac:	fe 01       	movw	r30, r28
    24ae:	e5 50       	subi	r30, 0x05	; 5
    24b0:	fe 4f       	sbci	r31, 0xFE	; 254
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	de 01       	movw	r26, r28
    24b8:	a3 50       	subi	r26, 0x03	; 3
    24ba:	be 4f       	sbci	r27, 0xFE	; 254
    24bc:	fe 01       	movw	r30, r28
    24be:	e3 50       	subi	r30, 0x03	; 3
    24c0:	fe 4f       	sbci	r31, 0xFE	; 254
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	11 96       	adiw	r26, 0x01	; 1
    24ca:	9c 93       	st	X, r25
    24cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e3 50       	subi	r30, 0x03	; 3
    24d2:	fe 4f       	sbci	r31, 0xFE	; 254
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	d1 f6       	brne	.-76     	; 0x2490 <main+0x13c>
    24dc:	27 c0       	rjmp	.+78     	; 0x252c <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24de:	8e 01       	movw	r16, r28
    24e0:	03 50       	subi	r16, 0x03	; 3
    24e2:	1e 4f       	sbci	r17, 0xFE	; 254
    24e4:	fe 01       	movw	r30, r28
    24e6:	e1 50       	subi	r30, 0x01	; 1
    24e8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	de 01       	movw	r26, r28
    2502:	a7 50       	subi	r26, 0x07	; 7
    2504:	be 4f       	sbci	r27, 0xFE	; 254
    2506:	fe 01       	movw	r30, r28
    2508:	e3 50       	subi	r30, 0x03	; 3
    250a:	fe 4f       	sbci	r31, 0xFE	; 254
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	8d 93       	st	X+, r24
    2512:	9c 93       	st	X, r25
    2514:	fe 01       	movw	r30, r28
    2516:	e7 50       	subi	r30, 0x07	; 7
    2518:	fe 4f       	sbci	r31, 0xFE	; 254
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <main+0x1ca>
    2522:	fe 01       	movw	r30, r28
    2524:	e7 50       	subi	r30, 0x07	; 7
    2526:	fe 4f       	sbci	r31, 0xFE	; 254
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCD_voidClear();
    252c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>

	LCD_voidWriteStringAtXY("I will tell you", 0, 0);
    2530:	8d e8       	ldi	r24, 0x8D	; 141
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("a short story about:", 1, 0);
    253c:	8d e9       	ldi	r24, 0x9D	; 157
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("1- Hamoksha", 2, 0);
    2548:	82 eb       	ldi	r24, 0xB2	; 178
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	62 e0       	ldi	r22, 0x02	; 2
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 2, 16);
    2554:	24 ef       	ldi	r18, 0xF4	; 244
    2556:	32 e0       	ldi	r19, 0x02	; 2
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	b9 01       	movw	r22, r18
    255c:	42 e0       	ldi	r20, 0x02	; 2
    255e:	20 e1       	ldi	r18, 0x10	; 16
    2560:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteStringAtXY("2- Hazalkom", 3, 0);
    2564:	8e eb       	ldi	r24, 0xBE	; 190
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 16);
    2570:	2c e4       	ldi	r18, 0x4C	; 76
    2572:	33 e0       	ldi	r19, 0x03	; 3
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	b9 01       	movw	r22, r18
    2578:	43 e0       	ldi	r20, 0x03	; 3
    257a:	20 e1       	ldi	r18, 0x10	; 16
    257c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    2580:	fe 01       	movw	r30, r28
    2582:	eb 50       	subi	r30, 0x0B	; 11
    2584:	fe 4f       	sbci	r31, 0xFE	; 254
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e8       	ldi	r25, 0x80	; 128
    258a:	ab eb       	ldi	r26, 0xBB	; 187
    258c:	b4 e4       	ldi	r27, 0x44	; 68
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	8e 01       	movw	r16, r28
    2598:	0f 50       	subi	r16, 0x0F	; 15
    259a:	1e 4f       	sbci	r17, 0xFE	; 254
    259c:	fe 01       	movw	r30, r28
    259e:	eb 50       	subi	r30, 0x0B	; 11
    25a0:	fe 4f       	sbci	r31, 0xFE	; 254
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a e7       	ldi	r20, 0x7A	; 122
    25b0:	55 e4       	ldi	r21, 0x45	; 69
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	f8 01       	movw	r30, r16
    25bc:	80 83       	st	Z, r24
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	a2 83       	std	Z+2, r26	; 0x02
    25c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c4:	fe 01       	movw	r30, r28
    25c6:	ef 50       	subi	r30, 0x0F	; 15
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	82 81       	ldd	r24, Z+2	; 0x02
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	44 f4       	brge	.+16     	; 0x25f2 <main+0x29e>
		__ticks = 1;
    25e2:	fe 01       	movw	r30, r28
    25e4:	e1 51       	subi	r30, 0x11	; 17
    25e6:	fe 4f       	sbci	r31, 0xFE	; 254
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	64 c0       	rjmp	.+200    	; 0x26ba <main+0x366>
	else if (__tmp > 65535)
    25f2:	fe 01       	movw	r30, r28
    25f4:	ef 50       	subi	r30, 0x0F	; 15
    25f6:	fe 4f       	sbci	r31, 0xFE	; 254
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f0       	brlt	.+2      	; 0x2612 <main+0x2be>
    2610:	43 c0       	rjmp	.+134    	; 0x2698 <main+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2612:	fe 01       	movw	r30, r28
    2614:	eb 50       	subi	r30, 0x0B	; 11
    2616:	fe 4f       	sbci	r31, 0xFE	; 254
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e2       	ldi	r20, 0x20	; 32
    2626:	51 e4       	ldi	r21, 0x41	; 65
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8e 01       	movw	r16, r28
    2632:	01 51       	subi	r16, 0x11	; 17
    2634:	1e 4f       	sbci	r17, 0xFE	; 254
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	f8 01       	movw	r30, r16
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	1f c0       	rjmp	.+62     	; 0x2688 <main+0x334>
    264a:	fe 01       	movw	r30, r28
    264c:	e3 51       	subi	r30, 0x13	; 19
    264e:	fe 4f       	sbci	r31, 0xFE	; 254
    2650:	80 e9       	ldi	r24, 0x90	; 144
    2652:	91 e0       	ldi	r25, 0x01	; 1
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	fe 01       	movw	r30, r28
    265a:	e3 51       	subi	r30, 0x13	; 19
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <main+0x30e>
    2666:	fe 01       	movw	r30, r28
    2668:	e3 51       	subi	r30, 0x13	; 19
    266a:	fe 4f       	sbci	r31, 0xFE	; 254
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	de 01       	movw	r26, r28
    2672:	a1 51       	subi	r26, 0x11	; 17
    2674:	be 4f       	sbci	r27, 0xFE	; 254
    2676:	fe 01       	movw	r30, r28
    2678:	e1 51       	subi	r30, 0x11	; 17
    267a:	fe 4f       	sbci	r31, 0xFE	; 254
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	11 96       	adiw	r26, 0x01	; 1
    2684:	9c 93       	st	X, r25
    2686:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	fe 01       	movw	r30, r28
    268a:	e1 51       	subi	r30, 0x11	; 17
    268c:	fe 4f       	sbci	r31, 0xFE	; 254
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	d1 f6       	brne	.-76     	; 0x264a <main+0x2f6>
    2696:	27 c0       	rjmp	.+78     	; 0x26e6 <main+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	8e 01       	movw	r16, r28
    269a:	01 51       	subi	r16, 0x11	; 17
    269c:	1e 4f       	sbci	r17, 0xFE	; 254
    269e:	fe 01       	movw	r30, r28
    26a0:	ef 50       	subi	r30, 0x0F	; 15
    26a2:	fe 4f       	sbci	r31, 0xFE	; 254
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	f8 01       	movw	r30, r16
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	80 83       	st	Z, r24
    26ba:	de 01       	movw	r26, r28
    26bc:	a5 51       	subi	r26, 0x15	; 21
    26be:	be 4f       	sbci	r27, 0xFE	; 254
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 51       	subi	r30, 0x11	; 17
    26c4:	fe 4f       	sbci	r31, 0xFE	; 254
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	8d 93       	st	X+, r24
    26cc:	9c 93       	st	X, r25
    26ce:	fe 01       	movw	r30, r28
    26d0:	e5 51       	subi	r30, 0x15	; 21
    26d2:	fe 4f       	sbci	r31, 0xFE	; 254
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <main+0x384>
    26dc:	fe 01       	movw	r30, r28
    26de:	e5 51       	subi	r30, 0x15	; 21
    26e0:	fe 4f       	sbci	r31, 0xFE	; 254
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCD_voidClear();
    26e6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>

	/*Story*/
	LCD_voidWriteStringAtXY("They are Friends", 0, 0);
    26ea:	8a ec       	ldi	r24, 0xCA	; 202
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("....... and .......", 1, 0);
    26f6:	8b ed       	ldi	r24, 0xDB	; 219
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	61 e0       	ldi	r22, 0x01	; 1
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("They love Embedded", 2, 0);
    2702:	8f ee       	ldi	r24, 0xEF	; 239
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	62 e0       	ldi	r22, 0x02	; 2
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("Systems Field, So ..", 3, 0);
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	63 e0       	ldi	r22, 0x03	; 3
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
    271a:	fe 01       	movw	r30, r28
    271c:	e9 51       	subi	r30, 0x19	; 25
    271e:	fe 4f       	sbci	r31, 0xFE	; 254
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	aa ef       	ldi	r26, 0xFA	; 250
    2726:	b4 e4       	ldi	r27, 0x44	; 68
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	8e 01       	movw	r16, r28
    2732:	0d 51       	subi	r16, 0x1D	; 29
    2734:	1e 4f       	sbci	r17, 0xFE	; 254
    2736:	fe 01       	movw	r30, r28
    2738:	e9 51       	subi	r30, 0x19	; 25
    273a:	fe 4f       	sbci	r31, 0xFE	; 254
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a e7       	ldi	r20, 0x7A	; 122
    274a:	55 e4       	ldi	r21, 0x45	; 69
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275e:	fe 01       	movw	r30, r28
    2760:	ed 51       	subi	r30, 0x1D	; 29
    2762:	fe 4f       	sbci	r31, 0xFE	; 254
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	44 f4       	brge	.+16     	; 0x278c <main+0x438>
		__ticks = 1;
    277c:	fe 01       	movw	r30, r28
    277e:	ef 51       	subi	r30, 0x1F	; 31
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	64 c0       	rjmp	.+200    	; 0x2854 <main+0x500>
	else if (__tmp > 65535)
    278c:	fe 01       	movw	r30, r28
    278e:	ed 51       	subi	r30, 0x1D	; 29
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	4f e7       	ldi	r20, 0x7F	; 127
    27a0:	57 e4       	ldi	r21, 0x47	; 71
    27a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a6:	18 16       	cp	r1, r24
    27a8:	0c f0       	brlt	.+2      	; 0x27ac <main+0x458>
    27aa:	43 c0       	rjmp	.+134    	; 0x2832 <main+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	fe 01       	movw	r30, r28
    27ae:	e9 51       	subi	r30, 0x19	; 25
    27b0:	fe 4f       	sbci	r31, 0xFE	; 254
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8e 01       	movw	r16, r28
    27cc:	0f 51       	subi	r16, 0x1F	; 31
    27ce:	1e 4f       	sbci	r17, 0xFE	; 254
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	1f c0       	rjmp	.+62     	; 0x2822 <main+0x4ce>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e1 52       	subi	r30, 0x21	; 33
    27e8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ea:	80 e9       	ldi	r24, 0x90	; 144
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	80 83       	st	Z, r24
    27f2:	fe 01       	movw	r30, r28
    27f4:	e1 52       	subi	r30, 0x21	; 33
    27f6:	fe 4f       	sbci	r31, 0xFE	; 254
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <main+0x4a8>
    2800:	fe 01       	movw	r30, r28
    2802:	e1 52       	subi	r30, 0x21	; 33
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	de 01       	movw	r26, r28
    280c:	af 51       	subi	r26, 0x1F	; 31
    280e:	be 4f       	sbci	r27, 0xFE	; 254
    2810:	fe 01       	movw	r30, r28
    2812:	ef 51       	subi	r30, 0x1F	; 31
    2814:	fe 4f       	sbci	r31, 0xFE	; 254
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	9c 93       	st	X, r25
    2820:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	fe 01       	movw	r30, r28
    2824:	ef 51       	subi	r30, 0x1F	; 31
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	d1 f6       	brne	.-76     	; 0x27e4 <main+0x490>
    2830:	27 c0       	rjmp	.+78     	; 0x2880 <main+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	8e 01       	movw	r16, r28
    2834:	0f 51       	subi	r16, 0x1F	; 31
    2836:	1e 4f       	sbci	r17, 0xFE	; 254
    2838:	fe 01       	movw	r30, r28
    283a:	ed 51       	subi	r30, 0x1D	; 29
    283c:	fe 4f       	sbci	r31, 0xFE	; 254
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	f8 01       	movw	r30, r16
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	de 01       	movw	r26, r28
    2856:	a3 52       	subi	r26, 0x23	; 35
    2858:	be 4f       	sbci	r27, 0xFE	; 254
    285a:	fe 01       	movw	r30, r28
    285c:	ef 51       	subi	r30, 0x1F	; 31
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	8d 93       	st	X+, r24
    2866:	9c 93       	st	X, r25
    2868:	fe 01       	movw	r30, r28
    286a:	e3 52       	subi	r30, 0x23	; 35
    286c:	fe 4f       	sbci	r31, 0xFE	; 254
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <main+0x51e>
    2876:	fe 01       	movw	r30, r28
    2878:	e3 52       	subi	r30, 0x23	; 35
    287a:	fe 4f       	sbci	r31, 0xFE	; 254
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
	_delay_ms(2000);
	LCD_voidClear();
    2880:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>

	/*NTI Application*/
	LCD_voidWriteStringAtXY("They applied to NTI", 0, 0);
    2884:	87 e1       	ldi	r24, 0x17	; 23
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 0);
    2890:	24 ef       	ldi	r18, 0xF4	; 244
    2892:	32 e0       	ldi	r19, 0x02	; 2
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	b9 01       	movw	r22, r18
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteStringAtXY("NTI", 2, 9);
    28a0:	8b e2       	ldi	r24, 0x2B	; 43
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	49 e0       	ldi	r20, 0x09	; 9
    28a8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 0);
    28ac:	2c e4       	ldi	r18, 0x4C	; 76
    28ae:	33 e0       	ldi	r19, 0x03	; 3
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	b9 01       	movw	r22, r18
    28b4:	43 e0       	ldi	r20, 0x03	; 3
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    28bc:	fe 01       	movw	r30, r28
    28be:	e7 52       	subi	r30, 0x27	; 39
    28c0:	fe 4f       	sbci	r31, 0xFE	; 254
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	a8 ec       	ldi	r26, 0xC8	; 200
    28c8:	b2 e4       	ldi	r27, 0x42	; 66
    28ca:	80 83       	st	Z, r24
    28cc:	91 83       	std	Z+1, r25	; 0x01
    28ce:	a2 83       	std	Z+2, r26	; 0x02
    28d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d2:	8e 01       	movw	r16, r28
    28d4:	0b 52       	subi	r16, 0x2B	; 43
    28d6:	1e 4f       	sbci	r17, 0xFE	; 254
    28d8:	fe 01       	movw	r30, r28
    28da:	e7 52       	subi	r30, 0x27	; 39
    28dc:	fe 4f       	sbci	r31, 0xFE	; 254
    28de:	60 81       	ld	r22, Z
    28e0:	71 81       	ldd	r23, Z+1	; 0x01
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a e7       	ldi	r20, 0x7A	; 122
    28ec:	55 e4       	ldi	r21, 0x45	; 69
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	f8 01       	movw	r30, r16
    28f8:	80 83       	st	Z, r24
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	a2 83       	std	Z+2, r26	; 0x02
    28fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2900:	fe 01       	movw	r30, r28
    2902:	eb 52       	subi	r30, 0x2B	; 43
    2904:	fe 4f       	sbci	r31, 0xFE	; 254
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	5f e3       	ldi	r21, 0x3F	; 63
    2916:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291a:	88 23       	and	r24, r24
    291c:	44 f4       	brge	.+16     	; 0x292e <main+0x5da>
		__ticks = 1;
    291e:	fe 01       	movw	r30, r28
    2920:	ed 52       	subi	r30, 0x2D	; 45
    2922:	fe 4f       	sbci	r31, 0xFE	; 254
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	80 83       	st	Z, r24
    292c:	64 c0       	rjmp	.+200    	; 0x29f6 <main+0x6a2>
	else if (__tmp > 65535)
    292e:	fe 01       	movw	r30, r28
    2930:	eb 52       	subi	r30, 0x2B	; 43
    2932:	fe 4f       	sbci	r31, 0xFE	; 254
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	0c f0       	brlt	.+2      	; 0x294e <main+0x5fa>
    294c:	43 c0       	rjmp	.+134    	; 0x29d4 <main+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294e:	fe 01       	movw	r30, r28
    2950:	e7 52       	subi	r30, 0x27	; 39
    2952:	fe 4f       	sbci	r31, 0xFE	; 254
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8e 01       	movw	r16, r28
    296e:	0d 52       	subi	r16, 0x2D	; 45
    2970:	1e 4f       	sbci	r17, 0xFE	; 254
    2972:	bc 01       	movw	r22, r24
    2974:	cd 01       	movw	r24, r26
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	f8 01       	movw	r30, r16
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
    2984:	1f c0       	rjmp	.+62     	; 0x29c4 <main+0x670>
    2986:	fe 01       	movw	r30, r28
    2988:	ef 52       	subi	r30, 0x2F	; 47
    298a:	fe 4f       	sbci	r31, 0xFE	; 254
    298c:	80 e9       	ldi	r24, 0x90	; 144
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	fe 01       	movw	r30, r28
    2996:	ef 52       	subi	r30, 0x2F	; 47
    2998:	fe 4f       	sbci	r31, 0xFE	; 254
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <main+0x64a>
    29a2:	fe 01       	movw	r30, r28
    29a4:	ef 52       	subi	r30, 0x2F	; 47
    29a6:	fe 4f       	sbci	r31, 0xFE	; 254
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	de 01       	movw	r26, r28
    29ae:	ad 52       	subi	r26, 0x2D	; 45
    29b0:	be 4f       	sbci	r27, 0xFE	; 254
    29b2:	fe 01       	movw	r30, r28
    29b4:	ed 52       	subi	r30, 0x2D	; 45
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	11 96       	adiw	r26, 0x01	; 1
    29c0:	9c 93       	st	X, r25
    29c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c4:	fe 01       	movw	r30, r28
    29c6:	ed 52       	subi	r30, 0x2D	; 45
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	80 81       	ld	r24, Z
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	d1 f6       	brne	.-76     	; 0x2986 <main+0x632>
    29d2:	27 c0       	rjmp	.+78     	; 0x2a22 <main+0x6ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	8e 01       	movw	r16, r28
    29d6:	0d 52       	subi	r16, 0x2D	; 45
    29d8:	1e 4f       	sbci	r17, 0xFE	; 254
    29da:	fe 01       	movw	r30, r28
    29dc:	eb 52       	subi	r30, 0x2B	; 43
    29de:	fe 4f       	sbci	r31, 0xFE	; 254
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	f8 01       	movw	r30, r16
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
    29f6:	de 01       	movw	r26, r28
    29f8:	a1 53       	subi	r26, 0x31	; 49
    29fa:	be 4f       	sbci	r27, 0xFE	; 254
    29fc:	fe 01       	movw	r30, r28
    29fe:	ed 52       	subi	r30, 0x2D	; 45
    2a00:	fe 4f       	sbci	r31, 0xFE	; 254
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	8d 93       	st	X+, r24
    2a08:	9c 93       	st	X, r25
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e1 53       	subi	r30, 0x31	; 49
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <main+0x6c0>
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e1 53       	subi	r30, 0x31	; 49
    2a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 0);
    2a22:	80 e2       	ldi	r24, 0x20	; 32
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 0);
    2a2c:	80 e2       	ldi	r24, 0x20	; 32
    2a2e:	63 e0       	ldi	r22, 0x03	; 3
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 1);
    2a36:	24 ef       	ldi	r18, 0xF4	; 244
    2a38:	32 e0       	ldi	r19, 0x02	; 2
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	b9 01       	movw	r22, r18
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	21 e0       	ldi	r18, 0x01	; 1
    2a42:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 1);
    2a46:	2c e4       	ldi	r18, 0x4C	; 76
    2a48:	33 e0       	ldi	r19, 0x03	; 3
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	b9 01       	movw	r22, r18
    2a4e:	43 e0       	ldi	r20, 0x03	; 3
    2a50:	21 e0       	ldi	r18, 0x01	; 1
    2a52:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    2a56:	fe 01       	movw	r30, r28
    2a58:	e5 53       	subi	r30, 0x35	; 53
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a8 ec       	ldi	r26, 0xC8	; 200
    2a62:	b2 e4       	ldi	r27, 0x42	; 66
    2a64:	80 83       	st	Z, r24
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	a2 83       	std	Z+2, r26	; 0x02
    2a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	8e 01       	movw	r16, r28
    2a6e:	09 53       	subi	r16, 0x39	; 57
    2a70:	1e 4f       	sbci	r17, 0xFE	; 254
    2a72:	fe 01       	movw	r30, r28
    2a74:	e5 53       	subi	r30, 0x35	; 53
    2a76:	fe 4f       	sbci	r31, 0xFE	; 254
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	4a e7       	ldi	r20, 0x7A	; 122
    2a86:	55 e4       	ldi	r21, 0x45	; 69
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	f8 01       	movw	r30, r16
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e9 53       	subi	r30, 0x39	; 57
    2a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	44 f4       	brge	.+16     	; 0x2ac8 <main+0x774>
		__ticks = 1;
    2ab8:	fe 01       	movw	r30, r28
    2aba:	eb 53       	subi	r30, 0x3B	; 59
    2abc:	fe 4f       	sbci	r31, 0xFE	; 254
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
    2ac6:	64 c0       	rjmp	.+200    	; 0x2b90 <main+0x83c>
	else if (__tmp > 65535)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e9 53       	subi	r30, 0x39	; 57
    2acc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	0c f0       	brlt	.+2      	; 0x2ae8 <main+0x794>
    2ae6:	43 c0       	rjmp	.+134    	; 0x2b6e <main+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e5 53       	subi	r30, 0x35	; 53
    2aec:	fe 4f       	sbci	r31, 0xFE	; 254
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e2       	ldi	r20, 0x20	; 32
    2afc:	51 e4       	ldi	r21, 0x41	; 65
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8e 01       	movw	r16, r28
    2b08:	0b 53       	subi	r16, 0x3B	; 59
    2b0a:	1e 4f       	sbci	r17, 0xFE	; 254
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	1f c0       	rjmp	.+62     	; 0x2b5e <main+0x80a>
    2b20:	fe 01       	movw	r30, r28
    2b22:	ed 53       	subi	r30, 0x3D	; 61
    2b24:	fe 4f       	sbci	r31, 0xFE	; 254
    2b26:	80 e9       	ldi	r24, 0x90	; 144
    2b28:	91 e0       	ldi	r25, 0x01	; 1
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ed 53       	subi	r30, 0x3D	; 61
    2b32:	fe 4f       	sbci	r31, 0xFE	; 254
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <main+0x7e4>
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ed 53       	subi	r30, 0x3D	; 61
    2b40:	fe 4f       	sbci	r31, 0xFE	; 254
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	de 01       	movw	r26, r28
    2b48:	ab 53       	subi	r26, 0x3B	; 59
    2b4a:	be 4f       	sbci	r27, 0xFE	; 254
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	eb 53       	subi	r30, 0x3B	; 59
    2b50:	fe 4f       	sbci	r31, 0xFE	; 254
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	11 96       	adiw	r26, 0x01	; 1
    2b5a:	9c 93       	st	X, r25
    2b5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	fe 01       	movw	r30, r28
    2b60:	eb 53       	subi	r30, 0x3B	; 59
    2b62:	fe 4f       	sbci	r31, 0xFE	; 254
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	d1 f6       	brne	.-76     	; 0x2b20 <main+0x7cc>
    2b6c:	27 c0       	rjmp	.+78     	; 0x2bbc <main+0x868>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	8e 01       	movw	r16, r28
    2b70:	0b 53       	subi	r16, 0x3B	; 59
    2b72:	1e 4f       	sbci	r17, 0xFE	; 254
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 53       	subi	r30, 0x39	; 57
    2b78:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
    2b90:	de 01       	movw	r26, r28
    2b92:	af 53       	subi	r26, 0x3F	; 63
    2b94:	be 4f       	sbci	r27, 0xFE	; 254
    2b96:	fe 01       	movw	r30, r28
    2b98:	eb 53       	subi	r30, 0x3B	; 59
    2b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	8d 93       	st	X+, r24
    2ba2:	9c 93       	st	X, r25
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ef 53       	subi	r30, 0x3F	; 63
    2ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <main+0x85a>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ef 53       	subi	r30, 0x3F	; 63
    2bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 1);
    2bbc:	80 e2       	ldi	r24, 0x20	; 32
    2bbe:	61 e0       	ldi	r22, 0x01	; 1
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 1);
    2bc6:	80 e2       	ldi	r24, 0x20	; 32
    2bc8:	63 e0       	ldi	r22, 0x03	; 3
    2bca:	41 e0       	ldi	r20, 0x01	; 1
    2bcc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 2);
    2bd0:	24 ef       	ldi	r18, 0xF4	; 244
    2bd2:	32 e0       	ldi	r19, 0x02	; 2
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	b9 01       	movw	r22, r18
    2bd8:	41 e0       	ldi	r20, 0x01	; 1
    2bda:	22 e0       	ldi	r18, 0x02	; 2
    2bdc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 2);
    2be0:	2c e4       	ldi	r18, 0x4C	; 76
    2be2:	33 e0       	ldi	r19, 0x03	; 3
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	b9 01       	movw	r22, r18
    2be8:	43 e0       	ldi	r20, 0x03	; 3
    2bea:	22 e0       	ldi	r18, 0x02	; 2
    2bec:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e3 54       	subi	r30, 0x43	; 67
    2bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a8 ec       	ldi	r26, 0xC8	; 200
    2bfc:	b2 e4       	ldi	r27, 0x42	; 66
    2bfe:	80 83       	st	Z, r24
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	a2 83       	std	Z+2, r26	; 0x02
    2c04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	8e 01       	movw	r16, r28
    2c08:	07 54       	subi	r16, 0x47	; 71
    2c0a:	1e 4f       	sbci	r17, 0xFE	; 254
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e3 54       	subi	r30, 0x43	; 67
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a e7       	ldi	r20, 0x7A	; 122
    2c20:	55 e4       	ldi	r21, 0x45	; 69
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	f8 01       	movw	r30, r16
    2c2c:	80 83       	st	Z, r24
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	a2 83       	std	Z+2, r26	; 0x02
    2c32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c34:	fe 01       	movw	r30, r28
    2c36:	e7 54       	subi	r30, 0x47	; 71
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	60 81       	ld	r22, Z
    2c3c:	71 81       	ldd	r23, Z+1	; 0x01
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e8       	ldi	r20, 0x80	; 128
    2c48:	5f e3       	ldi	r21, 0x3F	; 63
    2c4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c4e:	88 23       	and	r24, r24
    2c50:	44 f4       	brge	.+16     	; 0x2c62 <main+0x90e>
		__ticks = 1;
    2c52:	fe 01       	movw	r30, r28
    2c54:	e9 54       	subi	r30, 0x49	; 73
    2c56:	fe 4f       	sbci	r31, 0xFE	; 254
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	91 83       	std	Z+1, r25	; 0x01
    2c5e:	80 83       	st	Z, r24
    2c60:	64 c0       	rjmp	.+200    	; 0x2d2a <main+0x9d6>
	else if (__tmp > 65535)
    2c62:	fe 01       	movw	r30, r28
    2c64:	e7 54       	subi	r30, 0x47	; 71
    2c66:	fe 4f       	sbci	r31, 0xFE	; 254
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	3f ef       	ldi	r19, 0xFF	; 255
    2c74:	4f e7       	ldi	r20, 0x7F	; 127
    2c76:	57 e4       	ldi	r21, 0x47	; 71
    2c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7c:	18 16       	cp	r1, r24
    2c7e:	0c f0       	brlt	.+2      	; 0x2c82 <main+0x92e>
    2c80:	43 c0       	rjmp	.+134    	; 0x2d08 <main+0x9b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c82:	fe 01       	movw	r30, r28
    2c84:	e3 54       	subi	r30, 0x43	; 67
    2c86:	fe 4f       	sbci	r31, 0xFE	; 254
    2c88:	60 81       	ld	r22, Z
    2c8a:	71 81       	ldd	r23, Z+1	; 0x01
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8e 01       	movw	r16, r28
    2ca2:	09 54       	subi	r16, 0x49	; 73
    2ca4:	1e 4f       	sbci	r17, 0xFE	; 254
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	80 83       	st	Z, r24
    2cb8:	1f c0       	rjmp	.+62     	; 0x2cf8 <main+0x9a4>
    2cba:	fe 01       	movw	r30, r28
    2cbc:	eb 54       	subi	r30, 0x4B	; 75
    2cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc0:	80 e9       	ldi	r24, 0x90	; 144
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
    2cc8:	fe 01       	movw	r30, r28
    2cca:	eb 54       	subi	r30, 0x4B	; 75
    2ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <main+0x97e>
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	eb 54       	subi	r30, 0x4B	; 75
    2cda:	fe 4f       	sbci	r31, 0xFE	; 254
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	de 01       	movw	r26, r28
    2ce2:	a9 54       	subi	r26, 0x49	; 73
    2ce4:	be 4f       	sbci	r27, 0xFE	; 254
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e9 54       	subi	r30, 0x49	; 73
    2cea:	fe 4f       	sbci	r31, 0xFE	; 254
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	11 96       	adiw	r26, 0x01	; 1
    2cf4:	9c 93       	st	X, r25
    2cf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e9 54       	subi	r30, 0x49	; 73
    2cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfe:	80 81       	ld	r24, Z
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	d1 f6       	brne	.-76     	; 0x2cba <main+0x966>
    2d06:	27 c0       	rjmp	.+78     	; 0x2d56 <main+0xa02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	8e 01       	movw	r16, r28
    2d0a:	09 54       	subi	r16, 0x49	; 73
    2d0c:	1e 4f       	sbci	r17, 0xFE	; 254
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 54       	subi	r30, 0x47	; 71
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	f8 01       	movw	r30, r16
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
    2d2a:	de 01       	movw	r26, r28
    2d2c:	ad 54       	subi	r26, 0x4D	; 77
    2d2e:	be 4f       	sbci	r27, 0xFE	; 254
    2d30:	fe 01       	movw	r30, r28
    2d32:	e9 54       	subi	r30, 0x49	; 73
    2d34:	fe 4f       	sbci	r31, 0xFE	; 254
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	8d 93       	st	X+, r24
    2d3c:	9c 93       	st	X, r25
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ed 54       	subi	r30, 0x4D	; 77
    2d42:	fe 4f       	sbci	r31, 0xFE	; 254
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <main+0x9f4>
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ed 54       	subi	r30, 0x4D	; 77
    2d50:	fe 4f       	sbci	r31, 0xFE	; 254
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 2);
    2d56:	80 e2       	ldi	r24, 0x20	; 32
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	42 e0       	ldi	r20, 0x02	; 2
    2d5c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 2);
    2d60:	80 e2       	ldi	r24, 0x20	; 32
    2d62:	63 e0       	ldi	r22, 0x03	; 3
    2d64:	42 e0       	ldi	r20, 0x02	; 2
    2d66:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 3);
    2d6a:	24 ef       	ldi	r18, 0xF4	; 244
    2d6c:	32 e0       	ldi	r19, 0x02	; 2
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	b9 01       	movw	r22, r18
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	23 e0       	ldi	r18, 0x03	; 3
    2d76:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 3);
    2d7a:	2c e4       	ldi	r18, 0x4C	; 76
    2d7c:	33 e0       	ldi	r19, 0x03	; 3
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	b9 01       	movw	r22, r18
    2d82:	43 e0       	ldi	r20, 0x03	; 3
    2d84:	23 e0       	ldi	r18, 0x03	; 3
    2d86:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e1 55       	subi	r30, 0x51	; 81
    2d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a8 ec       	ldi	r26, 0xC8	; 200
    2d96:	b2 e4       	ldi	r27, 0x42	; 66
    2d98:	80 83       	st	Z, r24
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	a2 83       	std	Z+2, r26	; 0x02
    2d9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da0:	8e 01       	movw	r16, r28
    2da2:	05 55       	subi	r16, 0x55	; 85
    2da4:	1e 4f       	sbci	r17, 0xFE	; 254
    2da6:	fe 01       	movw	r30, r28
    2da8:	e1 55       	subi	r30, 0x51	; 81
    2daa:	fe 4f       	sbci	r31, 0xFE	; 254
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	55 e4       	ldi	r21, 0x45	; 69
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	80 83       	st	Z, r24
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	a2 83       	std	Z+2, r26	; 0x02
    2dcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e5 55       	subi	r30, 0x55	; 85
    2dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5f e3       	ldi	r21, 0x3F	; 63
    2de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de8:	88 23       	and	r24, r24
    2dea:	44 f4       	brge	.+16     	; 0x2dfc <main+0xaa8>
		__ticks = 1;
    2dec:	fe 01       	movw	r30, r28
    2dee:	e7 55       	subi	r30, 0x57	; 87
    2df0:	fe 4f       	sbci	r31, 0xFE	; 254
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	80 83       	st	Z, r24
    2dfa:	64 c0       	rjmp	.+200    	; 0x2ec4 <main+0xb70>
	else if (__tmp > 65535)
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e5 55       	subi	r30, 0x55	; 85
    2e00:	fe 4f       	sbci	r31, 0xFE	; 254
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	3f ef       	ldi	r19, 0xFF	; 255
    2e0e:	4f e7       	ldi	r20, 0x7F	; 127
    2e10:	57 e4       	ldi	r21, 0x47	; 71
    2e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e16:	18 16       	cp	r1, r24
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <main+0xac8>
    2e1a:	43 c0       	rjmp	.+134    	; 0x2ea2 <main+0xb4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e1 55       	subi	r30, 0x51	; 81
    2e20:	fe 4f       	sbci	r31, 0xFE	; 254
    2e22:	60 81       	ld	r22, Z
    2e24:	71 81       	ldd	r23, Z+1	; 0x01
    2e26:	82 81       	ldd	r24, Z+2	; 0x02
    2e28:	93 81       	ldd	r25, Z+3	; 0x03
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	07 55       	subi	r16, 0x57	; 87
    2e3e:	1e 4f       	sbci	r17, 0xFE	; 254
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	1f c0       	rjmp	.+62     	; 0x2e92 <main+0xb3e>
    2e54:	fe 01       	movw	r30, r28
    2e56:	e9 55       	subi	r30, 0x59	; 89
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	80 e9       	ldi	r24, 0x90	; 144
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	fe 01       	movw	r30, r28
    2e64:	e9 55       	subi	r30, 0x59	; 89
    2e66:	fe 4f       	sbci	r31, 0xFE	; 254
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <main+0xb18>
    2e70:	fe 01       	movw	r30, r28
    2e72:	e9 55       	subi	r30, 0x59	; 89
    2e74:	fe 4f       	sbci	r31, 0xFE	; 254
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7a:	de 01       	movw	r26, r28
    2e7c:	a7 55       	subi	r26, 0x57	; 87
    2e7e:	be 4f       	sbci	r27, 0xFE	; 254
    2e80:	fe 01       	movw	r30, r28
    2e82:	e7 55       	subi	r30, 0x57	; 87
    2e84:	fe 4f       	sbci	r31, 0xFE	; 254
    2e86:	80 81       	ld	r24, Z
    2e88:	91 81       	ldd	r25, Z+1	; 0x01
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	11 96       	adiw	r26, 0x01	; 1
    2e8e:	9c 93       	st	X, r25
    2e90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e92:	fe 01       	movw	r30, r28
    2e94:	e7 55       	subi	r30, 0x57	; 87
    2e96:	fe 4f       	sbci	r31, 0xFE	; 254
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	d1 f6       	brne	.-76     	; 0x2e54 <main+0xb00>
    2ea0:	27 c0       	rjmp	.+78     	; 0x2ef0 <main+0xb9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	07 55       	subi	r16, 0x57	; 87
    2ea6:	1e 4f       	sbci	r17, 0xFE	; 254
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e5 55       	subi	r30, 0x55	; 85
    2eac:	fe 4f       	sbci	r31, 0xFE	; 254
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	80 83       	st	Z, r24
    2ec4:	de 01       	movw	r26, r28
    2ec6:	ab 55       	subi	r26, 0x5B	; 91
    2ec8:	be 4f       	sbci	r27, 0xFE	; 254
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e7 55       	subi	r30, 0x57	; 87
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	8d 93       	st	X+, r24
    2ed6:	9c 93       	st	X, r25
    2ed8:	fe 01       	movw	r30, r28
    2eda:	eb 55       	subi	r30, 0x5B	; 91
    2edc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <main+0xb8e>
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	eb 55       	subi	r30, 0x5B	; 91
    2eea:	fe 4f       	sbci	r31, 0xFE	; 254
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 3);
    2ef0:	80 e2       	ldi	r24, 0x20	; 32
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	43 e0       	ldi	r20, 0x03	; 3
    2ef6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 3);
    2efa:	80 e2       	ldi	r24, 0x20	; 32
    2efc:	63 e0       	ldi	r22, 0x03	; 3
    2efe:	43 e0       	ldi	r20, 0x03	; 3
    2f00:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 4);
    2f04:	24 ef       	ldi	r18, 0xF4	; 244
    2f06:	32 e0       	ldi	r19, 0x02	; 2
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	24 e0       	ldi	r18, 0x04	; 4
    2f10:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 4);
    2f14:	2c e4       	ldi	r18, 0x4C	; 76
    2f16:	33 e0       	ldi	r19, 0x03	; 3
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	b9 01       	movw	r22, r18
    2f1c:	43 e0       	ldi	r20, 0x03	; 3
    2f1e:	24 e0       	ldi	r18, 0x04	; 4
    2f20:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    2f24:	fe 01       	movw	r30, r28
    2f26:	ef 55       	subi	r30, 0x5F	; 95
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a8 ec       	ldi	r26, 0xC8	; 200
    2f30:	b2 e4       	ldi	r27, 0x42	; 66
    2f32:	80 83       	st	Z, r24
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	a2 83       	std	Z+2, r26	; 0x02
    2f38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	03 56       	subi	r16, 0x63	; 99
    2f3e:	1e 4f       	sbci	r17, 0xFE	; 254
    2f40:	fe 01       	movw	r30, r28
    2f42:	ef 55       	subi	r30, 0x5F	; 95
    2f44:	fe 4f       	sbci	r31, 0xFE	; 254
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	4a e7       	ldi	r20, 0x7A	; 122
    2f54:	55 e4       	ldi	r21, 0x45	; 69
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 83       	st	Z, r24
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	a2 83       	std	Z+2, r26	; 0x02
    2f66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e3 56       	subi	r30, 0x63	; 99
    2f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	44 f4       	brge	.+16     	; 0x2f96 <main+0xc42>
		__ticks = 1;
    2f86:	fe 01       	movw	r30, r28
    2f88:	e5 56       	subi	r30, 0x65	; 101
    2f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	64 c0       	rjmp	.+200    	; 0x305e <main+0xd0a>
	else if (__tmp > 65535)
    2f96:	fe 01       	movw	r30, r28
    2f98:	e3 56       	subi	r30, 0x63	; 99
    2f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	0c f0       	brlt	.+2      	; 0x2fb6 <main+0xc62>
    2fb4:	43 c0       	rjmp	.+134    	; 0x303c <main+0xce8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ef 55       	subi	r30, 0x5F	; 95
    2fba:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8e 01       	movw	r16, r28
    2fd6:	05 56       	subi	r16, 0x65	; 101
    2fd8:	1e 4f       	sbci	r17, 0xFE	; 254
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    2fec:	1f c0       	rjmp	.+62     	; 0x302c <main+0xcd8>
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e7 56       	subi	r30, 0x67	; 103
    2ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	80 83       	st	Z, r24
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e7 56       	subi	r30, 0x67	; 103
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <main+0xcb2>
    300a:	fe 01       	movw	r30, r28
    300c:	e7 56       	subi	r30, 0x67	; 103
    300e:	fe 4f       	sbci	r31, 0xFE	; 254
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3014:	de 01       	movw	r26, r28
    3016:	a5 56       	subi	r26, 0x65	; 101
    3018:	be 4f       	sbci	r27, 0xFE	; 254
    301a:	fe 01       	movw	r30, r28
    301c:	e5 56       	subi	r30, 0x65	; 101
    301e:	fe 4f       	sbci	r31, 0xFE	; 254
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	9c 93       	st	X, r25
    302a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302c:	fe 01       	movw	r30, r28
    302e:	e5 56       	subi	r30, 0x65	; 101
    3030:	fe 4f       	sbci	r31, 0xFE	; 254
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	d1 f6       	brne	.-76     	; 0x2fee <main+0xc9a>
    303a:	27 c0       	rjmp	.+78     	; 0x308a <main+0xd36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	8e 01       	movw	r16, r28
    303e:	05 56       	subi	r16, 0x65	; 101
    3040:	1e 4f       	sbci	r17, 0xFE	; 254
    3042:	fe 01       	movw	r30, r28
    3044:	e3 56       	subi	r30, 0x63	; 99
    3046:	fe 4f       	sbci	r31, 0xFE	; 254
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	f8 01       	movw	r30, r16
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	80 83       	st	Z, r24
    305e:	de 01       	movw	r26, r28
    3060:	a9 56       	subi	r26, 0x69	; 105
    3062:	be 4f       	sbci	r27, 0xFE	; 254
    3064:	fe 01       	movw	r30, r28
    3066:	e5 56       	subi	r30, 0x65	; 101
    3068:	fe 4f       	sbci	r31, 0xFE	; 254
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	8d 93       	st	X+, r24
    3070:	9c 93       	st	X, r25
    3072:	fe 01       	movw	r30, r28
    3074:	e9 56       	subi	r30, 0x69	; 105
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <main+0xd28>
    3080:	fe 01       	movw	r30, r28
    3082:	e9 56       	subi	r30, 0x69	; 105
    3084:	fe 4f       	sbci	r31, 0xFE	; 254
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 4);
    308a:	80 e2       	ldi	r24, 0x20	; 32
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	44 e0       	ldi	r20, 0x04	; 4
    3090:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 4);
    3094:	80 e2       	ldi	r24, 0x20	; 32
    3096:	63 e0       	ldi	r22, 0x03	; 3
    3098:	44 e0       	ldi	r20, 0x04	; 4
    309a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 5);
    309e:	24 ef       	ldi	r18, 0xF4	; 244
    30a0:	32 e0       	ldi	r19, 0x02	; 2
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	b9 01       	movw	r22, r18
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	25 e0       	ldi	r18, 0x05	; 5
    30aa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 5);
    30ae:	2c e4       	ldi	r18, 0x4C	; 76
    30b0:	33 e0       	ldi	r19, 0x03	; 3
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	b9 01       	movw	r22, r18
    30b6:	43 e0       	ldi	r20, 0x03	; 3
    30b8:	25 e0       	ldi	r18, 0x05	; 5
    30ba:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    30be:	fe 01       	movw	r30, r28
    30c0:	ed 56       	subi	r30, 0x6D	; 109
    30c2:	fe 4f       	sbci	r31, 0xFE	; 254
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a8 ec       	ldi	r26, 0xC8	; 200
    30ca:	b2 e4       	ldi	r27, 0x42	; 66
    30cc:	80 83       	st	Z, r24
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	a2 83       	std	Z+2, r26	; 0x02
    30d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	8e 01       	movw	r16, r28
    30d6:	01 57       	subi	r16, 0x71	; 113
    30d8:	1e 4f       	sbci	r17, 0xFE	; 254
    30da:	fe 01       	movw	r30, r28
    30dc:	ed 56       	subi	r30, 0x6D	; 109
    30de:	fe 4f       	sbci	r31, 0xFE	; 254
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	93 81       	ldd	r25, Z+3	; 0x03
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	55 e4       	ldi	r21, 0x45	; 69
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	f8 01       	movw	r30, r16
    30fa:	80 83       	st	Z, r24
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	a2 83       	std	Z+2, r26	; 0x02
    3100:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3102:	fe 01       	movw	r30, r28
    3104:	e1 57       	subi	r30, 0x71	; 113
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	44 f4       	brge	.+16     	; 0x3130 <main+0xddc>
		__ticks = 1;
    3120:	fe 01       	movw	r30, r28
    3122:	e3 57       	subi	r30, 0x73	; 115
    3124:	fe 4f       	sbci	r31, 0xFE	; 254
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
    312e:	64 c0       	rjmp	.+200    	; 0x31f8 <main+0xea4>
	else if (__tmp > 65535)
    3130:	fe 01       	movw	r30, r28
    3132:	e1 57       	subi	r30, 0x71	; 113
    3134:	fe 4f       	sbci	r31, 0xFE	; 254
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	57 e4       	ldi	r21, 0x47	; 71
    3146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	0c f0       	brlt	.+2      	; 0x3150 <main+0xdfc>
    314e:	43 c0       	rjmp	.+134    	; 0x31d6 <main+0xe82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3150:	fe 01       	movw	r30, r28
    3152:	ed 56       	subi	r30, 0x6D	; 109
    3154:	fe 4f       	sbci	r31, 0xFE	; 254
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8e 01       	movw	r16, r28
    3170:	03 57       	subi	r16, 0x73	; 115
    3172:	1e 4f       	sbci	r17, 0xFE	; 254
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	f8 01       	movw	r30, r16
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	1f c0       	rjmp	.+62     	; 0x31c6 <main+0xe72>
    3188:	fe 01       	movw	r30, r28
    318a:	e5 57       	subi	r30, 0x75	; 117
    318c:	fe 4f       	sbci	r31, 0xFE	; 254
    318e:	80 e9       	ldi	r24, 0x90	; 144
    3190:	91 e0       	ldi	r25, 0x01	; 1
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	80 83       	st	Z, r24
    3196:	fe 01       	movw	r30, r28
    3198:	e5 57       	subi	r30, 0x75	; 117
    319a:	fe 4f       	sbci	r31, 0xFE	; 254
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <main+0xe4c>
    31a4:	fe 01       	movw	r30, r28
    31a6:	e5 57       	subi	r30, 0x75	; 117
    31a8:	fe 4f       	sbci	r31, 0xFE	; 254
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	de 01       	movw	r26, r28
    31b0:	a3 57       	subi	r26, 0x73	; 115
    31b2:	be 4f       	sbci	r27, 0xFE	; 254
    31b4:	fe 01       	movw	r30, r28
    31b6:	e3 57       	subi	r30, 0x73	; 115
    31b8:	fe 4f       	sbci	r31, 0xFE	; 254
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	11 96       	adiw	r26, 0x01	; 1
    31c2:	9c 93       	st	X, r25
    31c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c6:	fe 01       	movw	r30, r28
    31c8:	e3 57       	subi	r30, 0x73	; 115
    31ca:	fe 4f       	sbci	r31, 0xFE	; 254
    31cc:	80 81       	ld	r24, Z
    31ce:	91 81       	ldd	r25, Z+1	; 0x01
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	d1 f6       	brne	.-76     	; 0x3188 <main+0xe34>
    31d4:	27 c0       	rjmp	.+78     	; 0x3224 <main+0xed0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	8e 01       	movw	r16, r28
    31d8:	03 57       	subi	r16, 0x73	; 115
    31da:	1e 4f       	sbci	r17, 0xFE	; 254
    31dc:	fe 01       	movw	r30, r28
    31de:	e1 57       	subi	r30, 0x71	; 113
    31e0:	fe 4f       	sbci	r31, 0xFE	; 254
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	f8 01       	movw	r30, r16
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
    31f8:	de 01       	movw	r26, r28
    31fa:	a7 57       	subi	r26, 0x77	; 119
    31fc:	be 4f       	sbci	r27, 0xFE	; 254
    31fe:	fe 01       	movw	r30, r28
    3200:	e3 57       	subi	r30, 0x73	; 115
    3202:	fe 4f       	sbci	r31, 0xFE	; 254
    3204:	80 81       	ld	r24, Z
    3206:	91 81       	ldd	r25, Z+1	; 0x01
    3208:	8d 93       	st	X+, r24
    320a:	9c 93       	st	X, r25
    320c:	fe 01       	movw	r30, r28
    320e:	e7 57       	subi	r30, 0x77	; 119
    3210:	fe 4f       	sbci	r31, 0xFE	; 254
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <main+0xec2>
    321a:	fe 01       	movw	r30, r28
    321c:	e7 57       	subi	r30, 0x77	; 119
    321e:	fe 4f       	sbci	r31, 0xFE	; 254
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 5);
    3224:	80 e2       	ldi	r24, 0x20	; 32
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	45 e0       	ldi	r20, 0x05	; 5
    322a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 5);
    322e:	80 e2       	ldi	r24, 0x20	; 32
    3230:	63 e0       	ldi	r22, 0x03	; 3
    3232:	45 e0       	ldi	r20, 0x05	; 5
    3234:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 6);
    3238:	24 ef       	ldi	r18, 0xF4	; 244
    323a:	32 e0       	ldi	r19, 0x02	; 2
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	b9 01       	movw	r22, r18
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	26 e0       	ldi	r18, 0x06	; 6
    3244:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 6);
    3248:	2c e4       	ldi	r18, 0x4C	; 76
    324a:	33 e0       	ldi	r19, 0x03	; 3
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	b9 01       	movw	r22, r18
    3250:	43 e0       	ldi	r20, 0x03	; 3
    3252:	26 e0       	ldi	r18, 0x06	; 6
    3254:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3258:	fe 01       	movw	r30, r28
    325a:	eb 57       	subi	r30, 0x7B	; 123
    325c:	fe 4f       	sbci	r31, 0xFE	; 254
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	a8 ec       	ldi	r26, 0xC8	; 200
    3264:	b2 e4       	ldi	r27, 0x42	; 66
    3266:	80 83       	st	Z, r24
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	a2 83       	std	Z+2, r26	; 0x02
    326c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326e:	8e 01       	movw	r16, r28
    3270:	0f 57       	subi	r16, 0x7F	; 127
    3272:	1e 4f       	sbci	r17, 0xFE	; 254
    3274:	fe 01       	movw	r30, r28
    3276:	eb 57       	subi	r30, 0x7B	; 123
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	93 81       	ldd	r25, Z+3	; 0x03
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a e7       	ldi	r20, 0x7A	; 122
    3288:	55 e4       	ldi	r21, 0x45	; 69
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	f8 01       	movw	r30, r16
    3294:	80 83       	st	Z, r24
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	a2 83       	std	Z+2, r26	; 0x02
    329a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    329c:	fe 01       	movw	r30, r28
    329e:	ef 57       	subi	r30, 0x7F	; 127
    32a0:	fe 4f       	sbci	r31, 0xFE	; 254
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	44 f4       	brge	.+16     	; 0x32ca <main+0xf76>
		__ticks = 1;
    32ba:	fe 01       	movw	r30, r28
    32bc:	e1 58       	subi	r30, 0x81	; 129
    32be:	fe 4f       	sbci	r31, 0xFE	; 254
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	64 c0       	rjmp	.+200    	; 0x3392 <main+0x103e>
	else if (__tmp > 65535)
    32ca:	fe 01       	movw	r30, r28
    32cc:	ef 57       	subi	r30, 0x7F	; 127
    32ce:	fe 4f       	sbci	r31, 0xFE	; 254
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <main+0xf96>
    32e8:	43 c0       	rjmp	.+134    	; 0x3370 <main+0x101c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	fe 01       	movw	r30, r28
    32ec:	eb 57       	subi	r30, 0x7B	; 123
    32ee:	fe 4f       	sbci	r31, 0xFE	; 254
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8e 01       	movw	r16, r28
    330a:	01 58       	subi	r16, 0x81	; 129
    330c:	1e 4f       	sbci	r17, 0xFE	; 254
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	f8 01       	movw	r30, r16
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	80 83       	st	Z, r24
    3320:	1f c0       	rjmp	.+62     	; 0x3360 <main+0x100c>
    3322:	fe 01       	movw	r30, r28
    3324:	e3 58       	subi	r30, 0x83	; 131
    3326:	fe 4f       	sbci	r31, 0xFE	; 254
    3328:	80 e9       	ldi	r24, 0x90	; 144
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
    3330:	fe 01       	movw	r30, r28
    3332:	e3 58       	subi	r30, 0x83	; 131
    3334:	fe 4f       	sbci	r31, 0xFE	; 254
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <main+0xfe6>
    333e:	fe 01       	movw	r30, r28
    3340:	e3 58       	subi	r30, 0x83	; 131
    3342:	fe 4f       	sbci	r31, 0xFE	; 254
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	de 01       	movw	r26, r28
    334a:	a1 58       	subi	r26, 0x81	; 129
    334c:	be 4f       	sbci	r27, 0xFE	; 254
    334e:	fe 01       	movw	r30, r28
    3350:	e1 58       	subi	r30, 0x81	; 129
    3352:	fe 4f       	sbci	r31, 0xFE	; 254
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	11 96       	adiw	r26, 0x01	; 1
    335c:	9c 93       	st	X, r25
    335e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3360:	fe 01       	movw	r30, r28
    3362:	e1 58       	subi	r30, 0x81	; 129
    3364:	fe 4f       	sbci	r31, 0xFE	; 254
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	d1 f6       	brne	.-76     	; 0x3322 <main+0xfce>
    336e:	27 c0       	rjmp	.+78     	; 0x33be <main+0x106a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	8e 01       	movw	r16, r28
    3372:	01 58       	subi	r16, 0x81	; 129
    3374:	1e 4f       	sbci	r17, 0xFE	; 254
    3376:	fe 01       	movw	r30, r28
    3378:	ef 57       	subi	r30, 0x7F	; 127
    337a:	fe 4f       	sbci	r31, 0xFE	; 254
    337c:	60 81       	ld	r22, Z
    337e:	71 81       	ldd	r23, Z+1	; 0x01
    3380:	82 81       	ldd	r24, Z+2	; 0x02
    3382:	93 81       	ldd	r25, Z+3	; 0x03
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	de 01       	movw	r26, r28
    3394:	a5 58       	subi	r26, 0x85	; 133
    3396:	be 4f       	sbci	r27, 0xFE	; 254
    3398:	fe 01       	movw	r30, r28
    339a:	e1 58       	subi	r30, 0x81	; 129
    339c:	fe 4f       	sbci	r31, 0xFE	; 254
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	8d 93       	st	X+, r24
    33a4:	9c 93       	st	X, r25
    33a6:	fe 01       	movw	r30, r28
    33a8:	e5 58       	subi	r30, 0x85	; 133
    33aa:	fe 4f       	sbci	r31, 0xFE	; 254
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <main+0x105c>
    33b4:	fe 01       	movw	r30, r28
    33b6:	e5 58       	subi	r30, 0x85	; 133
    33b8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 6);
    33be:	80 e2       	ldi	r24, 0x20	; 32
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	46 e0       	ldi	r20, 0x06	; 6
    33c4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 6);
    33c8:	80 e2       	ldi	r24, 0x20	; 32
    33ca:	63 e0       	ldi	r22, 0x03	; 3
    33cc:	46 e0       	ldi	r20, 0x06	; 6
    33ce:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 7);
    33d2:	24 ef       	ldi	r18, 0xF4	; 244
    33d4:	32 e0       	ldi	r19, 0x02	; 2
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	b9 01       	movw	r22, r18
    33da:	41 e0       	ldi	r20, 0x01	; 1
    33dc:	27 e0       	ldi	r18, 0x07	; 7
    33de:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 7);
    33e2:	2c e4       	ldi	r18, 0x4C	; 76
    33e4:	33 e0       	ldi	r19, 0x03	; 3
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	b9 01       	movw	r22, r18
    33ea:	43 e0       	ldi	r20, 0x03	; 3
    33ec:	27 e0       	ldi	r18, 0x07	; 7
    33ee:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    33f2:	fe 01       	movw	r30, r28
    33f4:	e9 58       	subi	r30, 0x89	; 137
    33f6:	fe 4f       	sbci	r31, 0xFE	; 254
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	a8 ec       	ldi	r26, 0xC8	; 200
    33fe:	b2 e4       	ldi	r27, 0x42	; 66
    3400:	80 83       	st	Z, r24
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	a2 83       	std	Z+2, r26	; 0x02
    3406:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	8e 01       	movw	r16, r28
    340a:	0d 58       	subi	r16, 0x8D	; 141
    340c:	1e 4f       	sbci	r17, 0xFE	; 254
    340e:	fe 01       	movw	r30, r28
    3410:	e9 58       	subi	r30, 0x89	; 137
    3412:	fe 4f       	sbci	r31, 0xFE	; 254
    3414:	60 81       	ld	r22, Z
    3416:	71 81       	ldd	r23, Z+1	; 0x01
    3418:	82 81       	ldd	r24, Z+2	; 0x02
    341a:	93 81       	ldd	r25, Z+3	; 0x03
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a e7       	ldi	r20, 0x7A	; 122
    3422:	55 e4       	ldi	r21, 0x45	; 69
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	f8 01       	movw	r30, r16
    342e:	80 83       	st	Z, r24
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	a2 83       	std	Z+2, r26	; 0x02
    3434:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3436:	fe 01       	movw	r30, r28
    3438:	ed 58       	subi	r30, 0x8D	; 141
    343a:	fe 4f       	sbci	r31, 0xFE	; 254
    343c:	60 81       	ld	r22, Z
    343e:	71 81       	ldd	r23, Z+1	; 0x01
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	93 81       	ldd	r25, Z+3	; 0x03
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	44 f4       	brge	.+16     	; 0x3464 <main+0x1110>
		__ticks = 1;
    3454:	fe 01       	movw	r30, r28
    3456:	ef 58       	subi	r30, 0x8F	; 143
    3458:	fe 4f       	sbci	r31, 0xFE	; 254
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	91 83       	std	Z+1, r25	; 0x01
    3460:	80 83       	st	Z, r24
    3462:	64 c0       	rjmp	.+200    	; 0x352c <main+0x11d8>
	else if (__tmp > 65535)
    3464:	fe 01       	movw	r30, r28
    3466:	ed 58       	subi	r30, 0x8D	; 141
    3468:	fe 4f       	sbci	r31, 0xFE	; 254
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	3f ef       	ldi	r19, 0xFF	; 255
    3476:	4f e7       	ldi	r20, 0x7F	; 127
    3478:	57 e4       	ldi	r21, 0x47	; 71
    347a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    347e:	18 16       	cp	r1, r24
    3480:	0c f0       	brlt	.+2      	; 0x3484 <main+0x1130>
    3482:	43 c0       	rjmp	.+134    	; 0x350a <main+0x11b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3484:	fe 01       	movw	r30, r28
    3486:	e9 58       	subi	r30, 0x89	; 137
    3488:	fe 4f       	sbci	r31, 0xFE	; 254
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	40 e2       	ldi	r20, 0x20	; 32
    3498:	51 e4       	ldi	r21, 0x41	; 65
    349a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	8e 01       	movw	r16, r28
    34a4:	0f 58       	subi	r16, 0x8F	; 143
    34a6:	1e 4f       	sbci	r17, 0xFE	; 254
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	f8 01       	movw	r30, r16
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
    34ba:	1f c0       	rjmp	.+62     	; 0x34fa <main+0x11a6>
    34bc:	fe 01       	movw	r30, r28
    34be:	e1 59       	subi	r30, 0x91	; 145
    34c0:	fe 4f       	sbci	r31, 0xFE	; 254
    34c2:	80 e9       	ldi	r24, 0x90	; 144
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
    34ca:	fe 01       	movw	r30, r28
    34cc:	e1 59       	subi	r30, 0x91	; 145
    34ce:	fe 4f       	sbci	r31, 0xFE	; 254
    34d0:	80 81       	ld	r24, Z
    34d2:	91 81       	ldd	r25, Z+1	; 0x01
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <main+0x1180>
    34d8:	fe 01       	movw	r30, r28
    34da:	e1 59       	subi	r30, 0x91	; 145
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	de 01       	movw	r26, r28
    34e4:	af 58       	subi	r26, 0x8F	; 143
    34e6:	be 4f       	sbci	r27, 0xFE	; 254
    34e8:	fe 01       	movw	r30, r28
    34ea:	ef 58       	subi	r30, 0x8F	; 143
    34ec:	fe 4f       	sbci	r31, 0xFE	; 254
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	11 96       	adiw	r26, 0x01	; 1
    34f6:	9c 93       	st	X, r25
    34f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fa:	fe 01       	movw	r30, r28
    34fc:	ef 58       	subi	r30, 0x8F	; 143
    34fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	d1 f6       	brne	.-76     	; 0x34bc <main+0x1168>
    3508:	27 c0       	rjmp	.+78     	; 0x3558 <main+0x1204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350a:	8e 01       	movw	r16, r28
    350c:	0f 58       	subi	r16, 0x8F	; 143
    350e:	1e 4f       	sbci	r17, 0xFE	; 254
    3510:	fe 01       	movw	r30, r28
    3512:	ed 58       	subi	r30, 0x8D	; 141
    3514:	fe 4f       	sbci	r31, 0xFE	; 254
    3516:	60 81       	ld	r22, Z
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	93 81       	ldd	r25, Z+3	; 0x03
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	f8 01       	movw	r30, r16
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	de 01       	movw	r26, r28
    352e:	a3 59       	subi	r26, 0x93	; 147
    3530:	be 4f       	sbci	r27, 0xFE	; 254
    3532:	fe 01       	movw	r30, r28
    3534:	ef 58       	subi	r30, 0x8F	; 143
    3536:	fe 4f       	sbci	r31, 0xFE	; 254
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	8d 93       	st	X+, r24
    353e:	9c 93       	st	X, r25
    3540:	fe 01       	movw	r30, r28
    3542:	e3 59       	subi	r30, 0x93	; 147
    3544:	fe 4f       	sbci	r31, 0xFE	; 254
    3546:	80 81       	ld	r24, Z
    3548:	91 81       	ldd	r25, Z+1	; 0x01
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <main+0x11f6>
    354e:	fe 01       	movw	r30, r28
    3550:	e3 59       	subi	r30, 0x93	; 147
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 7);
    3558:	80 e2       	ldi	r24, 0x20	; 32
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	47 e0       	ldi	r20, 0x07	; 7
    355e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 7);
    3562:	80 e2       	ldi	r24, 0x20	; 32
    3564:	63 e0       	ldi	r22, 0x03	; 3
    3566:	47 e0       	ldi	r20, 0x07	; 7
    3568:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 8);
    356c:	24 ef       	ldi	r18, 0xF4	; 244
    356e:	32 e0       	ldi	r19, 0x02	; 2
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	b9 01       	movw	r22, r18
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	28 e0       	ldi	r18, 0x08	; 8
    3578:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 8);
    357c:	2c e4       	ldi	r18, 0x4C	; 76
    357e:	33 e0       	ldi	r19, 0x03	; 3
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	b9 01       	movw	r22, r18
    3584:	43 e0       	ldi	r20, 0x03	; 3
    3586:	28 e0       	ldi	r18, 0x08	; 8
    3588:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    358c:	fe 01       	movw	r30, r28
    358e:	e7 59       	subi	r30, 0x97	; 151
    3590:	fe 4f       	sbci	r31, 0xFE	; 254
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	a8 ec       	ldi	r26, 0xC8	; 200
    3598:	b2 e4       	ldi	r27, 0x42	; 66
    359a:	80 83       	st	Z, r24
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	a2 83       	std	Z+2, r26	; 0x02
    35a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a2:	8e 01       	movw	r16, r28
    35a4:	0b 59       	subi	r16, 0x9B	; 155
    35a6:	1e 4f       	sbci	r17, 0xFE	; 254
    35a8:	fe 01       	movw	r30, r28
    35aa:	e7 59       	subi	r30, 0x97	; 151
    35ac:	fe 4f       	sbci	r31, 0xFE	; 254
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	4a e7       	ldi	r20, 0x7A	; 122
    35bc:	55 e4       	ldi	r21, 0x45	; 69
    35be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	f8 01       	movw	r30, r16
    35c8:	80 83       	st	Z, r24
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	a2 83       	std	Z+2, r26	; 0x02
    35ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35d0:	fe 01       	movw	r30, r28
    35d2:	eb 59       	subi	r30, 0x9B	; 155
    35d4:	fe 4f       	sbci	r31, 0xFE	; 254
    35d6:	60 81       	ld	r22, Z
    35d8:	71 81       	ldd	r23, Z+1	; 0x01
    35da:	82 81       	ldd	r24, Z+2	; 0x02
    35dc:	93 81       	ldd	r25, Z+3	; 0x03
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e8       	ldi	r20, 0x80	; 128
    35e4:	5f e3       	ldi	r21, 0x3F	; 63
    35e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ea:	88 23       	and	r24, r24
    35ec:	44 f4       	brge	.+16     	; 0x35fe <main+0x12aa>
		__ticks = 1;
    35ee:	fe 01       	movw	r30, r28
    35f0:	ed 59       	subi	r30, 0x9D	; 157
    35f2:	fe 4f       	sbci	r31, 0xFE	; 254
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	80 83       	st	Z, r24
    35fc:	64 c0       	rjmp	.+200    	; 0x36c6 <main+0x1372>
	else if (__tmp > 65535)
    35fe:	fe 01       	movw	r30, r28
    3600:	eb 59       	subi	r30, 0x9B	; 155
    3602:	fe 4f       	sbci	r31, 0xFE	; 254
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	3f ef       	ldi	r19, 0xFF	; 255
    3610:	4f e7       	ldi	r20, 0x7F	; 127
    3612:	57 e4       	ldi	r21, 0x47	; 71
    3614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3618:	18 16       	cp	r1, r24
    361a:	0c f0       	brlt	.+2      	; 0x361e <main+0x12ca>
    361c:	43 c0       	rjmp	.+134    	; 0x36a4 <main+0x1350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361e:	fe 01       	movw	r30, r28
    3620:	e7 59       	subi	r30, 0x97	; 151
    3622:	fe 4f       	sbci	r31, 0xFE	; 254
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	82 81       	ldd	r24, Z+2	; 0x02
    362a:	93 81       	ldd	r25, Z+3	; 0x03
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e2       	ldi	r20, 0x20	; 32
    3632:	51 e4       	ldi	r21, 0x41	; 65
    3634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	8e 01       	movw	r16, r28
    363e:	0d 59       	subi	r16, 0x9D	; 157
    3640:	1e 4f       	sbci	r17, 0xFE	; 254
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	f8 01       	movw	r30, r16
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	1f c0       	rjmp	.+62     	; 0x3694 <main+0x1340>
    3656:	fe 01       	movw	r30, r28
    3658:	ef 59       	subi	r30, 0x9F	; 159
    365a:	fe 4f       	sbci	r31, 0xFE	; 254
    365c:	80 e9       	ldi	r24, 0x90	; 144
    365e:	91 e0       	ldi	r25, 0x01	; 1
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
    3664:	fe 01       	movw	r30, r28
    3666:	ef 59       	subi	r30, 0x9F	; 159
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	80 81       	ld	r24, Z
    366c:	91 81       	ldd	r25, Z+1	; 0x01
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <main+0x131a>
    3672:	fe 01       	movw	r30, r28
    3674:	ef 59       	subi	r30, 0x9F	; 159
    3676:	fe 4f       	sbci	r31, 0xFE	; 254
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	de 01       	movw	r26, r28
    367e:	ad 59       	subi	r26, 0x9D	; 157
    3680:	be 4f       	sbci	r27, 0xFE	; 254
    3682:	fe 01       	movw	r30, r28
    3684:	ed 59       	subi	r30, 0x9D	; 157
    3686:	fe 4f       	sbci	r31, 0xFE	; 254
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	11 96       	adiw	r26, 0x01	; 1
    3690:	9c 93       	st	X, r25
    3692:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3694:	fe 01       	movw	r30, r28
    3696:	ed 59       	subi	r30, 0x9D	; 157
    3698:	fe 4f       	sbci	r31, 0xFE	; 254
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	d1 f6       	brne	.-76     	; 0x3656 <main+0x1302>
    36a2:	27 c0       	rjmp	.+78     	; 0x36f2 <main+0x139e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a4:	8e 01       	movw	r16, r28
    36a6:	0d 59       	subi	r16, 0x9D	; 157
    36a8:	1e 4f       	sbci	r17, 0xFE	; 254
    36aa:	fe 01       	movw	r30, r28
    36ac:	eb 59       	subi	r30, 0x9B	; 155
    36ae:	fe 4f       	sbci	r31, 0xFE	; 254
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	f8 01       	movw	r30, r16
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
    36c6:	de 01       	movw	r26, r28
    36c8:	a1 5a       	subi	r26, 0xA1	; 161
    36ca:	be 4f       	sbci	r27, 0xFE	; 254
    36cc:	fe 01       	movw	r30, r28
    36ce:	ed 59       	subi	r30, 0x9D	; 157
    36d0:	fe 4f       	sbci	r31, 0xFE	; 254
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	8d 93       	st	X+, r24
    36d8:	9c 93       	st	X, r25
    36da:	fe 01       	movw	r30, r28
    36dc:	e1 5a       	subi	r30, 0xA1	; 161
    36de:	fe 4f       	sbci	r31, 0xFE	; 254
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <main+0x1390>
    36e8:	fe 01       	movw	r30, r28
    36ea:	e1 5a       	subi	r30, 0xA1	; 161
    36ec:	fe 4f       	sbci	r31, 0xFE	; 254
    36ee:	91 83       	std	Z+1, r25	; 0x01
    36f0:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 8);
    36f2:	80 e2       	ldi	r24, 0x20	; 32
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	48 e0       	ldi	r20, 0x08	; 8
    36f8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 12);
    36fc:	24 ef       	ldi	r18, 0xF4	; 244
    36fe:	32 e0       	ldi	r19, 0x02	; 2
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	b9 01       	movw	r22, r18
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	2c e0       	ldi	r18, 0x0C	; 12
    3708:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    370c:	fe 01       	movw	r30, r28
    370e:	e5 5a       	subi	r30, 0xA5	; 165
    3710:	fe 4f       	sbci	r31, 0xFE	; 254
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	a8 ec       	ldi	r26, 0xC8	; 200
    3718:	b2 e4       	ldi	r27, 0x42	; 66
    371a:	80 83       	st	Z, r24
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	a2 83       	std	Z+2, r26	; 0x02
    3720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3722:	8e 01       	movw	r16, r28
    3724:	09 5a       	subi	r16, 0xA9	; 169
    3726:	1e 4f       	sbci	r17, 0xFE	; 254
    3728:	fe 01       	movw	r30, r28
    372a:	e5 5a       	subi	r30, 0xA5	; 165
    372c:	fe 4f       	sbci	r31, 0xFE	; 254
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	4a e7       	ldi	r20, 0x7A	; 122
    373c:	55 e4       	ldi	r21, 0x45	; 69
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	f8 01       	movw	r30, r16
    3748:	80 83       	st	Z, r24
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	a2 83       	std	Z+2, r26	; 0x02
    374e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3750:	fe 01       	movw	r30, r28
    3752:	e9 5a       	subi	r30, 0xA9	; 169
    3754:	fe 4f       	sbci	r31, 0xFE	; 254
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e8       	ldi	r20, 0x80	; 128
    3764:	5f e3       	ldi	r21, 0x3F	; 63
    3766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    376a:	88 23       	and	r24, r24
    376c:	44 f4       	brge	.+16     	; 0x377e <main+0x142a>
		__ticks = 1;
    376e:	fe 01       	movw	r30, r28
    3770:	eb 5a       	subi	r30, 0xAB	; 171
    3772:	fe 4f       	sbci	r31, 0xFE	; 254
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	91 83       	std	Z+1, r25	; 0x01
    377a:	80 83       	st	Z, r24
    377c:	64 c0       	rjmp	.+200    	; 0x3846 <main+0x14f2>
	else if (__tmp > 65535)
    377e:	fe 01       	movw	r30, r28
    3780:	e9 5a       	subi	r30, 0xA9	; 169
    3782:	fe 4f       	sbci	r31, 0xFE	; 254
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	3f ef       	ldi	r19, 0xFF	; 255
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	57 e4       	ldi	r21, 0x47	; 71
    3794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3798:	18 16       	cp	r1, r24
    379a:	0c f0       	brlt	.+2      	; 0x379e <main+0x144a>
    379c:	43 c0       	rjmp	.+134    	; 0x3824 <main+0x14d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	fe 01       	movw	r30, r28
    37a0:	e5 5a       	subi	r30, 0xA5	; 165
    37a2:	fe 4f       	sbci	r31, 0xFE	; 254
    37a4:	60 81       	ld	r22, Z
    37a6:	71 81       	ldd	r23, Z+1	; 0x01
    37a8:	82 81       	ldd	r24, Z+2	; 0x02
    37aa:	93 81       	ldd	r25, Z+3	; 0x03
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e2       	ldi	r20, 0x20	; 32
    37b2:	51 e4       	ldi	r21, 0x41	; 65
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	8e 01       	movw	r16, r28
    37be:	0b 5a       	subi	r16, 0xAB	; 171
    37c0:	1e 4f       	sbci	r17, 0xFE	; 254
    37c2:	bc 01       	movw	r22, r24
    37c4:	cd 01       	movw	r24, r26
    37c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	f8 01       	movw	r30, r16
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	1f c0       	rjmp	.+62     	; 0x3814 <main+0x14c0>
    37d6:	fe 01       	movw	r30, r28
    37d8:	ed 5a       	subi	r30, 0xAD	; 173
    37da:	fe 4f       	sbci	r31, 0xFE	; 254
    37dc:	80 e9       	ldi	r24, 0x90	; 144
    37de:	91 e0       	ldi	r25, 0x01	; 1
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
    37e4:	fe 01       	movw	r30, r28
    37e6:	ed 5a       	subi	r30, 0xAD	; 173
    37e8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <main+0x149a>
    37f2:	fe 01       	movw	r30, r28
    37f4:	ed 5a       	subi	r30, 0xAD	; 173
    37f6:	fe 4f       	sbci	r31, 0xFE	; 254
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	de 01       	movw	r26, r28
    37fe:	ab 5a       	subi	r26, 0xAB	; 171
    3800:	be 4f       	sbci	r27, 0xFE	; 254
    3802:	fe 01       	movw	r30, r28
    3804:	eb 5a       	subi	r30, 0xAB	; 171
    3806:	fe 4f       	sbci	r31, 0xFE	; 254
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	11 96       	adiw	r26, 0x01	; 1
    3810:	9c 93       	st	X, r25
    3812:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	fe 01       	movw	r30, r28
    3816:	eb 5a       	subi	r30, 0xAB	; 171
    3818:	fe 4f       	sbci	r31, 0xFE	; 254
    381a:	80 81       	ld	r24, Z
    381c:	91 81       	ldd	r25, Z+1	; 0x01
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	d1 f6       	brne	.-76     	; 0x37d6 <main+0x1482>
    3822:	27 c0       	rjmp	.+78     	; 0x3872 <main+0x151e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3824:	8e 01       	movw	r16, r28
    3826:	0b 5a       	subi	r16, 0xAB	; 171
    3828:	1e 4f       	sbci	r17, 0xFE	; 254
    382a:	fe 01       	movw	r30, r28
    382c:	e9 5a       	subi	r30, 0xA9	; 169
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	f8 01       	movw	r30, r16
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	80 83       	st	Z, r24
    3846:	de 01       	movw	r26, r28
    3848:	af 5a       	subi	r26, 0xAF	; 175
    384a:	be 4f       	sbci	r27, 0xFE	; 254
    384c:	fe 01       	movw	r30, r28
    384e:	eb 5a       	subi	r30, 0xAB	; 171
    3850:	fe 4f       	sbci	r31, 0xFE	; 254
    3852:	80 81       	ld	r24, Z
    3854:	91 81       	ldd	r25, Z+1	; 0x01
    3856:	8d 93       	st	X+, r24
    3858:	9c 93       	st	X, r25
    385a:	fe 01       	movw	r30, r28
    385c:	ef 5a       	subi	r30, 0xAF	; 175
    385e:	fe 4f       	sbci	r31, 0xFE	; 254
    3860:	80 81       	ld	r24, Z
    3862:	91 81       	ldd	r25, Z+1	; 0x01
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <main+0x1510>
    3868:	fe 01       	movw	r30, r28
    386a:	ef 5a       	subi	r30, 0xAF	; 175
    386c:	fe 4f       	sbci	r31, 0xFE	; 254
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 12);
    3872:	80 e2       	ldi	r24, 0x20	; 32
    3874:	61 e0       	ldi	r22, 0x01	; 1
    3876:	4c e0       	ldi	r20, 0x0C	; 12
    3878:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 13);
    387c:	24 ef       	ldi	r18, 0xF4	; 244
    387e:	32 e0       	ldi	r19, 0x02	; 2
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	b9 01       	movw	r22, r18
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	2d e0       	ldi	r18, 0x0D	; 13
    3888:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    388c:	fe 01       	movw	r30, r28
    388e:	e3 5b       	subi	r30, 0xB3	; 179
    3890:	fe 4f       	sbci	r31, 0xFE	; 254
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	a8 ec       	ldi	r26, 0xC8	; 200
    3898:	b2 e4       	ldi	r27, 0x42	; 66
    389a:	80 83       	st	Z, r24
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	a2 83       	std	Z+2, r26	; 0x02
    38a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a2:	8e 01       	movw	r16, r28
    38a4:	07 5b       	subi	r16, 0xB7	; 183
    38a6:	1e 4f       	sbci	r17, 0xFE	; 254
    38a8:	fe 01       	movw	r30, r28
    38aa:	e3 5b       	subi	r30, 0xB3	; 179
    38ac:	fe 4f       	sbci	r31, 0xFE	; 254
    38ae:	60 81       	ld	r22, Z
    38b0:	71 81       	ldd	r23, Z+1	; 0x01
    38b2:	82 81       	ldd	r24, Z+2	; 0x02
    38b4:	93 81       	ldd	r25, Z+3	; 0x03
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	4a e7       	ldi	r20, 0x7A	; 122
    38bc:	55 e4       	ldi	r21, 0x45	; 69
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	f8 01       	movw	r30, r16
    38c8:	80 83       	st	Z, r24
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	a2 83       	std	Z+2, r26	; 0x02
    38ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38d0:	fe 01       	movw	r30, r28
    38d2:	e7 5b       	subi	r30, 0xB7	; 183
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	40 e8       	ldi	r20, 0x80	; 128
    38e4:	5f e3       	ldi	r21, 0x3F	; 63
    38e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ea:	88 23       	and	r24, r24
    38ec:	44 f4       	brge	.+16     	; 0x38fe <main+0x15aa>
		__ticks = 1;
    38ee:	fe 01       	movw	r30, r28
    38f0:	e9 5b       	subi	r30, 0xB9	; 185
    38f2:	fe 4f       	sbci	r31, 0xFE	; 254
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	91 83       	std	Z+1, r25	; 0x01
    38fa:	80 83       	st	Z, r24
    38fc:	64 c0       	rjmp	.+200    	; 0x39c6 <main+0x1672>
	else if (__tmp > 65535)
    38fe:	fe 01       	movw	r30, r28
    3900:	e7 5b       	subi	r30, 0xB7	; 183
    3902:	fe 4f       	sbci	r31, 0xFE	; 254
    3904:	60 81       	ld	r22, Z
    3906:	71 81       	ldd	r23, Z+1	; 0x01
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	93 81       	ldd	r25, Z+3	; 0x03
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	3f ef       	ldi	r19, 0xFF	; 255
    3910:	4f e7       	ldi	r20, 0x7F	; 127
    3912:	57 e4       	ldi	r21, 0x47	; 71
    3914:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3918:	18 16       	cp	r1, r24
    391a:	0c f0       	brlt	.+2      	; 0x391e <main+0x15ca>
    391c:	43 c0       	rjmp	.+134    	; 0x39a4 <main+0x1650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391e:	fe 01       	movw	r30, r28
    3920:	e3 5b       	subi	r30, 0xB3	; 179
    3922:	fe 4f       	sbci	r31, 0xFE	; 254
    3924:	60 81       	ld	r22, Z
    3926:	71 81       	ldd	r23, Z+1	; 0x01
    3928:	82 81       	ldd	r24, Z+2	; 0x02
    392a:	93 81       	ldd	r25, Z+3	; 0x03
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	40 e2       	ldi	r20, 0x20	; 32
    3932:	51 e4       	ldi	r21, 0x41	; 65
    3934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	8e 01       	movw	r16, r28
    393e:	09 5b       	subi	r16, 0xB9	; 185
    3940:	1e 4f       	sbci	r17, 0xFE	; 254
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	f8 01       	movw	r30, r16
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	80 83       	st	Z, r24
    3954:	1f c0       	rjmp	.+62     	; 0x3994 <main+0x1640>
    3956:	fe 01       	movw	r30, r28
    3958:	eb 5b       	subi	r30, 0xBB	; 187
    395a:	fe 4f       	sbci	r31, 0xFE	; 254
    395c:	80 e9       	ldi	r24, 0x90	; 144
    395e:	91 e0       	ldi	r25, 0x01	; 1
    3960:	91 83       	std	Z+1, r25	; 0x01
    3962:	80 83       	st	Z, r24
    3964:	fe 01       	movw	r30, r28
    3966:	eb 5b       	subi	r30, 0xBB	; 187
    3968:	fe 4f       	sbci	r31, 0xFE	; 254
    396a:	80 81       	ld	r24, Z
    396c:	91 81       	ldd	r25, Z+1	; 0x01
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <main+0x161a>
    3972:	fe 01       	movw	r30, r28
    3974:	eb 5b       	subi	r30, 0xBB	; 187
    3976:	fe 4f       	sbci	r31, 0xFE	; 254
    3978:	91 83       	std	Z+1, r25	; 0x01
    397a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397c:	de 01       	movw	r26, r28
    397e:	a9 5b       	subi	r26, 0xB9	; 185
    3980:	be 4f       	sbci	r27, 0xFE	; 254
    3982:	fe 01       	movw	r30, r28
    3984:	e9 5b       	subi	r30, 0xB9	; 185
    3986:	fe 4f       	sbci	r31, 0xFE	; 254
    3988:	80 81       	ld	r24, Z
    398a:	91 81       	ldd	r25, Z+1	; 0x01
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	11 96       	adiw	r26, 0x01	; 1
    3990:	9c 93       	st	X, r25
    3992:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3994:	fe 01       	movw	r30, r28
    3996:	e9 5b       	subi	r30, 0xB9	; 185
    3998:	fe 4f       	sbci	r31, 0xFE	; 254
    399a:	80 81       	ld	r24, Z
    399c:	91 81       	ldd	r25, Z+1	; 0x01
    399e:	00 97       	sbiw	r24, 0x00	; 0
    39a0:	d1 f6       	brne	.-76     	; 0x3956 <main+0x1602>
    39a2:	27 c0       	rjmp	.+78     	; 0x39f2 <main+0x169e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a4:	8e 01       	movw	r16, r28
    39a6:	09 5b       	subi	r16, 0xB9	; 185
    39a8:	1e 4f       	sbci	r17, 0xFE	; 254
    39aa:	fe 01       	movw	r30, r28
    39ac:	e7 5b       	subi	r30, 0xB7	; 183
    39ae:	fe 4f       	sbci	r31, 0xFE	; 254
    39b0:	60 81       	ld	r22, Z
    39b2:	71 81       	ldd	r23, Z+1	; 0x01
    39b4:	82 81       	ldd	r24, Z+2	; 0x02
    39b6:	93 81       	ldd	r25, Z+3	; 0x03
    39b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	f8 01       	movw	r30, r16
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	80 83       	st	Z, r24
    39c6:	de 01       	movw	r26, r28
    39c8:	ad 5b       	subi	r26, 0xBD	; 189
    39ca:	be 4f       	sbci	r27, 0xFE	; 254
    39cc:	fe 01       	movw	r30, r28
    39ce:	e9 5b       	subi	r30, 0xB9	; 185
    39d0:	fe 4f       	sbci	r31, 0xFE	; 254
    39d2:	80 81       	ld	r24, Z
    39d4:	91 81       	ldd	r25, Z+1	; 0x01
    39d6:	8d 93       	st	X+, r24
    39d8:	9c 93       	st	X, r25
    39da:	fe 01       	movw	r30, r28
    39dc:	ed 5b       	subi	r30, 0xBD	; 189
    39de:	fe 4f       	sbci	r31, 0xFE	; 254
    39e0:	80 81       	ld	r24, Z
    39e2:	91 81       	ldd	r25, Z+1	; 0x01
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <main+0x1690>
    39e8:	fe 01       	movw	r30, r28
    39ea:	ed 5b       	subi	r30, 0xBD	; 189
    39ec:	fe 4f       	sbci	r31, 0xFE	; 254
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 13);
    39f2:	80 e2       	ldi	r24, 0x20	; 32
    39f4:	61 e0       	ldi	r22, 0x01	; 1
    39f6:	4d e0       	ldi	r20, 0x0D	; 13
    39f8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 14);
    39fc:	24 ef       	ldi	r18, 0xF4	; 244
    39fe:	32 e0       	ldi	r19, 0x02	; 2
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	b9 01       	movw	r22, r18
    3a04:	41 e0       	ldi	r20, 0x01	; 1
    3a06:	2e e0       	ldi	r18, 0x0E	; 14
    3a08:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e1 5c       	subi	r30, 0xC1	; 193
    3a10:	fe 4f       	sbci	r31, 0xFE	; 254
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a8 ec       	ldi	r26, 0xC8	; 200
    3a18:	b2 e4       	ldi	r27, 0x42	; 66
    3a1a:	80 83       	st	Z, r24
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	a2 83       	std	Z+2, r26	; 0x02
    3a20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a22:	8e 01       	movw	r16, r28
    3a24:	05 5c       	subi	r16, 0xC5	; 197
    3a26:	1e 4f       	sbci	r17, 0xFE	; 254
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e1 5c       	subi	r30, 0xC1	; 193
    3a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2e:	60 81       	ld	r22, Z
    3a30:	71 81       	ldd	r23, Z+1	; 0x01
    3a32:	82 81       	ldd	r24, Z+2	; 0x02
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	4a e7       	ldi	r20, 0x7A	; 122
    3a3c:	55 e4       	ldi	r21, 0x45	; 69
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	f8 01       	movw	r30, r16
    3a48:	80 83       	st	Z, r24
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	a2 83       	std	Z+2, r26	; 0x02
    3a4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a50:	fe 01       	movw	r30, r28
    3a52:	e5 5c       	subi	r30, 0xC5	; 197
    3a54:	fe 4f       	sbci	r31, 0xFE	; 254
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	44 f4       	brge	.+16     	; 0x3a7e <main+0x172a>
		__ticks = 1;
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e7 5c       	subi	r30, 0xC7	; 199
    3a72:	fe 4f       	sbci	r31, 0xFE	; 254
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	64 c0       	rjmp	.+200    	; 0x3b46 <main+0x17f2>
	else if (__tmp > 65535)
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e5 5c       	subi	r30, 0xC5	; 197
    3a82:	fe 4f       	sbci	r31, 0xFE	; 254
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	3f ef       	ldi	r19, 0xFF	; 255
    3a90:	4f e7       	ldi	r20, 0x7F	; 127
    3a92:	57 e4       	ldi	r21, 0x47	; 71
    3a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a98:	18 16       	cp	r1, r24
    3a9a:	0c f0       	brlt	.+2      	; 0x3a9e <main+0x174a>
    3a9c:	43 c0       	rjmp	.+134    	; 0x3b24 <main+0x17d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e1 5c       	subi	r30, 0xC1	; 193
    3aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa4:	60 81       	ld	r22, Z
    3aa6:	71 81       	ldd	r23, Z+1	; 0x01
    3aa8:	82 81       	ldd	r24, Z+2	; 0x02
    3aaa:	93 81       	ldd	r25, Z+3	; 0x03
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	8e 01       	movw	r16, r28
    3abe:	07 5c       	subi	r16, 0xC7	; 199
    3ac0:	1e 4f       	sbci	r17, 0xFE	; 254
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	f8 01       	movw	r30, r16
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	1f c0       	rjmp	.+62     	; 0x3b14 <main+0x17c0>
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e9 5c       	subi	r30, 0xC9	; 201
    3ada:	fe 4f       	sbci	r31, 0xFE	; 254
    3adc:	80 e9       	ldi	r24, 0x90	; 144
    3ade:	91 e0       	ldi	r25, 0x01	; 1
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e9 5c       	subi	r30, 0xC9	; 201
    3ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <main+0x179a>
    3af2:	fe 01       	movw	r30, r28
    3af4:	e9 5c       	subi	r30, 0xC9	; 201
    3af6:	fe 4f       	sbci	r31, 0xFE	; 254
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afc:	de 01       	movw	r26, r28
    3afe:	a7 5c       	subi	r26, 0xC7	; 199
    3b00:	be 4f       	sbci	r27, 0xFE	; 254
    3b02:	fe 01       	movw	r30, r28
    3b04:	e7 5c       	subi	r30, 0xC7	; 199
    3b06:	fe 4f       	sbci	r31, 0xFE	; 254
    3b08:	80 81       	ld	r24, Z
    3b0a:	91 81       	ldd	r25, Z+1	; 0x01
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	11 96       	adiw	r26, 0x01	; 1
    3b10:	9c 93       	st	X, r25
    3b12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b14:	fe 01       	movw	r30, r28
    3b16:	e7 5c       	subi	r30, 0xC7	; 199
    3b18:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1a:	80 81       	ld	r24, Z
    3b1c:	91 81       	ldd	r25, Z+1	; 0x01
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	d1 f6       	brne	.-76     	; 0x3ad6 <main+0x1782>
    3b22:	27 c0       	rjmp	.+78     	; 0x3b72 <main+0x181e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	8e 01       	movw	r16, r28
    3b26:	07 5c       	subi	r16, 0xC7	; 199
    3b28:	1e 4f       	sbci	r17, 0xFE	; 254
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e5 5c       	subi	r30, 0xC5	; 197
    3b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	f8 01       	movw	r30, r16
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24
    3b46:	de 01       	movw	r26, r28
    3b48:	ab 5c       	subi	r26, 0xCB	; 203
    3b4a:	be 4f       	sbci	r27, 0xFE	; 254
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	e7 5c       	subi	r30, 0xC7	; 199
    3b50:	fe 4f       	sbci	r31, 0xFE	; 254
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	8d 93       	st	X+, r24
    3b58:	9c 93       	st	X, r25
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	eb 5c       	subi	r30, 0xCB	; 203
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	f1 f7       	brne	.-4      	; 0x3b64 <main+0x1810>
    3b68:	fe 01       	movw	r30, r28
    3b6a:	eb 5c       	subi	r30, 0xCB	; 203
    3b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6e:	91 83       	std	Z+1, r25	; 0x01
    3b70:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 14);
    3b72:	80 e2       	ldi	r24, 0x20	; 32
    3b74:	61 e0       	ldi	r22, 0x01	; 1
    3b76:	4e e0       	ldi	r20, 0x0E	; 14
    3b78:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 15);
    3b7c:	24 ef       	ldi	r18, 0xF4	; 244
    3b7e:	32 e0       	ldi	r19, 0x02	; 2
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	b9 01       	movw	r22, r18
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	2f e0       	ldi	r18, 0x0F	; 15
    3b88:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	ef 5c       	subi	r30, 0xCF	; 207
    3b90:	fe 4f       	sbci	r31, 0xFE	; 254
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	a8 ec       	ldi	r26, 0xC8	; 200
    3b98:	b2 e4       	ldi	r27, 0x42	; 66
    3b9a:	80 83       	st	Z, r24
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	a2 83       	std	Z+2, r26	; 0x02
    3ba0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba2:	8e 01       	movw	r16, r28
    3ba4:	03 5d       	subi	r16, 0xD3	; 211
    3ba6:	1e 4f       	sbci	r17, 0xFE	; 254
    3ba8:	fe 01       	movw	r30, r28
    3baa:	ef 5c       	subi	r30, 0xCF	; 207
    3bac:	fe 4f       	sbci	r31, 0xFE	; 254
    3bae:	60 81       	ld	r22, Z
    3bb0:	71 81       	ldd	r23, Z+1	; 0x01
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	4a e7       	ldi	r20, 0x7A	; 122
    3bbc:	55 e4       	ldi	r21, 0x45	; 69
    3bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	f8 01       	movw	r30, r16
    3bc8:	80 83       	st	Z, r24
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	a2 83       	std	Z+2, r26	; 0x02
    3bce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	e3 5d       	subi	r30, 0xD3	; 211
    3bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e8       	ldi	r20, 0x80	; 128
    3be4:	5f e3       	ldi	r21, 0x3F	; 63
    3be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bea:	88 23       	and	r24, r24
    3bec:	44 f4       	brge	.+16     	; 0x3bfe <main+0x18aa>
		__ticks = 1;
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e5 5d       	subi	r30, 0xD5	; 213
    3bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	80 83       	st	Z, r24
    3bfc:	64 c0       	rjmp	.+200    	; 0x3cc6 <main+0x1972>
	else if (__tmp > 65535)
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e3 5d       	subi	r30, 0xD3	; 211
    3c02:	fe 4f       	sbci	r31, 0xFE	; 254
    3c04:	60 81       	ld	r22, Z
    3c06:	71 81       	ldd	r23, Z+1	; 0x01
    3c08:	82 81       	ldd	r24, Z+2	; 0x02
    3c0a:	93 81       	ldd	r25, Z+3	; 0x03
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	3f ef       	ldi	r19, 0xFF	; 255
    3c10:	4f e7       	ldi	r20, 0x7F	; 127
    3c12:	57 e4       	ldi	r21, 0x47	; 71
    3c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c18:	18 16       	cp	r1, r24
    3c1a:	0c f0       	brlt	.+2      	; 0x3c1e <main+0x18ca>
    3c1c:	43 c0       	rjmp	.+134    	; 0x3ca4 <main+0x1950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ef 5c       	subi	r30, 0xCF	; 207
    3c22:	fe 4f       	sbci	r31, 0xFE	; 254
    3c24:	60 81       	ld	r22, Z
    3c26:	71 81       	ldd	r23, Z+1	; 0x01
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e2       	ldi	r20, 0x20	; 32
    3c32:	51 e4       	ldi	r21, 0x41	; 65
    3c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	8e 01       	movw	r16, r28
    3c3e:	05 5d       	subi	r16, 0xD5	; 213
    3c40:	1e 4f       	sbci	r17, 0xFE	; 254
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	f8 01       	movw	r30, r16
    3c50:	91 83       	std	Z+1, r25	; 0x01
    3c52:	80 83       	st	Z, r24
    3c54:	1f c0       	rjmp	.+62     	; 0x3c94 <main+0x1940>
    3c56:	fe 01       	movw	r30, r28
    3c58:	e7 5d       	subi	r30, 0xD7	; 215
    3c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5c:	80 e9       	ldi	r24, 0x90	; 144
    3c5e:	91 e0       	ldi	r25, 0x01	; 1
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	80 83       	st	Z, r24
    3c64:	fe 01       	movw	r30, r28
    3c66:	e7 5d       	subi	r30, 0xD7	; 215
    3c68:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6a:	80 81       	ld	r24, Z
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <main+0x191a>
    3c72:	fe 01       	movw	r30, r28
    3c74:	e7 5d       	subi	r30, 0xD7	; 215
    3c76:	fe 4f       	sbci	r31, 0xFE	; 254
    3c78:	91 83       	std	Z+1, r25	; 0x01
    3c7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7c:	de 01       	movw	r26, r28
    3c7e:	a5 5d       	subi	r26, 0xD5	; 213
    3c80:	be 4f       	sbci	r27, 0xFE	; 254
    3c82:	fe 01       	movw	r30, r28
    3c84:	e5 5d       	subi	r30, 0xD5	; 213
    3c86:	fe 4f       	sbci	r31, 0xFE	; 254
    3c88:	80 81       	ld	r24, Z
    3c8a:	91 81       	ldd	r25, Z+1	; 0x01
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	11 96       	adiw	r26, 0x01	; 1
    3c90:	9c 93       	st	X, r25
    3c92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c94:	fe 01       	movw	r30, r28
    3c96:	e5 5d       	subi	r30, 0xD5	; 213
    3c98:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9a:	80 81       	ld	r24, Z
    3c9c:	91 81       	ldd	r25, Z+1	; 0x01
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	d1 f6       	brne	.-76     	; 0x3c56 <main+0x1902>
    3ca2:	27 c0       	rjmp	.+78     	; 0x3cf2 <main+0x199e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca4:	8e 01       	movw	r16, r28
    3ca6:	05 5d       	subi	r16, 0xD5	; 213
    3ca8:	1e 4f       	sbci	r17, 0xFE	; 254
    3caa:	fe 01       	movw	r30, r28
    3cac:	e3 5d       	subi	r30, 0xD3	; 211
    3cae:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb0:	60 81       	ld	r22, Z
    3cb2:	71 81       	ldd	r23, Z+1	; 0x01
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	93 81       	ldd	r25, Z+3	; 0x03
    3cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
    3cc6:	de 01       	movw	r26, r28
    3cc8:	a9 5d       	subi	r26, 0xD9	; 217
    3cca:	be 4f       	sbci	r27, 0xFE	; 254
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e5 5d       	subi	r30, 0xD5	; 213
    3cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	8d 93       	st	X+, r24
    3cd8:	9c 93       	st	X, r25
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e9 5d       	subi	r30, 0xD9	; 217
    3cde:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <main+0x1990>
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e9 5d       	subi	r30, 0xD9	; 217
    3cec:	fe 4f       	sbci	r31, 0xFE	; 254
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 15);
    3cf2:	80 e2       	ldi	r24, 0x20	; 32
    3cf4:	61 e0       	ldi	r22, 0x01	; 1
    3cf6:	4f e0       	ldi	r20, 0x0F	; 15
    3cf8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 16);
    3cfc:	24 ef       	ldi	r18, 0xF4	; 244
    3cfe:	32 e0       	ldi	r19, 0x02	; 2
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	b9 01       	movw	r22, r18
    3d04:	41 e0       	ldi	r20, 0x01	; 1
    3d06:	20 e1       	ldi	r18, 0x10	; 16
    3d08:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ed 5d       	subi	r30, 0xDD	; 221
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	a8 ec       	ldi	r26, 0xC8	; 200
    3d18:	b2 e4       	ldi	r27, 0x42	; 66
    3d1a:	80 83       	st	Z, r24
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	a2 83       	std	Z+2, r26	; 0x02
    3d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d22:	8e 01       	movw	r16, r28
    3d24:	01 5e       	subi	r16, 0xE1	; 225
    3d26:	1e 4f       	sbci	r17, 0xFE	; 254
    3d28:	fe 01       	movw	r30, r28
    3d2a:	ed 5d       	subi	r30, 0xDD	; 221
    3d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2e:	60 81       	ld	r22, Z
    3d30:	71 81       	ldd	r23, Z+1	; 0x01
    3d32:	82 81       	ldd	r24, Z+2	; 0x02
    3d34:	93 81       	ldd	r25, Z+3	; 0x03
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a e7       	ldi	r20, 0x7A	; 122
    3d3c:	55 e4       	ldi	r21, 0x45	; 69
    3d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	f8 01       	movw	r30, r16
    3d48:	80 83       	st	Z, r24
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	a2 83       	std	Z+2, r26	; 0x02
    3d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d50:	fe 01       	movw	r30, r28
    3d52:	e1 5e       	subi	r30, 0xE1	; 225
    3d54:	fe 4f       	sbci	r31, 0xFE	; 254
    3d56:	60 81       	ld	r22, Z
    3d58:	71 81       	ldd	r23, Z+1	; 0x01
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	44 f4       	brge	.+16     	; 0x3d7e <main+0x1a2a>
		__ticks = 1;
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e3 5e       	subi	r30, 0xE3	; 227
    3d72:	fe 4f       	sbci	r31, 0xFE	; 254
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
    3d7c:	64 c0       	rjmp	.+200    	; 0x3e46 <main+0x1af2>
	else if (__tmp > 65535)
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e1 5e       	subi	r30, 0xE1	; 225
    3d82:	fe 4f       	sbci	r31, 0xFE	; 254
    3d84:	60 81       	ld	r22, Z
    3d86:	71 81       	ldd	r23, Z+1	; 0x01
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	93 81       	ldd	r25, Z+3	; 0x03
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	3f ef       	ldi	r19, 0xFF	; 255
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	57 e4       	ldi	r21, 0x47	; 71
    3d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d98:	18 16       	cp	r1, r24
    3d9a:	0c f0       	brlt	.+2      	; 0x3d9e <main+0x1a4a>
    3d9c:	43 c0       	rjmp	.+134    	; 0x3e24 <main+0x1ad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9e:	fe 01       	movw	r30, r28
    3da0:	ed 5d       	subi	r30, 0xDD	; 221
    3da2:	fe 4f       	sbci	r31, 0xFE	; 254
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e2       	ldi	r20, 0x20	; 32
    3db2:	51 e4       	ldi	r21, 0x41	; 65
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	8e 01       	movw	r16, r28
    3dbe:	03 5e       	subi	r16, 0xE3	; 227
    3dc0:	1e 4f       	sbci	r17, 0xFE	; 254
    3dc2:	bc 01       	movw	r22, r24
    3dc4:	cd 01       	movw	r24, r26
    3dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	f8 01       	movw	r30, r16
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	80 83       	st	Z, r24
    3dd4:	1f c0       	rjmp	.+62     	; 0x3e14 <main+0x1ac0>
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e5 5e       	subi	r30, 0xE5	; 229
    3dda:	fe 4f       	sbci	r31, 0xFE	; 254
    3ddc:	80 e9       	ldi	r24, 0x90	; 144
    3dde:	91 e0       	ldi	r25, 0x01	; 1
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	80 83       	st	Z, r24
    3de4:	fe 01       	movw	r30, r28
    3de6:	e5 5e       	subi	r30, 0xE5	; 229
    3de8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dea:	80 81       	ld	r24, Z
    3dec:	91 81       	ldd	r25, Z+1	; 0x01
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <main+0x1a9a>
    3df2:	fe 01       	movw	r30, r28
    3df4:	e5 5e       	subi	r30, 0xE5	; 229
    3df6:	fe 4f       	sbci	r31, 0xFE	; 254
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfc:	de 01       	movw	r26, r28
    3dfe:	a3 5e       	subi	r26, 0xE3	; 227
    3e00:	be 4f       	sbci	r27, 0xFE	; 254
    3e02:	fe 01       	movw	r30, r28
    3e04:	e3 5e       	subi	r30, 0xE3	; 227
    3e06:	fe 4f       	sbci	r31, 0xFE	; 254
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	11 96       	adiw	r26, 0x01	; 1
    3e10:	9c 93       	st	X, r25
    3e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e14:	fe 01       	movw	r30, r28
    3e16:	e3 5e       	subi	r30, 0xE3	; 227
    3e18:	fe 4f       	sbci	r31, 0xFE	; 254
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	d1 f6       	brne	.-76     	; 0x3dd6 <main+0x1a82>
    3e22:	27 c0       	rjmp	.+78     	; 0x3e72 <main+0x1b1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e24:	8e 01       	movw	r16, r28
    3e26:	03 5e       	subi	r16, 0xE3	; 227
    3e28:	1e 4f       	sbci	r17, 0xFE	; 254
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e1 5e       	subi	r30, 0xE1	; 225
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	f8 01       	movw	r30, r16
    3e42:	91 83       	std	Z+1, r25	; 0x01
    3e44:	80 83       	st	Z, r24
    3e46:	de 01       	movw	r26, r28
    3e48:	a7 5e       	subi	r26, 0xE7	; 231
    3e4a:	be 4f       	sbci	r27, 0xFE	; 254
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e3 5e       	subi	r30, 0xE3	; 227
    3e50:	fe 4f       	sbci	r31, 0xFE	; 254
    3e52:	80 81       	ld	r24, Z
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	8d 93       	st	X+, r24
    3e58:	9c 93       	st	X, r25
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e7 5e       	subi	r30, 0xE7	; 231
    3e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <main+0x1b10>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e7 5e       	subi	r30, 0xE7	; 231
    3e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 16);
    3e72:	80 e2       	ldi	r24, 0x20	; 32
    3e74:	61 e0       	ldi	r22, 0x01	; 1
    3e76:	40 e1       	ldi	r20, 0x10	; 16
    3e78:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 17);
    3e7c:	24 ef       	ldi	r18, 0xF4	; 244
    3e7e:	32 e0       	ldi	r19, 0x02	; 2
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	b9 01       	movw	r22, r18
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	21 e1       	ldi	r18, 0x11	; 17
    3e88:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	eb 5e       	subi	r30, 0xEB	; 235
    3e90:	fe 4f       	sbci	r31, 0xFE	; 254
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	a8 ec       	ldi	r26, 0xC8	; 200
    3e98:	b2 e4       	ldi	r27, 0x42	; 66
    3e9a:	80 83       	st	Z, r24
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	a2 83       	std	Z+2, r26	; 0x02
    3ea0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea2:	8e 01       	movw	r16, r28
    3ea4:	0f 5e       	subi	r16, 0xEF	; 239
    3ea6:	1e 4f       	sbci	r17, 0xFE	; 254
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	eb 5e       	subi	r30, 0xEB	; 235
    3eac:	fe 4f       	sbci	r31, 0xFE	; 254
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	4a e7       	ldi	r20, 0x7A	; 122
    3ebc:	55 e4       	ldi	r21, 0x45	; 69
    3ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	80 83       	st	Z, r24
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	a2 83       	std	Z+2, r26	; 0x02
    3ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	ef 5e       	subi	r30, 0xEF	; 239
    3ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed6:	60 81       	ld	r22, Z
    3ed8:	71 81       	ldd	r23, Z+1	; 0x01
    3eda:	82 81       	ldd	r24, Z+2	; 0x02
    3edc:	93 81       	ldd	r25, Z+3	; 0x03
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	40 e8       	ldi	r20, 0x80	; 128
    3ee4:	5f e3       	ldi	r21, 0x3F	; 63
    3ee6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eea:	88 23       	and	r24, r24
    3eec:	44 f4       	brge	.+16     	; 0x3efe <main+0x1baa>
		__ticks = 1;
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e1 5f       	subi	r30, 0xF1	; 241
    3ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	80 83       	st	Z, r24
    3efc:	64 c0       	rjmp	.+200    	; 0x3fc6 <main+0x1c72>
	else if (__tmp > 65535)
    3efe:	fe 01       	movw	r30, r28
    3f00:	ef 5e       	subi	r30, 0xEF	; 239
    3f02:	fe 4f       	sbci	r31, 0xFE	; 254
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	3f ef       	ldi	r19, 0xFF	; 255
    3f10:	4f e7       	ldi	r20, 0x7F	; 127
    3f12:	57 e4       	ldi	r21, 0x47	; 71
    3f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f18:	18 16       	cp	r1, r24
    3f1a:	0c f0       	brlt	.+2      	; 0x3f1e <main+0x1bca>
    3f1c:	43 c0       	rjmp	.+134    	; 0x3fa4 <main+0x1c50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	fe 01       	movw	r30, r28
    3f20:	eb 5e       	subi	r30, 0xEB	; 235
    3f22:	fe 4f       	sbci	r31, 0xFE	; 254
    3f24:	60 81       	ld	r22, Z
    3f26:	71 81       	ldd	r23, Z+1	; 0x01
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	93 81       	ldd	r25, Z+3	; 0x03
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	40 e2       	ldi	r20, 0x20	; 32
    3f32:	51 e4       	ldi	r21, 0x41	; 65
    3f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	8e 01       	movw	r16, r28
    3f3e:	01 5f       	subi	r16, 0xF1	; 241
    3f40:	1e 4f       	sbci	r17, 0xFE	; 254
    3f42:	bc 01       	movw	r22, r24
    3f44:	cd 01       	movw	r24, r26
    3f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	f8 01       	movw	r30, r16
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
    3f54:	1f c0       	rjmp	.+62     	; 0x3f94 <main+0x1c40>
    3f56:	fe 01       	movw	r30, r28
    3f58:	e3 5f       	subi	r30, 0xF3	; 243
    3f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f5c:	80 e9       	ldi	r24, 0x90	; 144
    3f5e:	91 e0       	ldi	r25, 0x01	; 1
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
    3f64:	fe 01       	movw	r30, r28
    3f66:	e3 5f       	subi	r30, 0xF3	; 243
    3f68:	fe 4f       	sbci	r31, 0xFE	; 254
    3f6a:	80 81       	ld	r24, Z
    3f6c:	91 81       	ldd	r25, Z+1	; 0x01
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <main+0x1c1a>
    3f72:	fe 01       	movw	r30, r28
    3f74:	e3 5f       	subi	r30, 0xF3	; 243
    3f76:	fe 4f       	sbci	r31, 0xFE	; 254
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	de 01       	movw	r26, r28
    3f7e:	a1 5f       	subi	r26, 0xF1	; 241
    3f80:	be 4f       	sbci	r27, 0xFE	; 254
    3f82:	fe 01       	movw	r30, r28
    3f84:	e1 5f       	subi	r30, 0xF1	; 241
    3f86:	fe 4f       	sbci	r31, 0xFE	; 254
    3f88:	80 81       	ld	r24, Z
    3f8a:	91 81       	ldd	r25, Z+1	; 0x01
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	11 96       	adiw	r26, 0x01	; 1
    3f90:	9c 93       	st	X, r25
    3f92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f94:	fe 01       	movw	r30, r28
    3f96:	e1 5f       	subi	r30, 0xF1	; 241
    3f98:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9a:	80 81       	ld	r24, Z
    3f9c:	91 81       	ldd	r25, Z+1	; 0x01
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	d1 f6       	brne	.-76     	; 0x3f56 <main+0x1c02>
    3fa2:	27 c0       	rjmp	.+78     	; 0x3ff2 <main+0x1c9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	01 5f       	subi	r16, 0xF1	; 241
    3fa8:	1e 4f       	sbci	r17, 0xFE	; 254
    3faa:	fe 01       	movw	r30, r28
    3fac:	ef 5e       	subi	r30, 0xEF	; 239
    3fae:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	82 81       	ldd	r24, Z+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	80 83       	st	Z, r24
    3fc6:	de 01       	movw	r26, r28
    3fc8:	a5 5f       	subi	r26, 0xF5	; 245
    3fca:	be 4f       	sbci	r27, 0xFE	; 254
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e1 5f       	subi	r30, 0xF1	; 241
    3fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	8d 93       	st	X+, r24
    3fd8:	9c 93       	st	X, r25
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e5 5f       	subi	r30, 0xF5	; 245
    3fde:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe0:	80 81       	ld	r24, Z
    3fe2:	91 81       	ldd	r25, Z+1	; 0x01
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <main+0x1c90>
    3fe8:	fe 01       	movw	r30, r28
    3fea:	e5 5f       	subi	r30, 0xF5	; 245
    3fec:	fe 4f       	sbci	r31, 0xFE	; 254
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCharacterAtXY(' ', 1, 17);
    3ff2:	80 e2       	ldi	r24, 0x20	; 32
    3ff4:	61 e0       	ldi	r22, 0x01	; 1
    3ff6:	41 e1       	ldi	r20, 0x11	; 17
    3ff8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCharacterAtXY(' ', 3, 8);
    3ffc:	80 e2       	ldi	r24, 0x20	; 32
    3ffe:	63 e0       	ldi	r22, 0x03	; 3
    4000:	48 e0       	ldi	r20, 0x08	; 8
    4002:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_voidWriteCharacterAtXY>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 1, 18);
    4006:	24 ef       	ldi	r18, 0xF4	; 244
    4008:	32 e0       	ldi	r19, 0x02	; 2
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	b9 01       	movw	r22, r18
    400e:	41 e0       	ldi	r20, 0x01	; 1
    4010:	22 e1       	ldi	r18, 0x12	; 18
    4012:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 18);
    4016:	2c e4       	ldi	r18, 0x4C	; 76
    4018:	33 e0       	ldi	r19, 0x03	; 3
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	b9 01       	movw	r22, r18
    401e:	43 e0       	ldi	r20, 0x03	; 3
    4020:	22 e1       	ldi	r18, 0x12	; 18
    4022:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(2, True, 1, 19);
    4026:	24 e6       	ldi	r18, 0x64	; 100
    4028:	33 e0       	ldi	r19, 0x03	; 3
    402a:	82 e0       	ldi	r24, 0x02	; 2
    402c:	b9 01       	movw	r22, r18
    402e:	41 e0       	ldi	r20, 0x01	; 1
    4030:	23 e1       	ldi	r18, 0x13	; 19
    4032:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(3, False, 3, 19);
    4036:	2c e6       	ldi	r18, 0x6C	; 108
    4038:	33 e0       	ldi	r19, 0x03	; 3
    403a:	83 e0       	ldi	r24, 0x03	; 3
    403c:	b9 01       	movw	r22, r18
    403e:	43 e0       	ldi	r20, 0x03	; 3
    4040:	23 e1       	ldi	r18, 0x13	; 19
    4042:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4046:	fe 01       	movw	r30, r28
    4048:	e9 5f       	subi	r30, 0xF9	; 249
    404a:	fe 4f       	sbci	r31, 0xFE	; 254
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	aa e7       	ldi	r26, 0x7A	; 122
    4052:	b4 e4       	ldi	r27, 0x44	; 68
    4054:	80 83       	st	Z, r24
    4056:	91 83       	std	Z+1, r25	; 0x01
    4058:	a2 83       	std	Z+2, r26	; 0x02
    405a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405c:	8e 01       	movw	r16, r28
    405e:	0d 5f       	subi	r16, 0xFD	; 253
    4060:	1e 4f       	sbci	r17, 0xFE	; 254
    4062:	fe 01       	movw	r30, r28
    4064:	e9 5f       	subi	r30, 0xF9	; 249
    4066:	fe 4f       	sbci	r31, 0xFE	; 254
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	4a e7       	ldi	r20, 0x7A	; 122
    4076:	55 e4       	ldi	r21, 0x45	; 69
    4078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	f8 01       	movw	r30, r16
    4082:	80 83       	st	Z, r24
    4084:	91 83       	std	Z+1, r25	; 0x01
    4086:	a2 83       	std	Z+2, r26	; 0x02
    4088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    408a:	fe 01       	movw	r30, r28
    408c:	ed 5f       	subi	r30, 0xFD	; 253
    408e:	fe 4f       	sbci	r31, 0xFE	; 254
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	82 81       	ldd	r24, Z+2	; 0x02
    4096:	93 81       	ldd	r25, Z+3	; 0x03
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e8       	ldi	r20, 0x80	; 128
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a4:	88 23       	and	r24, r24
    40a6:	44 f4       	brge	.+16     	; 0x40b8 <main+0x1d64>
		__ticks = 1;
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 5f       	subi	r30, 0xFF	; 255
    40ac:	fe 4f       	sbci	r31, 0xFE	; 254
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	91 83       	std	Z+1, r25	; 0x01
    40b4:	80 83       	st	Z, r24
    40b6:	64 c0       	rjmp	.+200    	; 0x4180 <main+0x1e2c>
	else if (__tmp > 65535)
    40b8:	fe 01       	movw	r30, r28
    40ba:	ed 5f       	subi	r30, 0xFD	; 253
    40bc:	fe 4f       	sbci	r31, 0xFE	; 254
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	3f ef       	ldi	r19, 0xFF	; 255
    40ca:	4f e7       	ldi	r20, 0x7F	; 127
    40cc:	57 e4       	ldi	r21, 0x47	; 71
    40ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d2:	18 16       	cp	r1, r24
    40d4:	0c f0       	brlt	.+2      	; 0x40d8 <main+0x1d84>
    40d6:	43 c0       	rjmp	.+134    	; 0x415e <main+0x1e0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d8:	fe 01       	movw	r30, r28
    40da:	e9 5f       	subi	r30, 0xF9	; 249
    40dc:	fe 4f       	sbci	r31, 0xFE	; 254
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e2       	ldi	r20, 0x20	; 32
    40ec:	51 e4       	ldi	r21, 0x41	; 65
    40ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	8e 01       	movw	r16, r28
    40f8:	0f 5f       	subi	r16, 0xFF	; 255
    40fa:	1e 4f       	sbci	r17, 0xFE	; 254
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	f8 01       	movw	r30, r16
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	80 83       	st	Z, r24
    410e:	1f c0       	rjmp	.+62     	; 0x414e <main+0x1dfa>
    4110:	fe 01       	movw	r30, r28
    4112:	e1 50       	subi	r30, 0x01	; 1
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 e9       	ldi	r24, 0x90	; 144
    4118:	91 e0       	ldi	r25, 0x01	; 1
    411a:	91 83       	std	Z+1, r25	; 0x01
    411c:	80 83       	st	Z, r24
    411e:	fe 01       	movw	r30, r28
    4120:	e1 50       	subi	r30, 0x01	; 1
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	80 81       	ld	r24, Z
    4126:	91 81       	ldd	r25, Z+1	; 0x01
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <main+0x1dd4>
    412c:	fe 01       	movw	r30, r28
    412e:	e1 50       	subi	r30, 0x01	; 1
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	91 83       	std	Z+1, r25	; 0x01
    4134:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4136:	de 01       	movw	r26, r28
    4138:	af 5f       	subi	r26, 0xFF	; 255
    413a:	be 4f       	sbci	r27, 0xFE	; 254
    413c:	fe 01       	movw	r30, r28
    413e:	ef 5f       	subi	r30, 0xFF	; 255
    4140:	fe 4f       	sbci	r31, 0xFE	; 254
    4142:	80 81       	ld	r24, Z
    4144:	91 81       	ldd	r25, Z+1	; 0x01
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	11 96       	adiw	r26, 0x01	; 1
    414a:	9c 93       	st	X, r25
    414c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414e:	fe 01       	movw	r30, r28
    4150:	ef 5f       	subi	r30, 0xFF	; 255
    4152:	fe 4f       	sbci	r31, 0xFE	; 254
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	00 97       	sbiw	r24, 0x00	; 0
    415a:	d1 f6       	brne	.-76     	; 0x4110 <main+0x1dbc>
    415c:	27 c0       	rjmp	.+78     	; 0x41ac <main+0x1e58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415e:	8e 01       	movw	r16, r28
    4160:	0f 5f       	subi	r16, 0xFF	; 255
    4162:	1e 4f       	sbci	r17, 0xFE	; 254
    4164:	fe 01       	movw	r30, r28
    4166:	ed 5f       	subi	r30, 0xFD	; 253
    4168:	fe 4f       	sbci	r31, 0xFE	; 254
    416a:	60 81       	ld	r22, Z
    416c:	71 81       	ldd	r23, Z+1	; 0x01
    416e:	82 81       	ldd	r24, Z+2	; 0x02
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	f8 01       	movw	r30, r16
    417c:	91 83       	std	Z+1, r25	; 0x01
    417e:	80 83       	st	Z, r24
    4180:	de 01       	movw	r26, r28
    4182:	a3 50       	subi	r26, 0x03	; 3
    4184:	bf 4f       	sbci	r27, 0xFF	; 255
    4186:	fe 01       	movw	r30, r28
    4188:	ef 5f       	subi	r30, 0xFF	; 255
    418a:	fe 4f       	sbci	r31, 0xFE	; 254
    418c:	80 81       	ld	r24, Z
    418e:	91 81       	ldd	r25, Z+1	; 0x01
    4190:	8d 93       	st	X+, r24
    4192:	9c 93       	st	X, r25
    4194:	fe 01       	movw	r30, r28
    4196:	e3 50       	subi	r30, 0x03	; 3
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 81       	ld	r24, Z
    419c:	91 81       	ldd	r25, Z+1	; 0x01
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <main+0x1e4a>
    41a2:	fe 01       	movw	r30, r28
    41a4:	e3 50       	subi	r30, 0x03	; 3
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	80 83       	st	Z, r24

	_delay_ms(1000);
	LCD_voidClear();
    41ac:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>


	/*NTI Result*/
	/*Hamoksha accepted*/
	LCD_voidWriteStringAtXY("Hmoksha was accepted", 0, 0);
    41b0:	8f e2       	ldi	r24, 0x2F	; 47
    41b2:	91 e0       	ldi	r25, 0x01	; 1
    41b4:	60 e0       	ldi	r22, 0x00	; 0
    41b6:	40 e0       	ldi	r20, 0x00	; 0
    41b8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("So, He was Pleased", 1, 0);
    41bc:	84 e4       	ldi	r24, 0x44	; 68
    41be:	91 e0       	ldi	r25, 0x01	; 1
    41c0:	61 e0       	ldi	r22, 0x01	; 1
    41c2:	40 e0       	ldi	r20, 0x00	; 0
    41c4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>

	LCD_voidWriteCustomCharacter(0, Hamoksha, 3, 8);
    41c8:	24 ef       	ldi	r18, 0xF4	; 244
    41ca:	32 e0       	ldi	r19, 0x02	; 2
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	b9 01       	movw	r22, r18
    41d0:	43 e0       	ldi	r20, 0x03	; 3
    41d2:	28 e0       	ldi	r18, 0x08	; 8
    41d4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 3, 9);
    41d8:	24 ef       	ldi	r18, 0xF4	; 244
    41da:	32 e0       	ldi	r19, 0x02	; 2
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	b9 01       	movw	r22, r18
    41e0:	43 e0       	ldi	r20, 0x03	; 3
    41e2:	29 e0       	ldi	r18, 0x09	; 9
    41e4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 3, 10);
    41e8:	24 ef       	ldi	r18, 0xF4	; 244
    41ea:	32 e0       	ldi	r19, 0x02	; 2
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	b9 01       	movw	r22, r18
    41f0:	43 e0       	ldi	r20, 0x03	; 3
    41f2:	2a e0       	ldi	r18, 0x0A	; 10
    41f4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Hamoksha, 3, 11);
    41f8:	24 ef       	ldi	r18, 0xF4	; 244
    41fa:	32 e0       	ldi	r19, 0x02	; 2
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	b9 01       	movw	r22, r18
    4200:	43 e0       	ldi	r20, 0x03	; 3
    4202:	2b e0       	ldi	r18, 0x0B	; 11
    4204:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4208:	fe 01       	movw	r30, r28
    420a:	e7 50       	subi	r30, 0x07	; 7
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	a8 ec       	ldi	r26, 0xC8	; 200
    4214:	b2 e4       	ldi	r27, 0x42	; 66
    4216:	80 83       	st	Z, r24
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	a2 83       	std	Z+2, r26	; 0x02
    421c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421e:	8e 01       	movw	r16, r28
    4220:	0b 50       	subi	r16, 0x0B	; 11
    4222:	1f 4f       	sbci	r17, 0xFF	; 255
    4224:	fe 01       	movw	r30, r28
    4226:	e7 50       	subi	r30, 0x07	; 7
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	60 81       	ld	r22, Z
    422c:	71 81       	ldd	r23, Z+1	; 0x01
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	93 81       	ldd	r25, Z+3	; 0x03
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	4a e7       	ldi	r20, 0x7A	; 122
    4238:	55 e4       	ldi	r21, 0x45	; 69
    423a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	f8 01       	movw	r30, r16
    4244:	80 83       	st	Z, r24
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	a2 83       	std	Z+2, r26	; 0x02
    424a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    424c:	fe 01       	movw	r30, r28
    424e:	eb 50       	subi	r30, 0x0B	; 11
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	60 81       	ld	r22, Z
    4254:	71 81       	ldd	r23, Z+1	; 0x01
    4256:	82 81       	ldd	r24, Z+2	; 0x02
    4258:	93 81       	ldd	r25, Z+3	; 0x03
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	40 e8       	ldi	r20, 0x80	; 128
    4260:	5f e3       	ldi	r21, 0x3F	; 63
    4262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4266:	88 23       	and	r24, r24
    4268:	44 f4       	brge	.+16     	; 0x427a <main+0x1f26>
		__ticks = 1;
    426a:	fe 01       	movw	r30, r28
    426c:	ed 50       	subi	r30, 0x0D	; 13
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	80 83       	st	Z, r24
    4278:	64 c0       	rjmp	.+200    	; 0x4342 <main+0x1fee>
	else if (__tmp > 65535)
    427a:	fe 01       	movw	r30, r28
    427c:	eb 50       	subi	r30, 0x0B	; 11
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	3f ef       	ldi	r19, 0xFF	; 255
    428c:	4f e7       	ldi	r20, 0x7F	; 127
    428e:	57 e4       	ldi	r21, 0x47	; 71
    4290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4294:	18 16       	cp	r1, r24
    4296:	0c f0       	brlt	.+2      	; 0x429a <main+0x1f46>
    4298:	43 c0       	rjmp	.+134    	; 0x4320 <main+0x1fcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    429a:	fe 01       	movw	r30, r28
    429c:	e7 50       	subi	r30, 0x07	; 7
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	60 81       	ld	r22, Z
    42a2:	71 81       	ldd	r23, Z+1	; 0x01
    42a4:	82 81       	ldd	r24, Z+2	; 0x02
    42a6:	93 81       	ldd	r25, Z+3	; 0x03
    42a8:	20 e0       	ldi	r18, 0x00	; 0
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	40 e2       	ldi	r20, 0x20	; 32
    42ae:	51 e4       	ldi	r21, 0x41	; 65
    42b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	8e 01       	movw	r16, r28
    42ba:	0d 50       	subi	r16, 0x0D	; 13
    42bc:	1f 4f       	sbci	r17, 0xFF	; 255
    42be:	bc 01       	movw	r22, r24
    42c0:	cd 01       	movw	r24, r26
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	f8 01       	movw	r30, r16
    42cc:	91 83       	std	Z+1, r25	; 0x01
    42ce:	80 83       	st	Z, r24
    42d0:	1f c0       	rjmp	.+62     	; 0x4310 <main+0x1fbc>
    42d2:	fe 01       	movw	r30, r28
    42d4:	ef 50       	subi	r30, 0x0F	; 15
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	80 e9       	ldi	r24, 0x90	; 144
    42da:	91 e0       	ldi	r25, 0x01	; 1
    42dc:	91 83       	std	Z+1, r25	; 0x01
    42de:	80 83       	st	Z, r24
    42e0:	fe 01       	movw	r30, r28
    42e2:	ef 50       	subi	r30, 0x0F	; 15
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 81       	ld	r24, Z
    42e8:	91 81       	ldd	r25, Z+1	; 0x01
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	f1 f7       	brne	.-4      	; 0x42ea <main+0x1f96>
    42ee:	fe 01       	movw	r30, r28
    42f0:	ef 50       	subi	r30, 0x0F	; 15
    42f2:	ff 4f       	sbci	r31, 0xFF	; 255
    42f4:	91 83       	std	Z+1, r25	; 0x01
    42f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f8:	de 01       	movw	r26, r28
    42fa:	ad 50       	subi	r26, 0x0D	; 13
    42fc:	bf 4f       	sbci	r27, 0xFF	; 255
    42fe:	fe 01       	movw	r30, r28
    4300:	ed 50       	subi	r30, 0x0D	; 13
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	11 96       	adiw	r26, 0x01	; 1
    430c:	9c 93       	st	X, r25
    430e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4310:	fe 01       	movw	r30, r28
    4312:	ed 50       	subi	r30, 0x0D	; 13
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	80 81       	ld	r24, Z
    4318:	91 81       	ldd	r25, Z+1	; 0x01
    431a:	00 97       	sbiw	r24, 0x00	; 0
    431c:	d1 f6       	brne	.-76     	; 0x42d2 <main+0x1f7e>
    431e:	27 c0       	rjmp	.+78     	; 0x436e <main+0x201a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4320:	8e 01       	movw	r16, r28
    4322:	0d 50       	subi	r16, 0x0D	; 13
    4324:	1f 4f       	sbci	r17, 0xFF	; 255
    4326:	fe 01       	movw	r30, r28
    4328:	eb 50       	subi	r30, 0x0B	; 11
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	60 81       	ld	r22, Z
    432e:	71 81       	ldd	r23, Z+1	; 0x01
    4330:	82 81       	ldd	r24, Z+2	; 0x02
    4332:	93 81       	ldd	r25, Z+3	; 0x03
    4334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	f8 01       	movw	r30, r16
    433e:	91 83       	std	Z+1, r25	; 0x01
    4340:	80 83       	st	Z, r24
    4342:	de 01       	movw	r26, r28
    4344:	a1 51       	subi	r26, 0x11	; 17
    4346:	bf 4f       	sbci	r27, 0xFF	; 255
    4348:	fe 01       	movw	r30, r28
    434a:	ed 50       	subi	r30, 0x0D	; 13
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	8d 93       	st	X+, r24
    4354:	9c 93       	st	X, r25
    4356:	fe 01       	movw	r30, r28
    4358:	e1 51       	subi	r30, 0x11	; 17
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	f1 f7       	brne	.-4      	; 0x4360 <main+0x200c>
    4364:	fe 01       	movw	r30, r28
    4366:	e1 51       	subi	r30, 0x11	; 17
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	91 83       	std	Z+1, r25	; 0x01
    436c:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance1, 3, 8);
    436e:	2c ef       	ldi	r18, 0xFC	; 252
    4370:	32 e0       	ldi	r19, 0x02	; 2
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	b9 01       	movw	r22, r18
    4376:	43 e0       	ldi	r20, 0x03	; 3
    4378:	28 e0       	ldi	r18, 0x08	; 8
    437a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance1, 3, 9);
    437e:	2c ef       	ldi	r18, 0xFC	; 252
    4380:	32 e0       	ldi	r19, 0x02	; 2
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	b9 01       	movw	r22, r18
    4386:	43 e0       	ldi	r20, 0x03	; 3
    4388:	29 e0       	ldi	r18, 0x09	; 9
    438a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance1, 3, 10);
    438e:	2c ef       	ldi	r18, 0xFC	; 252
    4390:	32 e0       	ldi	r19, 0x02	; 2
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	b9 01       	movw	r22, r18
    4396:	43 e0       	ldi	r20, 0x03	; 3
    4398:	2a e0       	ldi	r18, 0x0A	; 10
    439a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance1, 3, 11);
    439e:	2c ef       	ldi	r18, 0xFC	; 252
    43a0:	32 e0       	ldi	r19, 0x02	; 2
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	b9 01       	movw	r22, r18
    43a6:	43 e0       	ldi	r20, 0x03	; 3
    43a8:	2b e0       	ldi	r18, 0x0B	; 11
    43aa:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    43ae:	fe 01       	movw	r30, r28
    43b0:	e5 51       	subi	r30, 0x15	; 21
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	80 e0       	ldi	r24, 0x00	; 0
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	a8 ec       	ldi	r26, 0xC8	; 200
    43ba:	b2 e4       	ldi	r27, 0x42	; 66
    43bc:	80 83       	st	Z, r24
    43be:	91 83       	std	Z+1, r25	; 0x01
    43c0:	a2 83       	std	Z+2, r26	; 0x02
    43c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c4:	8e 01       	movw	r16, r28
    43c6:	09 51       	subi	r16, 0x19	; 25
    43c8:	1f 4f       	sbci	r17, 0xFF	; 255
    43ca:	fe 01       	movw	r30, r28
    43cc:	e5 51       	subi	r30, 0x15	; 21
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	60 81       	ld	r22, Z
    43d2:	71 81       	ldd	r23, Z+1	; 0x01
    43d4:	82 81       	ldd	r24, Z+2	; 0x02
    43d6:	93 81       	ldd	r25, Z+3	; 0x03
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	4a e7       	ldi	r20, 0x7A	; 122
    43de:	55 e4       	ldi	r21, 0x45	; 69
    43e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	f8 01       	movw	r30, r16
    43ea:	80 83       	st	Z, r24
    43ec:	91 83       	std	Z+1, r25	; 0x01
    43ee:	a2 83       	std	Z+2, r26	; 0x02
    43f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43f2:	fe 01       	movw	r30, r28
    43f4:	e9 51       	subi	r30, 0x19	; 25
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	60 81       	ld	r22, Z
    43fa:	71 81       	ldd	r23, Z+1	; 0x01
    43fc:	82 81       	ldd	r24, Z+2	; 0x02
    43fe:	93 81       	ldd	r25, Z+3	; 0x03
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	40 e8       	ldi	r20, 0x80	; 128
    4406:	5f e3       	ldi	r21, 0x3F	; 63
    4408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    440c:	88 23       	and	r24, r24
    440e:	44 f4       	brge	.+16     	; 0x4420 <main+0x20cc>
		__ticks = 1;
    4410:	fe 01       	movw	r30, r28
    4412:	eb 51       	subi	r30, 0x1B	; 27
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	80 83       	st	Z, r24
    441e:	64 c0       	rjmp	.+200    	; 0x44e8 <main+0x2194>
	else if (__tmp > 65535)
    4420:	fe 01       	movw	r30, r28
    4422:	e9 51       	subi	r30, 0x19	; 25
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	3f ef       	ldi	r19, 0xFF	; 255
    4432:	4f e7       	ldi	r20, 0x7F	; 127
    4434:	57 e4       	ldi	r21, 0x47	; 71
    4436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    443a:	18 16       	cp	r1, r24
    443c:	0c f0       	brlt	.+2      	; 0x4440 <main+0x20ec>
    443e:	43 c0       	rjmp	.+134    	; 0x44c6 <main+0x2172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4440:	fe 01       	movw	r30, r28
    4442:	e5 51       	subi	r30, 0x15	; 21
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	60 81       	ld	r22, Z
    4448:	71 81       	ldd	r23, Z+1	; 0x01
    444a:	82 81       	ldd	r24, Z+2	; 0x02
    444c:	93 81       	ldd	r25, Z+3	; 0x03
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	40 e2       	ldi	r20, 0x20	; 32
    4454:	51 e4       	ldi	r21, 0x41	; 65
    4456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	8e 01       	movw	r16, r28
    4460:	0b 51       	subi	r16, 0x1B	; 27
    4462:	1f 4f       	sbci	r17, 0xFF	; 255
    4464:	bc 01       	movw	r22, r24
    4466:	cd 01       	movw	r24, r26
    4468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	f8 01       	movw	r30, r16
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	80 83       	st	Z, r24
    4476:	1f c0       	rjmp	.+62     	; 0x44b6 <main+0x2162>
    4478:	fe 01       	movw	r30, r28
    447a:	ed 51       	subi	r30, 0x1D	; 29
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 e9       	ldi	r24, 0x90	; 144
    4480:	91 e0       	ldi	r25, 0x01	; 1
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
    4486:	fe 01       	movw	r30, r28
    4488:	ed 51       	subi	r30, 0x1D	; 29
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	80 81       	ld	r24, Z
    448e:	91 81       	ldd	r25, Z+1	; 0x01
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	f1 f7       	brne	.-4      	; 0x4490 <main+0x213c>
    4494:	fe 01       	movw	r30, r28
    4496:	ed 51       	subi	r30, 0x1D	; 29
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	91 83       	std	Z+1, r25	; 0x01
    449c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449e:	de 01       	movw	r26, r28
    44a0:	ab 51       	subi	r26, 0x1B	; 27
    44a2:	bf 4f       	sbci	r27, 0xFF	; 255
    44a4:	fe 01       	movw	r30, r28
    44a6:	eb 51       	subi	r30, 0x1B	; 27
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	80 81       	ld	r24, Z
    44ac:	91 81       	ldd	r25, Z+1	; 0x01
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	11 96       	adiw	r26, 0x01	; 1
    44b2:	9c 93       	st	X, r25
    44b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b6:	fe 01       	movw	r30, r28
    44b8:	eb 51       	subi	r30, 0x1B	; 27
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	00 97       	sbiw	r24, 0x00	; 0
    44c2:	d1 f6       	brne	.-76     	; 0x4478 <main+0x2124>
    44c4:	27 c0       	rjmp	.+78     	; 0x4514 <main+0x21c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c6:	8e 01       	movw	r16, r28
    44c8:	0b 51       	subi	r16, 0x1B	; 27
    44ca:	1f 4f       	sbci	r17, 0xFF	; 255
    44cc:	fe 01       	movw	r30, r28
    44ce:	e9 51       	subi	r30, 0x19	; 25
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	60 81       	ld	r22, Z
    44d4:	71 81       	ldd	r23, Z+1	; 0x01
    44d6:	82 81       	ldd	r24, Z+2	; 0x02
    44d8:	93 81       	ldd	r25, Z+3	; 0x03
    44da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	f8 01       	movw	r30, r16
    44e4:	91 83       	std	Z+1, r25	; 0x01
    44e6:	80 83       	st	Z, r24
    44e8:	de 01       	movw	r26, r28
    44ea:	af 51       	subi	r26, 0x1F	; 31
    44ec:	bf 4f       	sbci	r27, 0xFF	; 255
    44ee:	fe 01       	movw	r30, r28
    44f0:	eb 51       	subi	r30, 0x1B	; 27
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	8d 93       	st	X+, r24
    44fa:	9c 93       	st	X, r25
    44fc:	fe 01       	movw	r30, r28
    44fe:	ef 51       	subi	r30, 0x1F	; 31
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	91 81       	ldd	r25, Z+1	; 0x01
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <main+0x21b2>
    450a:	fe 01       	movw	r30, r28
    450c:	ef 51       	subi	r30, 0x1F	; 31
    450e:	ff 4f       	sbci	r31, 0xFF	; 255
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance2, 3, 8);
    4514:	24 e0       	ldi	r18, 0x04	; 4
    4516:	33 e0       	ldi	r19, 0x03	; 3
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	b9 01       	movw	r22, r18
    451c:	43 e0       	ldi	r20, 0x03	; 3
    451e:	28 e0       	ldi	r18, 0x08	; 8
    4520:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance2, 3, 9);
    4524:	24 e0       	ldi	r18, 0x04	; 4
    4526:	33 e0       	ldi	r19, 0x03	; 3
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	b9 01       	movw	r22, r18
    452c:	43 e0       	ldi	r20, 0x03	; 3
    452e:	29 e0       	ldi	r18, 0x09	; 9
    4530:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance2, 3, 10);
    4534:	24 e0       	ldi	r18, 0x04	; 4
    4536:	33 e0       	ldi	r19, 0x03	; 3
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	b9 01       	movw	r22, r18
    453c:	43 e0       	ldi	r20, 0x03	; 3
    453e:	2a e0       	ldi	r18, 0x0A	; 10
    4540:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance2, 3, 11);
    4544:	24 e0       	ldi	r18, 0x04	; 4
    4546:	33 e0       	ldi	r19, 0x03	; 3
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	b9 01       	movw	r22, r18
    454c:	43 e0       	ldi	r20, 0x03	; 3
    454e:	2b e0       	ldi	r18, 0x0B	; 11
    4550:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4554:	fe 01       	movw	r30, r28
    4556:	e3 52       	subi	r30, 0x23	; 35
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	a8 ec       	ldi	r26, 0xC8	; 200
    4560:	b2 e4       	ldi	r27, 0x42	; 66
    4562:	80 83       	st	Z, r24
    4564:	91 83       	std	Z+1, r25	; 0x01
    4566:	a2 83       	std	Z+2, r26	; 0x02
    4568:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456a:	8e 01       	movw	r16, r28
    456c:	07 52       	subi	r16, 0x27	; 39
    456e:	1f 4f       	sbci	r17, 0xFF	; 255
    4570:	fe 01       	movw	r30, r28
    4572:	e3 52       	subi	r30, 0x23	; 35
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	60 81       	ld	r22, Z
    4578:	71 81       	ldd	r23, Z+1	; 0x01
    457a:	82 81       	ldd	r24, Z+2	; 0x02
    457c:	93 81       	ldd	r25, Z+3	; 0x03
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	4a e7       	ldi	r20, 0x7A	; 122
    4584:	55 e4       	ldi	r21, 0x45	; 69
    4586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	f8 01       	movw	r30, r16
    4590:	80 83       	st	Z, r24
    4592:	91 83       	std	Z+1, r25	; 0x01
    4594:	a2 83       	std	Z+2, r26	; 0x02
    4596:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4598:	fe 01       	movw	r30, r28
    459a:	e7 52       	subi	r30, 0x27	; 39
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	60 81       	ld	r22, Z
    45a0:	71 81       	ldd	r23, Z+1	; 0x01
    45a2:	82 81       	ldd	r24, Z+2	; 0x02
    45a4:	93 81       	ldd	r25, Z+3	; 0x03
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	40 e8       	ldi	r20, 0x80	; 128
    45ac:	5f e3       	ldi	r21, 0x3F	; 63
    45ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45b2:	88 23       	and	r24, r24
    45b4:	44 f4       	brge	.+16     	; 0x45c6 <main+0x2272>
		__ticks = 1;
    45b6:	fe 01       	movw	r30, r28
    45b8:	e9 52       	subi	r30, 0x29	; 41
    45ba:	ff 4f       	sbci	r31, 0xFF	; 255
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	91 83       	std	Z+1, r25	; 0x01
    45c2:	80 83       	st	Z, r24
    45c4:	64 c0       	rjmp	.+200    	; 0x468e <main+0x233a>
	else if (__tmp > 65535)
    45c6:	fe 01       	movw	r30, r28
    45c8:	e7 52       	subi	r30, 0x27	; 39
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	60 81       	ld	r22, Z
    45ce:	71 81       	ldd	r23, Z+1	; 0x01
    45d0:	82 81       	ldd	r24, Z+2	; 0x02
    45d2:	93 81       	ldd	r25, Z+3	; 0x03
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	3f ef       	ldi	r19, 0xFF	; 255
    45d8:	4f e7       	ldi	r20, 0x7F	; 127
    45da:	57 e4       	ldi	r21, 0x47	; 71
    45dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45e0:	18 16       	cp	r1, r24
    45e2:	0c f0       	brlt	.+2      	; 0x45e6 <main+0x2292>
    45e4:	43 c0       	rjmp	.+134    	; 0x466c <main+0x2318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e6:	fe 01       	movw	r30, r28
    45e8:	e3 52       	subi	r30, 0x23	; 35
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	60 81       	ld	r22, Z
    45ee:	71 81       	ldd	r23, Z+1	; 0x01
    45f0:	82 81       	ldd	r24, Z+2	; 0x02
    45f2:	93 81       	ldd	r25, Z+3	; 0x03
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	40 e2       	ldi	r20, 0x20	; 32
    45fa:	51 e4       	ldi	r21, 0x41	; 65
    45fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	8e 01       	movw	r16, r28
    4606:	09 52       	subi	r16, 0x29	; 41
    4608:	1f 4f       	sbci	r17, 0xFF	; 255
    460a:	bc 01       	movw	r22, r24
    460c:	cd 01       	movw	r24, r26
    460e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	f8 01       	movw	r30, r16
    4618:	91 83       	std	Z+1, r25	; 0x01
    461a:	80 83       	st	Z, r24
    461c:	1f c0       	rjmp	.+62     	; 0x465c <main+0x2308>
    461e:	fe 01       	movw	r30, r28
    4620:	eb 52       	subi	r30, 0x2B	; 43
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	80 e9       	ldi	r24, 0x90	; 144
    4626:	91 e0       	ldi	r25, 0x01	; 1
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
    462c:	fe 01       	movw	r30, r28
    462e:	eb 52       	subi	r30, 0x2B	; 43
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	80 81       	ld	r24, Z
    4634:	91 81       	ldd	r25, Z+1	; 0x01
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	f1 f7       	brne	.-4      	; 0x4636 <main+0x22e2>
    463a:	fe 01       	movw	r30, r28
    463c:	eb 52       	subi	r30, 0x2B	; 43
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	91 83       	std	Z+1, r25	; 0x01
    4642:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4644:	de 01       	movw	r26, r28
    4646:	a9 52       	subi	r26, 0x29	; 41
    4648:	bf 4f       	sbci	r27, 0xFF	; 255
    464a:	fe 01       	movw	r30, r28
    464c:	e9 52       	subi	r30, 0x29	; 41
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 81       	ld	r24, Z
    4652:	91 81       	ldd	r25, Z+1	; 0x01
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	11 96       	adiw	r26, 0x01	; 1
    4658:	9c 93       	st	X, r25
    465a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465c:	fe 01       	movw	r30, r28
    465e:	e9 52       	subi	r30, 0x29	; 41
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	80 81       	ld	r24, Z
    4664:	91 81       	ldd	r25, Z+1	; 0x01
    4666:	00 97       	sbiw	r24, 0x00	; 0
    4668:	d1 f6       	brne	.-76     	; 0x461e <main+0x22ca>
    466a:	27 c0       	rjmp	.+78     	; 0x46ba <main+0x2366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466c:	8e 01       	movw	r16, r28
    466e:	09 52       	subi	r16, 0x29	; 41
    4670:	1f 4f       	sbci	r17, 0xFF	; 255
    4672:	fe 01       	movw	r30, r28
    4674:	e7 52       	subi	r30, 0x27	; 39
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	60 81       	ld	r22, Z
    467a:	71 81       	ldd	r23, Z+1	; 0x01
    467c:	82 81       	ldd	r24, Z+2	; 0x02
    467e:	93 81       	ldd	r25, Z+3	; 0x03
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	f8 01       	movw	r30, r16
    468a:	91 83       	std	Z+1, r25	; 0x01
    468c:	80 83       	st	Z, r24
    468e:	de 01       	movw	r26, r28
    4690:	ad 52       	subi	r26, 0x2D	; 45
    4692:	bf 4f       	sbci	r27, 0xFF	; 255
    4694:	fe 01       	movw	r30, r28
    4696:	e9 52       	subi	r30, 0x29	; 41
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	8d 93       	st	X+, r24
    46a0:	9c 93       	st	X, r25
    46a2:	fe 01       	movw	r30, r28
    46a4:	ed 52       	subi	r30, 0x2D	; 45
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 81       	ld	r24, Z
    46aa:	91 81       	ldd	r25, Z+1	; 0x01
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	f1 f7       	brne	.-4      	; 0x46ac <main+0x2358>
    46b0:	fe 01       	movw	r30, r28
    46b2:	ed 52       	subi	r30, 0x2D	; 45
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	91 83       	std	Z+1, r25	; 0x01
    46b8:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance3, 3, 8);
    46ba:	2c e0       	ldi	r18, 0x0C	; 12
    46bc:	33 e0       	ldi	r19, 0x03	; 3
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	b9 01       	movw	r22, r18
    46c2:	43 e0       	ldi	r20, 0x03	; 3
    46c4:	28 e0       	ldi	r18, 0x08	; 8
    46c6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance3, 3, 9);
    46ca:	2c e0       	ldi	r18, 0x0C	; 12
    46cc:	33 e0       	ldi	r19, 0x03	; 3
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	b9 01       	movw	r22, r18
    46d2:	43 e0       	ldi	r20, 0x03	; 3
    46d4:	29 e0       	ldi	r18, 0x09	; 9
    46d6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance3, 3, 10);
    46da:	2c e0       	ldi	r18, 0x0C	; 12
    46dc:	33 e0       	ldi	r19, 0x03	; 3
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	b9 01       	movw	r22, r18
    46e2:	43 e0       	ldi	r20, 0x03	; 3
    46e4:	2a e0       	ldi	r18, 0x0A	; 10
    46e6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance3, 3, 11);
    46ea:	2c e0       	ldi	r18, 0x0C	; 12
    46ec:	33 e0       	ldi	r19, 0x03	; 3
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	b9 01       	movw	r22, r18
    46f2:	43 e0       	ldi	r20, 0x03	; 3
    46f4:	2b e0       	ldi	r18, 0x0B	; 11
    46f6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    46fa:	fe 01       	movw	r30, r28
    46fc:	e1 53       	subi	r30, 0x31	; 49
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	a8 ec       	ldi	r26, 0xC8	; 200
    4706:	b2 e4       	ldi	r27, 0x42	; 66
    4708:	80 83       	st	Z, r24
    470a:	91 83       	std	Z+1, r25	; 0x01
    470c:	a2 83       	std	Z+2, r26	; 0x02
    470e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4710:	8e 01       	movw	r16, r28
    4712:	05 53       	subi	r16, 0x35	; 53
    4714:	1f 4f       	sbci	r17, 0xFF	; 255
    4716:	fe 01       	movw	r30, r28
    4718:	e1 53       	subi	r30, 0x31	; 49
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	60 81       	ld	r22, Z
    471e:	71 81       	ldd	r23, Z+1	; 0x01
    4720:	82 81       	ldd	r24, Z+2	; 0x02
    4722:	93 81       	ldd	r25, Z+3	; 0x03
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	4a e7       	ldi	r20, 0x7A	; 122
    472a:	55 e4       	ldi	r21, 0x45	; 69
    472c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	f8 01       	movw	r30, r16
    4736:	80 83       	st	Z, r24
    4738:	91 83       	std	Z+1, r25	; 0x01
    473a:	a2 83       	std	Z+2, r26	; 0x02
    473c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    473e:	fe 01       	movw	r30, r28
    4740:	e5 53       	subi	r30, 0x35	; 53
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	60 81       	ld	r22, Z
    4746:	71 81       	ldd	r23, Z+1	; 0x01
    4748:	82 81       	ldd	r24, Z+2	; 0x02
    474a:	93 81       	ldd	r25, Z+3	; 0x03
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e8       	ldi	r20, 0x80	; 128
    4752:	5f e3       	ldi	r21, 0x3F	; 63
    4754:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4758:	88 23       	and	r24, r24
    475a:	44 f4       	brge	.+16     	; 0x476c <main+0x2418>
		__ticks = 1;
    475c:	fe 01       	movw	r30, r28
    475e:	e7 53       	subi	r30, 0x37	; 55
    4760:	ff 4f       	sbci	r31, 0xFF	; 255
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	91 83       	std	Z+1, r25	; 0x01
    4768:	80 83       	st	Z, r24
    476a:	64 c0       	rjmp	.+200    	; 0x4834 <main+0x24e0>
	else if (__tmp > 65535)
    476c:	fe 01       	movw	r30, r28
    476e:	e5 53       	subi	r30, 0x35	; 53
    4770:	ff 4f       	sbci	r31, 0xFF	; 255
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	3f ef       	ldi	r19, 0xFF	; 255
    477e:	4f e7       	ldi	r20, 0x7F	; 127
    4780:	57 e4       	ldi	r21, 0x47	; 71
    4782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4786:	18 16       	cp	r1, r24
    4788:	0c f0       	brlt	.+2      	; 0x478c <main+0x2438>
    478a:	43 c0       	rjmp	.+134    	; 0x4812 <main+0x24be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478c:	fe 01       	movw	r30, r28
    478e:	e1 53       	subi	r30, 0x31	; 49
    4790:	ff 4f       	sbci	r31, 0xFF	; 255
    4792:	60 81       	ld	r22, Z
    4794:	71 81       	ldd	r23, Z+1	; 0x01
    4796:	82 81       	ldd	r24, Z+2	; 0x02
    4798:	93 81       	ldd	r25, Z+3	; 0x03
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	40 e2       	ldi	r20, 0x20	; 32
    47a0:	51 e4       	ldi	r21, 0x41	; 65
    47a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	8e 01       	movw	r16, r28
    47ac:	07 53       	subi	r16, 0x37	; 55
    47ae:	1f 4f       	sbci	r17, 0xFF	; 255
    47b0:	bc 01       	movw	r22, r24
    47b2:	cd 01       	movw	r24, r26
    47b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	f8 01       	movw	r30, r16
    47be:	91 83       	std	Z+1, r25	; 0x01
    47c0:	80 83       	st	Z, r24
    47c2:	1f c0       	rjmp	.+62     	; 0x4802 <main+0x24ae>
    47c4:	fe 01       	movw	r30, r28
    47c6:	e9 53       	subi	r30, 0x39	; 57
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	80 e9       	ldi	r24, 0x90	; 144
    47cc:	91 e0       	ldi	r25, 0x01	; 1
    47ce:	91 83       	std	Z+1, r25	; 0x01
    47d0:	80 83       	st	Z, r24
    47d2:	fe 01       	movw	r30, r28
    47d4:	e9 53       	subi	r30, 0x39	; 57
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	80 81       	ld	r24, Z
    47da:	91 81       	ldd	r25, Z+1	; 0x01
    47dc:	01 97       	sbiw	r24, 0x01	; 1
    47de:	f1 f7       	brne	.-4      	; 0x47dc <main+0x2488>
    47e0:	fe 01       	movw	r30, r28
    47e2:	e9 53       	subi	r30, 0x39	; 57
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ea:	de 01       	movw	r26, r28
    47ec:	a7 53       	subi	r26, 0x37	; 55
    47ee:	bf 4f       	sbci	r27, 0xFF	; 255
    47f0:	fe 01       	movw	r30, r28
    47f2:	e7 53       	subi	r30, 0x37	; 55
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	80 81       	ld	r24, Z
    47f8:	91 81       	ldd	r25, Z+1	; 0x01
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	11 96       	adiw	r26, 0x01	; 1
    47fe:	9c 93       	st	X, r25
    4800:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4802:	fe 01       	movw	r30, r28
    4804:	e7 53       	subi	r30, 0x37	; 55
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 81       	ld	r24, Z
    480a:	91 81       	ldd	r25, Z+1	; 0x01
    480c:	00 97       	sbiw	r24, 0x00	; 0
    480e:	d1 f6       	brne	.-76     	; 0x47c4 <main+0x2470>
    4810:	27 c0       	rjmp	.+78     	; 0x4860 <main+0x250c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4812:	8e 01       	movw	r16, r28
    4814:	07 53       	subi	r16, 0x37	; 55
    4816:	1f 4f       	sbci	r17, 0xFF	; 255
    4818:	fe 01       	movw	r30, r28
    481a:	e5 53       	subi	r30, 0x35	; 53
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	60 81       	ld	r22, Z
    4820:	71 81       	ldd	r23, Z+1	; 0x01
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	f8 01       	movw	r30, r16
    4830:	91 83       	std	Z+1, r25	; 0x01
    4832:	80 83       	st	Z, r24
    4834:	de 01       	movw	r26, r28
    4836:	ab 53       	subi	r26, 0x3B	; 59
    4838:	bf 4f       	sbci	r27, 0xFF	; 255
    483a:	fe 01       	movw	r30, r28
    483c:	e7 53       	subi	r30, 0x37	; 55
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	80 81       	ld	r24, Z
    4842:	91 81       	ldd	r25, Z+1	; 0x01
    4844:	8d 93       	st	X+, r24
    4846:	9c 93       	st	X, r25
    4848:	fe 01       	movw	r30, r28
    484a:	eb 53       	subi	r30, 0x3B	; 59
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	80 81       	ld	r24, Z
    4850:	91 81       	ldd	r25, Z+1	; 0x01
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	f1 f7       	brne	.-4      	; 0x4852 <main+0x24fe>
    4856:	fe 01       	movw	r30, r28
    4858:	eb 53       	subi	r30, 0x3B	; 59
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	91 83       	std	Z+1, r25	; 0x01
    485e:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance4, 3, 8);
    4860:	24 e1       	ldi	r18, 0x14	; 20
    4862:	33 e0       	ldi	r19, 0x03	; 3
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	b9 01       	movw	r22, r18
    4868:	43 e0       	ldi	r20, 0x03	; 3
    486a:	28 e0       	ldi	r18, 0x08	; 8
    486c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance4, 3, 9);
    4870:	24 e1       	ldi	r18, 0x14	; 20
    4872:	33 e0       	ldi	r19, 0x03	; 3
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	b9 01       	movw	r22, r18
    4878:	43 e0       	ldi	r20, 0x03	; 3
    487a:	29 e0       	ldi	r18, 0x09	; 9
    487c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance4, 3, 10);
    4880:	24 e1       	ldi	r18, 0x14	; 20
    4882:	33 e0       	ldi	r19, 0x03	; 3
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	b9 01       	movw	r22, r18
    4888:	43 e0       	ldi	r20, 0x03	; 3
    488a:	2a e0       	ldi	r18, 0x0A	; 10
    488c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance4, 3, 11);
    4890:	24 e1       	ldi	r18, 0x14	; 20
    4892:	33 e0       	ldi	r19, 0x03	; 3
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	b9 01       	movw	r22, r18
    4898:	43 e0       	ldi	r20, 0x03	; 3
    489a:	2b e0       	ldi	r18, 0x0B	; 11
    489c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    48a0:	fe 01       	movw	r30, r28
    48a2:	ef 53       	subi	r30, 0x3F	; 63
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	a8 ec       	ldi	r26, 0xC8	; 200
    48ac:	b2 e4       	ldi	r27, 0x42	; 66
    48ae:	80 83       	st	Z, r24
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	a2 83       	std	Z+2, r26	; 0x02
    48b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b6:	8e 01       	movw	r16, r28
    48b8:	03 54       	subi	r16, 0x43	; 67
    48ba:	1f 4f       	sbci	r17, 0xFF	; 255
    48bc:	fe 01       	movw	r30, r28
    48be:	ef 53       	subi	r30, 0x3F	; 63
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	60 81       	ld	r22, Z
    48c4:	71 81       	ldd	r23, Z+1	; 0x01
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	4a e7       	ldi	r20, 0x7A	; 122
    48d0:	55 e4       	ldi	r21, 0x45	; 69
    48d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	f8 01       	movw	r30, r16
    48dc:	80 83       	st	Z, r24
    48de:	91 83       	std	Z+1, r25	; 0x01
    48e0:	a2 83       	std	Z+2, r26	; 0x02
    48e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48e4:	fe 01       	movw	r30, r28
    48e6:	e3 54       	subi	r30, 0x43	; 67
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	60 81       	ld	r22, Z
    48ec:	71 81       	ldd	r23, Z+1	; 0x01
    48ee:	82 81       	ldd	r24, Z+2	; 0x02
    48f0:	93 81       	ldd	r25, Z+3	; 0x03
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e8       	ldi	r20, 0x80	; 128
    48f8:	5f e3       	ldi	r21, 0x3F	; 63
    48fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48fe:	88 23       	and	r24, r24
    4900:	44 f4       	brge	.+16     	; 0x4912 <main+0x25be>
		__ticks = 1;
    4902:	fe 01       	movw	r30, r28
    4904:	e5 54       	subi	r30, 0x45	; 69
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
    4910:	64 c0       	rjmp	.+200    	; 0x49da <main+0x2686>
	else if (__tmp > 65535)
    4912:	fe 01       	movw	r30, r28
    4914:	e3 54       	subi	r30, 0x43	; 67
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	60 81       	ld	r22, Z
    491a:	71 81       	ldd	r23, Z+1	; 0x01
    491c:	82 81       	ldd	r24, Z+2	; 0x02
    491e:	93 81       	ldd	r25, Z+3	; 0x03
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	3f ef       	ldi	r19, 0xFF	; 255
    4924:	4f e7       	ldi	r20, 0x7F	; 127
    4926:	57 e4       	ldi	r21, 0x47	; 71
    4928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    492c:	18 16       	cp	r1, r24
    492e:	0c f0       	brlt	.+2      	; 0x4932 <main+0x25de>
    4930:	43 c0       	rjmp	.+134    	; 0x49b8 <main+0x2664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4932:	fe 01       	movw	r30, r28
    4934:	ef 53       	subi	r30, 0x3F	; 63
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	60 81       	ld	r22, Z
    493a:	71 81       	ldd	r23, Z+1	; 0x01
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	93 81       	ldd	r25, Z+3	; 0x03
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e2       	ldi	r20, 0x20	; 32
    4946:	51 e4       	ldi	r21, 0x41	; 65
    4948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494c:	dc 01       	movw	r26, r24
    494e:	cb 01       	movw	r24, r22
    4950:	8e 01       	movw	r16, r28
    4952:	05 54       	subi	r16, 0x45	; 69
    4954:	1f 4f       	sbci	r17, 0xFF	; 255
    4956:	bc 01       	movw	r22, r24
    4958:	cd 01       	movw	r24, r26
    495a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	f8 01       	movw	r30, r16
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24
    4968:	1f c0       	rjmp	.+62     	; 0x49a8 <main+0x2654>
    496a:	fe 01       	movw	r30, r28
    496c:	e7 54       	subi	r30, 0x47	; 71
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	80 e9       	ldi	r24, 0x90	; 144
    4972:	91 e0       	ldi	r25, 0x01	; 1
    4974:	91 83       	std	Z+1, r25	; 0x01
    4976:	80 83       	st	Z, r24
    4978:	fe 01       	movw	r30, r28
    497a:	e7 54       	subi	r30, 0x47	; 71
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <main+0x262e>
    4986:	fe 01       	movw	r30, r28
    4988:	e7 54       	subi	r30, 0x47	; 71
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4990:	de 01       	movw	r26, r28
    4992:	a5 54       	subi	r26, 0x45	; 69
    4994:	bf 4f       	sbci	r27, 0xFF	; 255
    4996:	fe 01       	movw	r30, r28
    4998:	e5 54       	subi	r30, 0x45	; 69
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	11 96       	adiw	r26, 0x01	; 1
    49a4:	9c 93       	st	X, r25
    49a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a8:	fe 01       	movw	r30, r28
    49aa:	e5 54       	subi	r30, 0x45	; 69
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	d1 f6       	brne	.-76     	; 0x496a <main+0x2616>
    49b6:	27 c0       	rjmp	.+78     	; 0x4a06 <main+0x26b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b8:	8e 01       	movw	r16, r28
    49ba:	05 54       	subi	r16, 0x45	; 69
    49bc:	1f 4f       	sbci	r17, 0xFF	; 255
    49be:	fe 01       	movw	r30, r28
    49c0:	e3 54       	subi	r30, 0x43	; 67
    49c2:	ff 4f       	sbci	r31, 0xFF	; 255
    49c4:	60 81       	ld	r22, Z
    49c6:	71 81       	ldd	r23, Z+1	; 0x01
    49c8:	82 81       	ldd	r24, Z+2	; 0x02
    49ca:	93 81       	ldd	r25, Z+3	; 0x03
    49cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	f8 01       	movw	r30, r16
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
    49da:	de 01       	movw	r26, r28
    49dc:	a9 54       	subi	r26, 0x49	; 73
    49de:	bf 4f       	sbci	r27, 0xFF	; 255
    49e0:	fe 01       	movw	r30, r28
    49e2:	e5 54       	subi	r30, 0x45	; 69
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	80 81       	ld	r24, Z
    49e8:	91 81       	ldd	r25, Z+1	; 0x01
    49ea:	8d 93       	st	X+, r24
    49ec:	9c 93       	st	X, r25
    49ee:	fe 01       	movw	r30, r28
    49f0:	e9 54       	subi	r30, 0x49	; 73
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 81       	ld	r24, Z
    49f6:	91 81       	ldd	r25, Z+1	; 0x01
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	f1 f7       	brne	.-4      	; 0x49f8 <main+0x26a4>
    49fc:	fe 01       	movw	r30, r28
    49fe:	e9 54       	subi	r30, 0x49	; 73
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	91 83       	std	Z+1, r25	; 0x01
    4a04:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance5, 3, 8);
    4a06:	2c e1       	ldi	r18, 0x1C	; 28
    4a08:	33 e0       	ldi	r19, 0x03	; 3
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	b9 01       	movw	r22, r18
    4a0e:	43 e0       	ldi	r20, 0x03	; 3
    4a10:	28 e0       	ldi	r18, 0x08	; 8
    4a12:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance5, 3, 9);
    4a16:	2c e1       	ldi	r18, 0x1C	; 28
    4a18:	33 e0       	ldi	r19, 0x03	; 3
    4a1a:	80 e0       	ldi	r24, 0x00	; 0
    4a1c:	b9 01       	movw	r22, r18
    4a1e:	43 e0       	ldi	r20, 0x03	; 3
    4a20:	29 e0       	ldi	r18, 0x09	; 9
    4a22:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance5, 3, 10);
    4a26:	2c e1       	ldi	r18, 0x1C	; 28
    4a28:	33 e0       	ldi	r19, 0x03	; 3
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	b9 01       	movw	r22, r18
    4a2e:	43 e0       	ldi	r20, 0x03	; 3
    4a30:	2a e0       	ldi	r18, 0x0A	; 10
    4a32:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance5, 3, 11);
    4a36:	2c e1       	ldi	r18, 0x1C	; 28
    4a38:	33 e0       	ldi	r19, 0x03	; 3
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	b9 01       	movw	r22, r18
    4a3e:	43 e0       	ldi	r20, 0x03	; 3
    4a40:	2b e0       	ldi	r18, 0x0B	; 11
    4a42:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4a46:	fe 01       	movw	r30, r28
    4a48:	ed 54       	subi	r30, 0x4D	; 77
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	a8 ec       	ldi	r26, 0xC8	; 200
    4a52:	b2 e4       	ldi	r27, 0x42	; 66
    4a54:	80 83       	st	Z, r24
    4a56:	91 83       	std	Z+1, r25	; 0x01
    4a58:	a2 83       	std	Z+2, r26	; 0x02
    4a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a5c:	8e 01       	movw	r16, r28
    4a5e:	01 55       	subi	r16, 0x51	; 81
    4a60:	1f 4f       	sbci	r17, 0xFF	; 255
    4a62:	fe 01       	movw	r30, r28
    4a64:	ed 54       	subi	r30, 0x4D	; 77
    4a66:	ff 4f       	sbci	r31, 0xFF	; 255
    4a68:	60 81       	ld	r22, Z
    4a6a:	71 81       	ldd	r23, Z+1	; 0x01
    4a6c:	82 81       	ldd	r24, Z+2	; 0x02
    4a6e:	93 81       	ldd	r25, Z+3	; 0x03
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	4a e7       	ldi	r20, 0x7A	; 122
    4a76:	55 e4       	ldi	r21, 0x45	; 69
    4a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	f8 01       	movw	r30, r16
    4a82:	80 83       	st	Z, r24
    4a84:	91 83       	std	Z+1, r25	; 0x01
    4a86:	a2 83       	std	Z+2, r26	; 0x02
    4a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	e1 55       	subi	r30, 0x51	; 81
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	60 81       	ld	r22, Z
    4a92:	71 81       	ldd	r23, Z+1	; 0x01
    4a94:	82 81       	ldd	r24, Z+2	; 0x02
    4a96:	93 81       	ldd	r25, Z+3	; 0x03
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aa4:	88 23       	and	r24, r24
    4aa6:	44 f4       	brge	.+16     	; 0x4ab8 <main+0x2764>
		__ticks = 1;
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	e3 55       	subi	r30, 0x53	; 83
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
    4ab6:	64 c0       	rjmp	.+200    	; 0x4b80 <main+0x282c>
	else if (__tmp > 65535)
    4ab8:	fe 01       	movw	r30, r28
    4aba:	e1 55       	subi	r30, 0x51	; 81
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	60 81       	ld	r22, Z
    4ac0:	71 81       	ldd	r23, Z+1	; 0x01
    4ac2:	82 81       	ldd	r24, Z+2	; 0x02
    4ac4:	93 81       	ldd	r25, Z+3	; 0x03
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	3f ef       	ldi	r19, 0xFF	; 255
    4aca:	4f e7       	ldi	r20, 0x7F	; 127
    4acc:	57 e4       	ldi	r21, 0x47	; 71
    4ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ad2:	18 16       	cp	r1, r24
    4ad4:	0c f0       	brlt	.+2      	; 0x4ad8 <main+0x2784>
    4ad6:	43 c0       	rjmp	.+134    	; 0x4b5e <main+0x280a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad8:	fe 01       	movw	r30, r28
    4ada:	ed 54       	subi	r30, 0x4D	; 77
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	82 81       	ldd	r24, Z+2	; 0x02
    4ae4:	93 81       	ldd	r25, Z+3	; 0x03
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	40 e2       	ldi	r20, 0x20	; 32
    4aec:	51 e4       	ldi	r21, 0x41	; 65
    4aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	8e 01       	movw	r16, r28
    4af8:	03 55       	subi	r16, 0x53	; 83
    4afa:	1f 4f       	sbci	r17, 0xFF	; 255
    4afc:	bc 01       	movw	r22, r24
    4afe:	cd 01       	movw	r24, r26
    4b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b04:	dc 01       	movw	r26, r24
    4b06:	cb 01       	movw	r24, r22
    4b08:	f8 01       	movw	r30, r16
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	80 83       	st	Z, r24
    4b0e:	1f c0       	rjmp	.+62     	; 0x4b4e <main+0x27fa>
    4b10:	fe 01       	movw	r30, r28
    4b12:	e5 55       	subi	r30, 0x55	; 85
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	80 e9       	ldi	r24, 0x90	; 144
    4b18:	91 e0       	ldi	r25, 0x01	; 1
    4b1a:	91 83       	std	Z+1, r25	; 0x01
    4b1c:	80 83       	st	Z, r24
    4b1e:	fe 01       	movw	r30, r28
    4b20:	e5 55       	subi	r30, 0x55	; 85
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	80 81       	ld	r24, Z
    4b26:	91 81       	ldd	r25, Z+1	; 0x01
    4b28:	01 97       	sbiw	r24, 0x01	; 1
    4b2a:	f1 f7       	brne	.-4      	; 0x4b28 <main+0x27d4>
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e5 55       	subi	r30, 0x55	; 85
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	91 83       	std	Z+1, r25	; 0x01
    4b34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b36:	de 01       	movw	r26, r28
    4b38:	a3 55       	subi	r26, 0x53	; 83
    4b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e3 55       	subi	r30, 0x53	; 83
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	80 81       	ld	r24, Z
    4b44:	91 81       	ldd	r25, Z+1	; 0x01
    4b46:	01 97       	sbiw	r24, 0x01	; 1
    4b48:	11 96       	adiw	r26, 0x01	; 1
    4b4a:	9c 93       	st	X, r25
    4b4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b4e:	fe 01       	movw	r30, r28
    4b50:	e3 55       	subi	r30, 0x53	; 83
    4b52:	ff 4f       	sbci	r31, 0xFF	; 255
    4b54:	80 81       	ld	r24, Z
    4b56:	91 81       	ldd	r25, Z+1	; 0x01
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	d1 f6       	brne	.-76     	; 0x4b10 <main+0x27bc>
    4b5c:	27 c0       	rjmp	.+78     	; 0x4bac <main+0x2858>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5e:	8e 01       	movw	r16, r28
    4b60:	03 55       	subi	r16, 0x53	; 83
    4b62:	1f 4f       	sbci	r17, 0xFF	; 255
    4b64:	fe 01       	movw	r30, r28
    4b66:	e1 55       	subi	r30, 0x51	; 81
    4b68:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6a:	60 81       	ld	r22, Z
    4b6c:	71 81       	ldd	r23, Z+1	; 0x01
    4b6e:	82 81       	ldd	r24, Z+2	; 0x02
    4b70:	93 81       	ldd	r25, Z+3	; 0x03
    4b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	f8 01       	movw	r30, r16
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	80 83       	st	Z, r24
    4b80:	de 01       	movw	r26, r28
    4b82:	a7 55       	subi	r26, 0x57	; 87
    4b84:	bf 4f       	sbci	r27, 0xFF	; 255
    4b86:	fe 01       	movw	r30, r28
    4b88:	e3 55       	subi	r30, 0x53	; 83
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	80 81       	ld	r24, Z
    4b8e:	91 81       	ldd	r25, Z+1	; 0x01
    4b90:	8d 93       	st	X+, r24
    4b92:	9c 93       	st	X, r25
    4b94:	fe 01       	movw	r30, r28
    4b96:	e7 55       	subi	r30, 0x57	; 87
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	80 81       	ld	r24, Z
    4b9c:	91 81       	ldd	r25, Z+1	; 0x01
    4b9e:	01 97       	sbiw	r24, 0x01	; 1
    4ba0:	f1 f7       	brne	.-4      	; 0x4b9e <main+0x284a>
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e7 55       	subi	r30, 0x57	; 87
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance6, 3, 8);
    4bac:	24 e2       	ldi	r18, 0x24	; 36
    4bae:	33 e0       	ldi	r19, 0x03	; 3
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	b9 01       	movw	r22, r18
    4bb4:	43 e0       	ldi	r20, 0x03	; 3
    4bb6:	28 e0       	ldi	r18, 0x08	; 8
    4bb8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance6, 3, 9);
    4bbc:	24 e2       	ldi	r18, 0x24	; 36
    4bbe:	33 e0       	ldi	r19, 0x03	; 3
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	b9 01       	movw	r22, r18
    4bc4:	43 e0       	ldi	r20, 0x03	; 3
    4bc6:	29 e0       	ldi	r18, 0x09	; 9
    4bc8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance6, 3, 10);
    4bcc:	24 e2       	ldi	r18, 0x24	; 36
    4bce:	33 e0       	ldi	r19, 0x03	; 3
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	b9 01       	movw	r22, r18
    4bd4:	43 e0       	ldi	r20, 0x03	; 3
    4bd6:	2a e0       	ldi	r18, 0x0A	; 10
    4bd8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance6, 3, 11);
    4bdc:	24 e2       	ldi	r18, 0x24	; 36
    4bde:	33 e0       	ldi	r19, 0x03	; 3
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	b9 01       	movw	r22, r18
    4be4:	43 e0       	ldi	r20, 0x03	; 3
    4be6:	2b e0       	ldi	r18, 0x0B	; 11
    4be8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4bec:	fe 01       	movw	r30, r28
    4bee:	eb 55       	subi	r30, 0x5B	; 91
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 e0       	ldi	r24, 0x00	; 0
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	a8 ec       	ldi	r26, 0xC8	; 200
    4bf8:	b2 e4       	ldi	r27, 0x42	; 66
    4bfa:	80 83       	st	Z, r24
    4bfc:	91 83       	std	Z+1, r25	; 0x01
    4bfe:	a2 83       	std	Z+2, r26	; 0x02
    4c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c02:	8e 01       	movw	r16, r28
    4c04:	0f 55       	subi	r16, 0x5F	; 95
    4c06:	1f 4f       	sbci	r17, 0xFF	; 255
    4c08:	fe 01       	movw	r30, r28
    4c0a:	eb 55       	subi	r30, 0x5B	; 91
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	60 81       	ld	r22, Z
    4c10:	71 81       	ldd	r23, Z+1	; 0x01
    4c12:	82 81       	ldd	r24, Z+2	; 0x02
    4c14:	93 81       	ldd	r25, Z+3	; 0x03
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	4a e7       	ldi	r20, 0x7A	; 122
    4c1c:	55 e4       	ldi	r21, 0x45	; 69
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	f8 01       	movw	r30, r16
    4c28:	80 83       	st	Z, r24
    4c2a:	91 83       	std	Z+1, r25	; 0x01
    4c2c:	a2 83       	std	Z+2, r26	; 0x02
    4c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c30:	fe 01       	movw	r30, r28
    4c32:	ef 55       	subi	r30, 0x5F	; 95
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	60 81       	ld	r22, Z
    4c38:	71 81       	ldd	r23, Z+1	; 0x01
    4c3a:	82 81       	ldd	r24, Z+2	; 0x02
    4c3c:	93 81       	ldd	r25, Z+3	; 0x03
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	40 e8       	ldi	r20, 0x80	; 128
    4c44:	5f e3       	ldi	r21, 0x3F	; 63
    4c46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c4a:	88 23       	and	r24, r24
    4c4c:	44 f4       	brge	.+16     	; 0x4c5e <main+0x290a>
		__ticks = 1;
    4c4e:	fe 01       	movw	r30, r28
    4c50:	e1 56       	subi	r30, 0x61	; 97
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	91 83       	std	Z+1, r25	; 0x01
    4c5a:	80 83       	st	Z, r24
    4c5c:	64 c0       	rjmp	.+200    	; 0x4d26 <main+0x29d2>
	else if (__tmp > 65535)
    4c5e:	fe 01       	movw	r30, r28
    4c60:	ef 55       	subi	r30, 0x5F	; 95
    4c62:	ff 4f       	sbci	r31, 0xFF	; 255
    4c64:	60 81       	ld	r22, Z
    4c66:	71 81       	ldd	r23, Z+1	; 0x01
    4c68:	82 81       	ldd	r24, Z+2	; 0x02
    4c6a:	93 81       	ldd	r25, Z+3	; 0x03
    4c6c:	20 e0       	ldi	r18, 0x00	; 0
    4c6e:	3f ef       	ldi	r19, 0xFF	; 255
    4c70:	4f e7       	ldi	r20, 0x7F	; 127
    4c72:	57 e4       	ldi	r21, 0x47	; 71
    4c74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c78:	18 16       	cp	r1, r24
    4c7a:	0c f0       	brlt	.+2      	; 0x4c7e <main+0x292a>
    4c7c:	43 c0       	rjmp	.+134    	; 0x4d04 <main+0x29b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c7e:	fe 01       	movw	r30, r28
    4c80:	eb 55       	subi	r30, 0x5B	; 91
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	60 81       	ld	r22, Z
    4c86:	71 81       	ldd	r23, Z+1	; 0x01
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	30 e0       	ldi	r19, 0x00	; 0
    4c90:	40 e2       	ldi	r20, 0x20	; 32
    4c92:	51 e4       	ldi	r21, 0x41	; 65
    4c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c98:	dc 01       	movw	r26, r24
    4c9a:	cb 01       	movw	r24, r22
    4c9c:	8e 01       	movw	r16, r28
    4c9e:	01 56       	subi	r16, 0x61	; 97
    4ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca2:	bc 01       	movw	r22, r24
    4ca4:	cd 01       	movw	r24, r26
    4ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	f8 01       	movw	r30, r16
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	1f c0       	rjmp	.+62     	; 0x4cf4 <main+0x29a0>
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e3 56       	subi	r30, 0x63	; 99
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	80 e9       	ldi	r24, 0x90	; 144
    4cbe:	91 e0       	ldi	r25, 0x01	; 1
    4cc0:	91 83       	std	Z+1, r25	; 0x01
    4cc2:	80 83       	st	Z, r24
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e3 56       	subi	r30, 0x63	; 99
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	80 81       	ld	r24, Z
    4ccc:	91 81       	ldd	r25, Z+1	; 0x01
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	f1 f7       	brne	.-4      	; 0x4cce <main+0x297a>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e3 56       	subi	r30, 0x63	; 99
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	91 83       	std	Z+1, r25	; 0x01
    4cda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cdc:	de 01       	movw	r26, r28
    4cde:	a1 56       	subi	r26, 0x61	; 97
    4ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e1 56       	subi	r30, 0x61	; 97
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	80 81       	ld	r24, Z
    4cea:	91 81       	ldd	r25, Z+1	; 0x01
    4cec:	01 97       	sbiw	r24, 0x01	; 1
    4cee:	11 96       	adiw	r26, 0x01	; 1
    4cf0:	9c 93       	st	X, r25
    4cf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf4:	fe 01       	movw	r30, r28
    4cf6:	e1 56       	subi	r30, 0x61	; 97
    4cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfa:	80 81       	ld	r24, Z
    4cfc:	91 81       	ldd	r25, Z+1	; 0x01
    4cfe:	00 97       	sbiw	r24, 0x00	; 0
    4d00:	d1 f6       	brne	.-76     	; 0x4cb6 <main+0x2962>
    4d02:	27 c0       	rjmp	.+78     	; 0x4d52 <main+0x29fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d04:	8e 01       	movw	r16, r28
    4d06:	01 56       	subi	r16, 0x61	; 97
    4d08:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	ef 55       	subi	r30, 0x5F	; 95
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	60 81       	ld	r22, Z
    4d12:	71 81       	ldd	r23, Z+1	; 0x01
    4d14:	82 81       	ldd	r24, Z+2	; 0x02
    4d16:	93 81       	ldd	r25, Z+3	; 0x03
    4d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	f8 01       	movw	r30, r16
    4d22:	91 83       	std	Z+1, r25	; 0x01
    4d24:	80 83       	st	Z, r24
    4d26:	de 01       	movw	r26, r28
    4d28:	a5 56       	subi	r26, 0x65	; 101
    4d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	e1 56       	subi	r30, 0x61	; 97
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	8d 93       	st	X+, r24
    4d38:	9c 93       	st	X, r25
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e5 56       	subi	r30, 0x65	; 101
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	f1 f7       	brne	.-4      	; 0x4d44 <main+0x29f0>
    4d48:	fe 01       	movw	r30, r28
    4d4a:	e5 56       	subi	r30, 0x65	; 101
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	91 83       	std	Z+1, r25	; 0x01
    4d50:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance7, 3, 8);
    4d52:	2c e2       	ldi	r18, 0x2C	; 44
    4d54:	33 e0       	ldi	r19, 0x03	; 3
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	b9 01       	movw	r22, r18
    4d5a:	43 e0       	ldi	r20, 0x03	; 3
    4d5c:	28 e0       	ldi	r18, 0x08	; 8
    4d5e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance7, 3, 9);
    4d62:	2c e2       	ldi	r18, 0x2C	; 44
    4d64:	33 e0       	ldi	r19, 0x03	; 3
    4d66:	80 e0       	ldi	r24, 0x00	; 0
    4d68:	b9 01       	movw	r22, r18
    4d6a:	43 e0       	ldi	r20, 0x03	; 3
    4d6c:	29 e0       	ldi	r18, 0x09	; 9
    4d6e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance7, 3, 10);
    4d72:	2c e2       	ldi	r18, 0x2C	; 44
    4d74:	33 e0       	ldi	r19, 0x03	; 3
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	b9 01       	movw	r22, r18
    4d7a:	43 e0       	ldi	r20, 0x03	; 3
    4d7c:	2a e0       	ldi	r18, 0x0A	; 10
    4d7e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance7, 3, 11);
    4d82:	2c e2       	ldi	r18, 0x2C	; 44
    4d84:	33 e0       	ldi	r19, 0x03	; 3
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	b9 01       	movw	r22, r18
    4d8a:	43 e0       	ldi	r20, 0x03	; 3
    4d8c:	2b e0       	ldi	r18, 0x0B	; 11
    4d8e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4d92:	fe 01       	movw	r30, r28
    4d94:	e9 56       	subi	r30, 0x69	; 105
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	a8 ec       	ldi	r26, 0xC8	; 200
    4d9e:	b2 e4       	ldi	r27, 0x42	; 66
    4da0:	80 83       	st	Z, r24
    4da2:	91 83       	std	Z+1, r25	; 0x01
    4da4:	a2 83       	std	Z+2, r26	; 0x02
    4da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da8:	8e 01       	movw	r16, r28
    4daa:	0d 56       	subi	r16, 0x6D	; 109
    4dac:	1f 4f       	sbci	r17, 0xFF	; 255
    4dae:	fe 01       	movw	r30, r28
    4db0:	e9 56       	subi	r30, 0x69	; 105
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	60 81       	ld	r22, Z
    4db6:	71 81       	ldd	r23, Z+1	; 0x01
    4db8:	82 81       	ldd	r24, Z+2	; 0x02
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	4a e7       	ldi	r20, 0x7A	; 122
    4dc2:	55 e4       	ldi	r21, 0x45	; 69
    4dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	f8 01       	movw	r30, r16
    4dce:	80 83       	st	Z, r24
    4dd0:	91 83       	std	Z+1, r25	; 0x01
    4dd2:	a2 83       	std	Z+2, r26	; 0x02
    4dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dd6:	fe 01       	movw	r30, r28
    4dd8:	ed 56       	subi	r30, 0x6D	; 109
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	60 81       	ld	r22, Z
    4dde:	71 81       	ldd	r23, Z+1	; 0x01
    4de0:	82 81       	ldd	r24, Z+2	; 0x02
    4de2:	93 81       	ldd	r25, Z+3	; 0x03
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	40 e8       	ldi	r20, 0x80	; 128
    4dea:	5f e3       	ldi	r21, 0x3F	; 63
    4dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df0:	88 23       	and	r24, r24
    4df2:	44 f4       	brge	.+16     	; 0x4e04 <main+0x2ab0>
		__ticks = 1;
    4df4:	fe 01       	movw	r30, r28
    4df6:	ef 56       	subi	r30, 0x6F	; 111
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	91 83       	std	Z+1, r25	; 0x01
    4e00:	80 83       	st	Z, r24
    4e02:	64 c0       	rjmp	.+200    	; 0x4ecc <main+0x2b78>
	else if (__tmp > 65535)
    4e04:	fe 01       	movw	r30, r28
    4e06:	ed 56       	subi	r30, 0x6D	; 109
    4e08:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0a:	60 81       	ld	r22, Z
    4e0c:	71 81       	ldd	r23, Z+1	; 0x01
    4e0e:	82 81       	ldd	r24, Z+2	; 0x02
    4e10:	93 81       	ldd	r25, Z+3	; 0x03
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	3f ef       	ldi	r19, 0xFF	; 255
    4e16:	4f e7       	ldi	r20, 0x7F	; 127
    4e18:	57 e4       	ldi	r21, 0x47	; 71
    4e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e1e:	18 16       	cp	r1, r24
    4e20:	0c f0       	brlt	.+2      	; 0x4e24 <main+0x2ad0>
    4e22:	43 c0       	rjmp	.+134    	; 0x4eaa <main+0x2b56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e24:	fe 01       	movw	r30, r28
    4e26:	e9 56       	subi	r30, 0x69	; 105
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	60 81       	ld	r22, Z
    4e2c:	71 81       	ldd	r23, Z+1	; 0x01
    4e2e:	82 81       	ldd	r24, Z+2	; 0x02
    4e30:	93 81       	ldd	r25, Z+3	; 0x03
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	40 e2       	ldi	r20, 0x20	; 32
    4e38:	51 e4       	ldi	r21, 0x41	; 65
    4e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e3e:	dc 01       	movw	r26, r24
    4e40:	cb 01       	movw	r24, r22
    4e42:	8e 01       	movw	r16, r28
    4e44:	0f 56       	subi	r16, 0x6F	; 111
    4e46:	1f 4f       	sbci	r17, 0xFF	; 255
    4e48:	bc 01       	movw	r22, r24
    4e4a:	cd 01       	movw	r24, r26
    4e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	f8 01       	movw	r30, r16
    4e56:	91 83       	std	Z+1, r25	; 0x01
    4e58:	80 83       	st	Z, r24
    4e5a:	1f c0       	rjmp	.+62     	; 0x4e9a <main+0x2b46>
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	e1 57       	subi	r30, 0x71	; 113
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	80 e9       	ldi	r24, 0x90	; 144
    4e64:	91 e0       	ldi	r25, 0x01	; 1
    4e66:	91 83       	std	Z+1, r25	; 0x01
    4e68:	80 83       	st	Z, r24
    4e6a:	fe 01       	movw	r30, r28
    4e6c:	e1 57       	subi	r30, 0x71	; 113
    4e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e70:	80 81       	ld	r24, Z
    4e72:	91 81       	ldd	r25, Z+1	; 0x01
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	f1 f7       	brne	.-4      	; 0x4e74 <main+0x2b20>
    4e78:	fe 01       	movw	r30, r28
    4e7a:	e1 57       	subi	r30, 0x71	; 113
    4e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7e:	91 83       	std	Z+1, r25	; 0x01
    4e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e82:	de 01       	movw	r26, r28
    4e84:	af 56       	subi	r26, 0x6F	; 111
    4e86:	bf 4f       	sbci	r27, 0xFF	; 255
    4e88:	fe 01       	movw	r30, r28
    4e8a:	ef 56       	subi	r30, 0x6F	; 111
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	80 81       	ld	r24, Z
    4e90:	91 81       	ldd	r25, Z+1	; 0x01
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	11 96       	adiw	r26, 0x01	; 1
    4e96:	9c 93       	st	X, r25
    4e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	ef 56       	subi	r30, 0x6F	; 111
    4e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea0:	80 81       	ld	r24, Z
    4ea2:	91 81       	ldd	r25, Z+1	; 0x01
    4ea4:	00 97       	sbiw	r24, 0x00	; 0
    4ea6:	d1 f6       	brne	.-76     	; 0x4e5c <main+0x2b08>
    4ea8:	27 c0       	rjmp	.+78     	; 0x4ef8 <main+0x2ba4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eaa:	8e 01       	movw	r16, r28
    4eac:	0f 56       	subi	r16, 0x6F	; 111
    4eae:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb0:	fe 01       	movw	r30, r28
    4eb2:	ed 56       	subi	r30, 0x6D	; 109
    4eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb6:	60 81       	ld	r22, Z
    4eb8:	71 81       	ldd	r23, Z+1	; 0x01
    4eba:	82 81       	ldd	r24, Z+2	; 0x02
    4ebc:	93 81       	ldd	r25, Z+3	; 0x03
    4ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	f8 01       	movw	r30, r16
    4ec8:	91 83       	std	Z+1, r25	; 0x01
    4eca:	80 83       	st	Z, r24
    4ecc:	de 01       	movw	r26, r28
    4ece:	a3 57       	subi	r26, 0x73	; 115
    4ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ed2:	fe 01       	movw	r30, r28
    4ed4:	ef 56       	subi	r30, 0x6F	; 111
    4ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed8:	80 81       	ld	r24, Z
    4eda:	91 81       	ldd	r25, Z+1	; 0x01
    4edc:	8d 93       	st	X+, r24
    4ede:	9c 93       	st	X, r25
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e3 57       	subi	r30, 0x73	; 115
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	f1 f7       	brne	.-4      	; 0x4eea <main+0x2b96>
    4eee:	fe 01       	movw	r30, r28
    4ef0:	e3 57       	subi	r30, 0x73	; 115
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	91 83       	std	Z+1, r25	; 0x01
    4ef6:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(0, Dance8, 3, 8);
    4ef8:	24 e3       	ldi	r18, 0x34	; 52
    4efa:	33 e0       	ldi	r19, 0x03	; 3
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	b9 01       	movw	r22, r18
    4f00:	43 e0       	ldi	r20, 0x03	; 3
    4f02:	28 e0       	ldi	r18, 0x08	; 8
    4f04:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance8, 3, 9);
    4f08:	24 e3       	ldi	r18, 0x34	; 52
    4f0a:	33 e0       	ldi	r19, 0x03	; 3
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	b9 01       	movw	r22, r18
    4f10:	43 e0       	ldi	r20, 0x03	; 3
    4f12:	29 e0       	ldi	r18, 0x09	; 9
    4f14:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance8, 3, 10);
    4f18:	24 e3       	ldi	r18, 0x34	; 52
    4f1a:	33 e0       	ldi	r19, 0x03	; 3
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	b9 01       	movw	r22, r18
    4f20:	43 e0       	ldi	r20, 0x03	; 3
    4f22:	2a e0       	ldi	r18, 0x0A	; 10
    4f24:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(0, Dance8, 3, 11);
    4f28:	24 e3       	ldi	r18, 0x34	; 52
    4f2a:	33 e0       	ldi	r19, 0x03	; 3
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	b9 01       	movw	r22, r18
    4f30:	43 e0       	ldi	r20, 0x03	; 3
    4f32:	2b e0       	ldi	r18, 0x0B	; 11
    4f34:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    4f38:	fe 01       	movw	r30, r28
    4f3a:	e7 57       	subi	r30, 0x77	; 119
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	80 e0       	ldi	r24, 0x00	; 0
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	a8 ec       	ldi	r26, 0xC8	; 200
    4f44:	b2 e4       	ldi	r27, 0x42	; 66
    4f46:	80 83       	st	Z, r24
    4f48:	91 83       	std	Z+1, r25	; 0x01
    4f4a:	a2 83       	std	Z+2, r26	; 0x02
    4f4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f4e:	8e 01       	movw	r16, r28
    4f50:	0b 57       	subi	r16, 0x7B	; 123
    4f52:	1f 4f       	sbci	r17, 0xFF	; 255
    4f54:	fe 01       	movw	r30, r28
    4f56:	e7 57       	subi	r30, 0x77	; 119
    4f58:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5a:	60 81       	ld	r22, Z
    4f5c:	71 81       	ldd	r23, Z+1	; 0x01
    4f5e:	82 81       	ldd	r24, Z+2	; 0x02
    4f60:	93 81       	ldd	r25, Z+3	; 0x03
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	30 e0       	ldi	r19, 0x00	; 0
    4f66:	4a e7       	ldi	r20, 0x7A	; 122
    4f68:	55 e4       	ldi	r21, 0x45	; 69
    4f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6e:	dc 01       	movw	r26, r24
    4f70:	cb 01       	movw	r24, r22
    4f72:	f8 01       	movw	r30, r16
    4f74:	80 83       	st	Z, r24
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	a2 83       	std	Z+2, r26	; 0x02
    4f7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f7c:	fe 01       	movw	r30, r28
    4f7e:	eb 57       	subi	r30, 0x7B	; 123
    4f80:	ff 4f       	sbci	r31, 0xFF	; 255
    4f82:	60 81       	ld	r22, Z
    4f84:	71 81       	ldd	r23, Z+1	; 0x01
    4f86:	82 81       	ldd	r24, Z+2	; 0x02
    4f88:	93 81       	ldd	r25, Z+3	; 0x03
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	40 e8       	ldi	r20, 0x80	; 128
    4f90:	5f e3       	ldi	r21, 0x3F	; 63
    4f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f96:	88 23       	and	r24, r24
    4f98:	44 f4       	brge	.+16     	; 0x4faa <main+0x2c56>
		__ticks = 1;
    4f9a:	fe 01       	movw	r30, r28
    4f9c:	ed 57       	subi	r30, 0x7D	; 125
    4f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	91 83       	std	Z+1, r25	; 0x01
    4fa6:	80 83       	st	Z, r24
    4fa8:	64 c0       	rjmp	.+200    	; 0x5072 <main+0x2d1e>
	else if (__tmp > 65535)
    4faa:	fe 01       	movw	r30, r28
    4fac:	eb 57       	subi	r30, 0x7B	; 123
    4fae:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb0:	60 81       	ld	r22, Z
    4fb2:	71 81       	ldd	r23, Z+1	; 0x01
    4fb4:	82 81       	ldd	r24, Z+2	; 0x02
    4fb6:	93 81       	ldd	r25, Z+3	; 0x03
    4fb8:	20 e0       	ldi	r18, 0x00	; 0
    4fba:	3f ef       	ldi	r19, 0xFF	; 255
    4fbc:	4f e7       	ldi	r20, 0x7F	; 127
    4fbe:	57 e4       	ldi	r21, 0x47	; 71
    4fc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fc4:	18 16       	cp	r1, r24
    4fc6:	0c f0       	brlt	.+2      	; 0x4fca <main+0x2c76>
    4fc8:	43 c0       	rjmp	.+134    	; 0x5050 <main+0x2cfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fca:	fe 01       	movw	r30, r28
    4fcc:	e7 57       	subi	r30, 0x77	; 119
    4fce:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd0:	60 81       	ld	r22, Z
    4fd2:	71 81       	ldd	r23, Z+1	; 0x01
    4fd4:	82 81       	ldd	r24, Z+2	; 0x02
    4fd6:	93 81       	ldd	r25, Z+3	; 0x03
    4fd8:	20 e0       	ldi	r18, 0x00	; 0
    4fda:	30 e0       	ldi	r19, 0x00	; 0
    4fdc:	40 e2       	ldi	r20, 0x20	; 32
    4fde:	51 e4       	ldi	r21, 0x41	; 65
    4fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe4:	dc 01       	movw	r26, r24
    4fe6:	cb 01       	movw	r24, r22
    4fe8:	8e 01       	movw	r16, r28
    4fea:	0d 57       	subi	r16, 0x7D	; 125
    4fec:	1f 4f       	sbci	r17, 0xFF	; 255
    4fee:	bc 01       	movw	r22, r24
    4ff0:	cd 01       	movw	r24, r26
    4ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	f8 01       	movw	r30, r16
    4ffc:	91 83       	std	Z+1, r25	; 0x01
    4ffe:	80 83       	st	Z, r24
    5000:	1f c0       	rjmp	.+62     	; 0x5040 <main+0x2cec>
    5002:	fe 01       	movw	r30, r28
    5004:	ef 57       	subi	r30, 0x7F	; 127
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 e9       	ldi	r24, 0x90	; 144
    500a:	91 e0       	ldi	r25, 0x01	; 1
    500c:	91 83       	std	Z+1, r25	; 0x01
    500e:	80 83       	st	Z, r24
    5010:	fe 01       	movw	r30, r28
    5012:	ef 57       	subi	r30, 0x7F	; 127
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	80 81       	ld	r24, Z
    5018:	91 81       	ldd	r25, Z+1	; 0x01
    501a:	01 97       	sbiw	r24, 0x01	; 1
    501c:	f1 f7       	brne	.-4      	; 0x501a <main+0x2cc6>
    501e:	fe 01       	movw	r30, r28
    5020:	ef 57       	subi	r30, 0x7F	; 127
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	91 83       	std	Z+1, r25	; 0x01
    5026:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5028:	de 01       	movw	r26, r28
    502a:	ad 57       	subi	r26, 0x7D	; 125
    502c:	bf 4f       	sbci	r27, 0xFF	; 255
    502e:	fe 01       	movw	r30, r28
    5030:	ed 57       	subi	r30, 0x7D	; 125
    5032:	ff 4f       	sbci	r31, 0xFF	; 255
    5034:	80 81       	ld	r24, Z
    5036:	91 81       	ldd	r25, Z+1	; 0x01
    5038:	01 97       	sbiw	r24, 0x01	; 1
    503a:	11 96       	adiw	r26, 0x01	; 1
    503c:	9c 93       	st	X, r25
    503e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5040:	fe 01       	movw	r30, r28
    5042:	ed 57       	subi	r30, 0x7D	; 125
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	80 81       	ld	r24, Z
    5048:	91 81       	ldd	r25, Z+1	; 0x01
    504a:	00 97       	sbiw	r24, 0x00	; 0
    504c:	d1 f6       	brne	.-76     	; 0x5002 <main+0x2cae>
    504e:	27 c0       	rjmp	.+78     	; 0x509e <main+0x2d4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5050:	8e 01       	movw	r16, r28
    5052:	0d 57       	subi	r16, 0x7D	; 125
    5054:	1f 4f       	sbci	r17, 0xFF	; 255
    5056:	fe 01       	movw	r30, r28
    5058:	eb 57       	subi	r30, 0x7B	; 123
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	60 81       	ld	r22, Z
    505e:	71 81       	ldd	r23, Z+1	; 0x01
    5060:	82 81       	ldd	r24, Z+2	; 0x02
    5062:	93 81       	ldd	r25, Z+3	; 0x03
    5064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5068:	dc 01       	movw	r26, r24
    506a:	cb 01       	movw	r24, r22
    506c:	f8 01       	movw	r30, r16
    506e:	91 83       	std	Z+1, r25	; 0x01
    5070:	80 83       	st	Z, r24
    5072:	de 01       	movw	r26, r28
    5074:	a1 58       	subi	r26, 0x81	; 129
    5076:	bf 4f       	sbci	r27, 0xFF	; 255
    5078:	fe 01       	movw	r30, r28
    507a:	ed 57       	subi	r30, 0x7D	; 125
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	8d 93       	st	X+, r24
    5084:	9c 93       	st	X, r25
    5086:	fe 01       	movw	r30, r28
    5088:	e1 58       	subi	r30, 0x81	; 129
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	80 81       	ld	r24, Z
    508e:	91 81       	ldd	r25, Z+1	; 0x01
    5090:	01 97       	sbiw	r24, 0x01	; 1
    5092:	f1 f7       	brne	.-4      	; 0x5090 <main+0x2d3c>
    5094:	fe 01       	movw	r30, r28
    5096:	e1 58       	subi	r30, 0x81	; 129
    5098:	ff 4f       	sbci	r31, 0xFF	; 255
    509a:	91 83       	std	Z+1, r25	; 0x01
    509c:	80 83       	st	Z, r24
    509e:	fe 01       	movw	r30, r28
    50a0:	e5 58       	subi	r30, 0x85	; 133
    50a2:	ff 4f       	sbci	r31, 0xFF	; 255
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	aa ef       	ldi	r26, 0xFA	; 250
    50aa:	b3 e4       	ldi	r27, 0x43	; 67
    50ac:	80 83       	st	Z, r24
    50ae:	91 83       	std	Z+1, r25	; 0x01
    50b0:	a2 83       	std	Z+2, r26	; 0x02
    50b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50b4:	8e 01       	movw	r16, r28
    50b6:	09 58       	subi	r16, 0x89	; 137
    50b8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ba:	fe 01       	movw	r30, r28
    50bc:	e5 58       	subi	r30, 0x85	; 133
    50be:	ff 4f       	sbci	r31, 0xFF	; 255
    50c0:	60 81       	ld	r22, Z
    50c2:	71 81       	ldd	r23, Z+1	; 0x01
    50c4:	82 81       	ldd	r24, Z+2	; 0x02
    50c6:	93 81       	ldd	r25, Z+3	; 0x03
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	4a e7       	ldi	r20, 0x7A	; 122
    50ce:	55 e4       	ldi	r21, 0x45	; 69
    50d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	f8 01       	movw	r30, r16
    50da:	80 83       	st	Z, r24
    50dc:	91 83       	std	Z+1, r25	; 0x01
    50de:	a2 83       	std	Z+2, r26	; 0x02
    50e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50e2:	fe 01       	movw	r30, r28
    50e4:	e9 58       	subi	r30, 0x89	; 137
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	60 81       	ld	r22, Z
    50ea:	71 81       	ldd	r23, Z+1	; 0x01
    50ec:	82 81       	ldd	r24, Z+2	; 0x02
    50ee:	93 81       	ldd	r25, Z+3	; 0x03
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	30 e0       	ldi	r19, 0x00	; 0
    50f4:	40 e8       	ldi	r20, 0x80	; 128
    50f6:	5f e3       	ldi	r21, 0x3F	; 63
    50f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50fc:	88 23       	and	r24, r24
    50fe:	44 f4       	brge	.+16     	; 0x5110 <main+0x2dbc>
		__ticks = 1;
    5100:	fe 01       	movw	r30, r28
    5102:	eb 58       	subi	r30, 0x8B	; 139
    5104:	ff 4f       	sbci	r31, 0xFF	; 255
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	91 83       	std	Z+1, r25	; 0x01
    510c:	80 83       	st	Z, r24
    510e:	64 c0       	rjmp	.+200    	; 0x51d8 <main+0x2e84>
	else if (__tmp > 65535)
    5110:	fe 01       	movw	r30, r28
    5112:	e9 58       	subi	r30, 0x89	; 137
    5114:	ff 4f       	sbci	r31, 0xFF	; 255
    5116:	60 81       	ld	r22, Z
    5118:	71 81       	ldd	r23, Z+1	; 0x01
    511a:	82 81       	ldd	r24, Z+2	; 0x02
    511c:	93 81       	ldd	r25, Z+3	; 0x03
    511e:	20 e0       	ldi	r18, 0x00	; 0
    5120:	3f ef       	ldi	r19, 0xFF	; 255
    5122:	4f e7       	ldi	r20, 0x7F	; 127
    5124:	57 e4       	ldi	r21, 0x47	; 71
    5126:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    512a:	18 16       	cp	r1, r24
    512c:	0c f0       	brlt	.+2      	; 0x5130 <main+0x2ddc>
    512e:	43 c0       	rjmp	.+134    	; 0x51b6 <main+0x2e62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5130:	fe 01       	movw	r30, r28
    5132:	e5 58       	subi	r30, 0x85	; 133
    5134:	ff 4f       	sbci	r31, 0xFF	; 255
    5136:	60 81       	ld	r22, Z
    5138:	71 81       	ldd	r23, Z+1	; 0x01
    513a:	82 81       	ldd	r24, Z+2	; 0x02
    513c:	93 81       	ldd	r25, Z+3	; 0x03
    513e:	20 e0       	ldi	r18, 0x00	; 0
    5140:	30 e0       	ldi	r19, 0x00	; 0
    5142:	40 e2       	ldi	r20, 0x20	; 32
    5144:	51 e4       	ldi	r21, 0x41	; 65
    5146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	8e 01       	movw	r16, r28
    5150:	0b 58       	subi	r16, 0x8B	; 139
    5152:	1f 4f       	sbci	r17, 0xFF	; 255
    5154:	bc 01       	movw	r22, r24
    5156:	cd 01       	movw	r24, r26
    5158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    515c:	dc 01       	movw	r26, r24
    515e:	cb 01       	movw	r24, r22
    5160:	f8 01       	movw	r30, r16
    5162:	91 83       	std	Z+1, r25	; 0x01
    5164:	80 83       	st	Z, r24
    5166:	1f c0       	rjmp	.+62     	; 0x51a6 <main+0x2e52>
    5168:	fe 01       	movw	r30, r28
    516a:	ed 58       	subi	r30, 0x8D	; 141
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	80 e9       	ldi	r24, 0x90	; 144
    5170:	91 e0       	ldi	r25, 0x01	; 1
    5172:	91 83       	std	Z+1, r25	; 0x01
    5174:	80 83       	st	Z, r24
    5176:	fe 01       	movw	r30, r28
    5178:	ed 58       	subi	r30, 0x8D	; 141
    517a:	ff 4f       	sbci	r31, 0xFF	; 255
    517c:	80 81       	ld	r24, Z
    517e:	91 81       	ldd	r25, Z+1	; 0x01
    5180:	01 97       	sbiw	r24, 0x01	; 1
    5182:	f1 f7       	brne	.-4      	; 0x5180 <main+0x2e2c>
    5184:	fe 01       	movw	r30, r28
    5186:	ed 58       	subi	r30, 0x8D	; 141
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    518e:	de 01       	movw	r26, r28
    5190:	ab 58       	subi	r26, 0x8B	; 139
    5192:	bf 4f       	sbci	r27, 0xFF	; 255
    5194:	fe 01       	movw	r30, r28
    5196:	eb 58       	subi	r30, 0x8B	; 139
    5198:	ff 4f       	sbci	r31, 0xFF	; 255
    519a:	80 81       	ld	r24, Z
    519c:	91 81       	ldd	r25, Z+1	; 0x01
    519e:	01 97       	sbiw	r24, 0x01	; 1
    51a0:	11 96       	adiw	r26, 0x01	; 1
    51a2:	9c 93       	st	X, r25
    51a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51a6:	fe 01       	movw	r30, r28
    51a8:	eb 58       	subi	r30, 0x8B	; 139
    51aa:	ff 4f       	sbci	r31, 0xFF	; 255
    51ac:	80 81       	ld	r24, Z
    51ae:	91 81       	ldd	r25, Z+1	; 0x01
    51b0:	00 97       	sbiw	r24, 0x00	; 0
    51b2:	d1 f6       	brne	.-76     	; 0x5168 <main+0x2e14>
    51b4:	27 c0       	rjmp	.+78     	; 0x5204 <main+0x2eb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51b6:	8e 01       	movw	r16, r28
    51b8:	0b 58       	subi	r16, 0x8B	; 139
    51ba:	1f 4f       	sbci	r17, 0xFF	; 255
    51bc:	fe 01       	movw	r30, r28
    51be:	e9 58       	subi	r30, 0x89	; 137
    51c0:	ff 4f       	sbci	r31, 0xFF	; 255
    51c2:	60 81       	ld	r22, Z
    51c4:	71 81       	ldd	r23, Z+1	; 0x01
    51c6:	82 81       	ldd	r24, Z+2	; 0x02
    51c8:	93 81       	ldd	r25, Z+3	; 0x03
    51ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ce:	dc 01       	movw	r26, r24
    51d0:	cb 01       	movw	r24, r22
    51d2:	f8 01       	movw	r30, r16
    51d4:	91 83       	std	Z+1, r25	; 0x01
    51d6:	80 83       	st	Z, r24
    51d8:	de 01       	movw	r26, r28
    51da:	af 58       	subi	r26, 0x8F	; 143
    51dc:	bf 4f       	sbci	r27, 0xFF	; 255
    51de:	fe 01       	movw	r30, r28
    51e0:	eb 58       	subi	r30, 0x8B	; 139
    51e2:	ff 4f       	sbci	r31, 0xFF	; 255
    51e4:	80 81       	ld	r24, Z
    51e6:	91 81       	ldd	r25, Z+1	; 0x01
    51e8:	8d 93       	st	X+, r24
    51ea:	9c 93       	st	X, r25
    51ec:	fe 01       	movw	r30, r28
    51ee:	ef 58       	subi	r30, 0x8F	; 143
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	80 81       	ld	r24, Z
    51f4:	91 81       	ldd	r25, Z+1	; 0x01
    51f6:	01 97       	sbiw	r24, 0x01	; 1
    51f8:	f1 f7       	brne	.-4      	; 0x51f6 <main+0x2ea2>
    51fa:	fe 01       	movw	r30, r28
    51fc:	ef 58       	subi	r30, 0x8F	; 143
    51fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5200:	91 83       	std	Z+1, r25	; 0x01
    5202:	80 83       	st	Z, r24
	_delay_ms(100);

	_delay_ms(500);
	LCD_voidClear();
    5204:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>


	/* Hazalkom rejected*/
	LCD_voidWriteStringAtXY("Hzlkom was rejected", 0, 0);
    5208:	87 e5       	ldi	r24, 0x57	; 87
    520a:	91 e0       	ldi	r25, 0x01	; 1
    520c:	60 e0       	ldi	r22, 0x00	; 0
    520e:	40 e0       	ldi	r20, 0x00	; 0
    5210:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("So, He was Sad !!!", 1, 0);
    5214:	8b e6       	ldi	r24, 0x6B	; 107
    5216:	91 e0       	ldi	r25, 0x01	; 1
    5218:	61 e0       	ldi	r22, 0x01	; 1
    521a:	40 e0       	ldi	r20, 0x00	; 0
    521c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 8);
    5220:	2c e4       	ldi	r18, 0x4C	; 76
    5222:	33 e0       	ldi	r19, 0x03	; 3
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	b9 01       	movw	r22, r18
    5228:	43 e0       	ldi	r20, 0x03	; 3
    522a:	28 e0       	ldi	r18, 0x08	; 8
    522c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 9);
    5230:	2c e4       	ldi	r18, 0x4C	; 76
    5232:	33 e0       	ldi	r19, 0x03	; 3
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	b9 01       	movw	r22, r18
    5238:	43 e0       	ldi	r20, 0x03	; 3
    523a:	29 e0       	ldi	r18, 0x09	; 9
    523c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 10);
    5240:	2c e4       	ldi	r18, 0x4C	; 76
    5242:	33 e0       	ldi	r19, 0x03	; 3
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	b9 01       	movw	r22, r18
    5248:	43 e0       	ldi	r20, 0x03	; 3
    524a:	2a e0       	ldi	r18, 0x0A	; 10
    524c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 11);
    5250:	2c e4       	ldi	r18, 0x4C	; 76
    5252:	33 e0       	ldi	r19, 0x03	; 3
    5254:	81 e0       	ldi	r24, 0x01	; 1
    5256:	b9 01       	movw	r22, r18
    5258:	43 e0       	ldi	r20, 0x03	; 3
    525a:	2b e0       	ldi	r18, 0x0B	; 11
    525c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    5260:	fe 01       	movw	r30, r28
    5262:	e3 59       	subi	r30, 0x93	; 147
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	a8 ec       	ldi	r26, 0xC8	; 200
    526c:	b2 e4       	ldi	r27, 0x42	; 66
    526e:	80 83       	st	Z, r24
    5270:	91 83       	std	Z+1, r25	; 0x01
    5272:	a2 83       	std	Z+2, r26	; 0x02
    5274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5276:	8e 01       	movw	r16, r28
    5278:	07 59       	subi	r16, 0x97	; 151
    527a:	1f 4f       	sbci	r17, 0xFF	; 255
    527c:	fe 01       	movw	r30, r28
    527e:	e3 59       	subi	r30, 0x93	; 147
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	60 81       	ld	r22, Z
    5284:	71 81       	ldd	r23, Z+1	; 0x01
    5286:	82 81       	ldd	r24, Z+2	; 0x02
    5288:	93 81       	ldd	r25, Z+3	; 0x03
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	4a e7       	ldi	r20, 0x7A	; 122
    5290:	55 e4       	ldi	r21, 0x45	; 69
    5292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	f8 01       	movw	r30, r16
    529c:	80 83       	st	Z, r24
    529e:	91 83       	std	Z+1, r25	; 0x01
    52a0:	a2 83       	std	Z+2, r26	; 0x02
    52a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52a4:	fe 01       	movw	r30, r28
    52a6:	e7 59       	subi	r30, 0x97	; 151
    52a8:	ff 4f       	sbci	r31, 0xFF	; 255
    52aa:	60 81       	ld	r22, Z
    52ac:	71 81       	ldd	r23, Z+1	; 0x01
    52ae:	82 81       	ldd	r24, Z+2	; 0x02
    52b0:	93 81       	ldd	r25, Z+3	; 0x03
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e8       	ldi	r20, 0x80	; 128
    52b8:	5f e3       	ldi	r21, 0x3F	; 63
    52ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52be:	88 23       	and	r24, r24
    52c0:	44 f4       	brge	.+16     	; 0x52d2 <main+0x2f7e>
		__ticks = 1;
    52c2:	fe 01       	movw	r30, r28
    52c4:	e9 59       	subi	r30, 0x99	; 153
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	91 83       	std	Z+1, r25	; 0x01
    52ce:	80 83       	st	Z, r24
    52d0:	64 c0       	rjmp	.+200    	; 0x539a <main+0x3046>
	else if (__tmp > 65535)
    52d2:	fe 01       	movw	r30, r28
    52d4:	e7 59       	subi	r30, 0x97	; 151
    52d6:	ff 4f       	sbci	r31, 0xFF	; 255
    52d8:	60 81       	ld	r22, Z
    52da:	71 81       	ldd	r23, Z+1	; 0x01
    52dc:	82 81       	ldd	r24, Z+2	; 0x02
    52de:	93 81       	ldd	r25, Z+3	; 0x03
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	4f e7       	ldi	r20, 0x7F	; 127
    52e6:	57 e4       	ldi	r21, 0x47	; 71
    52e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52ec:	18 16       	cp	r1, r24
    52ee:	0c f0       	brlt	.+2      	; 0x52f2 <main+0x2f9e>
    52f0:	43 c0       	rjmp	.+134    	; 0x5378 <main+0x3024>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f2:	fe 01       	movw	r30, r28
    52f4:	e3 59       	subi	r30, 0x93	; 147
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	60 81       	ld	r22, Z
    52fa:	71 81       	ldd	r23, Z+1	; 0x01
    52fc:	82 81       	ldd	r24, Z+2	; 0x02
    52fe:	93 81       	ldd	r25, Z+3	; 0x03
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	40 e2       	ldi	r20, 0x20	; 32
    5306:	51 e4       	ldi	r21, 0x41	; 65
    5308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    530c:	dc 01       	movw	r26, r24
    530e:	cb 01       	movw	r24, r22
    5310:	8e 01       	movw	r16, r28
    5312:	09 59       	subi	r16, 0x99	; 153
    5314:	1f 4f       	sbci	r17, 0xFF	; 255
    5316:	bc 01       	movw	r22, r24
    5318:	cd 01       	movw	r24, r26
    531a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    531e:	dc 01       	movw	r26, r24
    5320:	cb 01       	movw	r24, r22
    5322:	f8 01       	movw	r30, r16
    5324:	91 83       	std	Z+1, r25	; 0x01
    5326:	80 83       	st	Z, r24
    5328:	1f c0       	rjmp	.+62     	; 0x5368 <main+0x3014>
    532a:	fe 01       	movw	r30, r28
    532c:	eb 59       	subi	r30, 0x9B	; 155
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	80 e9       	ldi	r24, 0x90	; 144
    5332:	91 e0       	ldi	r25, 0x01	; 1
    5334:	91 83       	std	Z+1, r25	; 0x01
    5336:	80 83       	st	Z, r24
    5338:	fe 01       	movw	r30, r28
    533a:	eb 59       	subi	r30, 0x9B	; 155
    533c:	ff 4f       	sbci	r31, 0xFF	; 255
    533e:	80 81       	ld	r24, Z
    5340:	91 81       	ldd	r25, Z+1	; 0x01
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <main+0x2fee>
    5346:	fe 01       	movw	r30, r28
    5348:	eb 59       	subi	r30, 0x9B	; 155
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	91 83       	std	Z+1, r25	; 0x01
    534e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5350:	de 01       	movw	r26, r28
    5352:	a9 59       	subi	r26, 0x99	; 153
    5354:	bf 4f       	sbci	r27, 0xFF	; 255
    5356:	fe 01       	movw	r30, r28
    5358:	e9 59       	subi	r30, 0x99	; 153
    535a:	ff 4f       	sbci	r31, 0xFF	; 255
    535c:	80 81       	ld	r24, Z
    535e:	91 81       	ldd	r25, Z+1	; 0x01
    5360:	01 97       	sbiw	r24, 0x01	; 1
    5362:	11 96       	adiw	r26, 0x01	; 1
    5364:	9c 93       	st	X, r25
    5366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5368:	fe 01       	movw	r30, r28
    536a:	e9 59       	subi	r30, 0x99	; 153
    536c:	ff 4f       	sbci	r31, 0xFF	; 255
    536e:	80 81       	ld	r24, Z
    5370:	91 81       	ldd	r25, Z+1	; 0x01
    5372:	00 97       	sbiw	r24, 0x00	; 0
    5374:	d1 f6       	brne	.-76     	; 0x532a <main+0x2fd6>
    5376:	27 c0       	rjmp	.+78     	; 0x53c6 <main+0x3072>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5378:	8e 01       	movw	r16, r28
    537a:	09 59       	subi	r16, 0x99	; 153
    537c:	1f 4f       	sbci	r17, 0xFF	; 255
    537e:	fe 01       	movw	r30, r28
    5380:	e7 59       	subi	r30, 0x97	; 151
    5382:	ff 4f       	sbci	r31, 0xFF	; 255
    5384:	60 81       	ld	r22, Z
    5386:	71 81       	ldd	r23, Z+1	; 0x01
    5388:	82 81       	ldd	r24, Z+2	; 0x02
    538a:	93 81       	ldd	r25, Z+3	; 0x03
    538c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	f8 01       	movw	r30, r16
    5396:	91 83       	std	Z+1, r25	; 0x01
    5398:	80 83       	st	Z, r24
    539a:	de 01       	movw	r26, r28
    539c:	ad 59       	subi	r26, 0x9D	; 157
    539e:	bf 4f       	sbci	r27, 0xFF	; 255
    53a0:	fe 01       	movw	r30, r28
    53a2:	e9 59       	subi	r30, 0x99	; 153
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 81       	ld	r24, Z
    53a8:	91 81       	ldd	r25, Z+1	; 0x01
    53aa:	8d 93       	st	X+, r24
    53ac:	9c 93       	st	X, r25
    53ae:	fe 01       	movw	r30, r28
    53b0:	ed 59       	subi	r30, 0x9D	; 157
    53b2:	ff 4f       	sbci	r31, 0xFF	; 255
    53b4:	80 81       	ld	r24, Z
    53b6:	91 81       	ldd	r25, Z+1	; 0x01
    53b8:	01 97       	sbiw	r24, 0x01	; 1
    53ba:	f1 f7       	brne	.-4      	; 0x53b8 <main+0x3064>
    53bc:	fe 01       	movw	r30, r28
    53be:	ed 59       	subi	r30, 0x9D	; 157
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	91 83       	std	Z+1, r25	; 0x01
    53c4:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(1, Sad, 3, 8);
    53c6:	24 e5       	ldi	r18, 0x54	; 84
    53c8:	33 e0       	ldi	r19, 0x03	; 3
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	b9 01       	movw	r22, r18
    53ce:	43 e0       	ldi	r20, 0x03	; 3
    53d0:	28 e0       	ldi	r18, 0x08	; 8
    53d2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sad, 3, 9);
    53d6:	24 e5       	ldi	r18, 0x54	; 84
    53d8:	33 e0       	ldi	r19, 0x03	; 3
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	b9 01       	movw	r22, r18
    53de:	43 e0       	ldi	r20, 0x03	; 3
    53e0:	29 e0       	ldi	r18, 0x09	; 9
    53e2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sad, 3, 10);
    53e6:	24 e5       	ldi	r18, 0x54	; 84
    53e8:	33 e0       	ldi	r19, 0x03	; 3
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	b9 01       	movw	r22, r18
    53ee:	43 e0       	ldi	r20, 0x03	; 3
    53f0:	2a e0       	ldi	r18, 0x0A	; 10
    53f2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sad, 3, 11);
    53f6:	24 e5       	ldi	r18, 0x54	; 84
    53f8:	33 e0       	ldi	r19, 0x03	; 3
    53fa:	81 e0       	ldi	r24, 0x01	; 1
    53fc:	b9 01       	movw	r22, r18
    53fe:	43 e0       	ldi	r20, 0x03	; 3
    5400:	2b e0       	ldi	r18, 0x0B	; 11
    5402:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    5406:	fe 01       	movw	r30, r28
    5408:	e1 5a       	subi	r30, 0xA1	; 161
    540a:	ff 4f       	sbci	r31, 0xFF	; 255
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	a8 ec       	ldi	r26, 0xC8	; 200
    5412:	b2 e4       	ldi	r27, 0x42	; 66
    5414:	80 83       	st	Z, r24
    5416:	91 83       	std	Z+1, r25	; 0x01
    5418:	a2 83       	std	Z+2, r26	; 0x02
    541a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    541c:	8e 01       	movw	r16, r28
    541e:	05 5a       	subi	r16, 0xA5	; 165
    5420:	1f 4f       	sbci	r17, 0xFF	; 255
    5422:	fe 01       	movw	r30, r28
    5424:	e1 5a       	subi	r30, 0xA1	; 161
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	60 81       	ld	r22, Z
    542a:	71 81       	ldd	r23, Z+1	; 0x01
    542c:	82 81       	ldd	r24, Z+2	; 0x02
    542e:	93 81       	ldd	r25, Z+3	; 0x03
    5430:	20 e0       	ldi	r18, 0x00	; 0
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	4a e7       	ldi	r20, 0x7A	; 122
    5436:	55 e4       	ldi	r21, 0x45	; 69
    5438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    543c:	dc 01       	movw	r26, r24
    543e:	cb 01       	movw	r24, r22
    5440:	f8 01       	movw	r30, r16
    5442:	80 83       	st	Z, r24
    5444:	91 83       	std	Z+1, r25	; 0x01
    5446:	a2 83       	std	Z+2, r26	; 0x02
    5448:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    544a:	fe 01       	movw	r30, r28
    544c:	e5 5a       	subi	r30, 0xA5	; 165
    544e:	ff 4f       	sbci	r31, 0xFF	; 255
    5450:	60 81       	ld	r22, Z
    5452:	71 81       	ldd	r23, Z+1	; 0x01
    5454:	82 81       	ldd	r24, Z+2	; 0x02
    5456:	93 81       	ldd	r25, Z+3	; 0x03
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	40 e8       	ldi	r20, 0x80	; 128
    545e:	5f e3       	ldi	r21, 0x3F	; 63
    5460:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5464:	88 23       	and	r24, r24
    5466:	44 f4       	brge	.+16     	; 0x5478 <main+0x3124>
		__ticks = 1;
    5468:	fe 01       	movw	r30, r28
    546a:	e7 5a       	subi	r30, 0xA7	; 167
    546c:	ff 4f       	sbci	r31, 0xFF	; 255
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	91 83       	std	Z+1, r25	; 0x01
    5474:	80 83       	st	Z, r24
    5476:	64 c0       	rjmp	.+200    	; 0x5540 <main+0x31ec>
	else if (__tmp > 65535)
    5478:	fe 01       	movw	r30, r28
    547a:	e5 5a       	subi	r30, 0xA5	; 165
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	60 81       	ld	r22, Z
    5480:	71 81       	ldd	r23, Z+1	; 0x01
    5482:	82 81       	ldd	r24, Z+2	; 0x02
    5484:	93 81       	ldd	r25, Z+3	; 0x03
    5486:	20 e0       	ldi	r18, 0x00	; 0
    5488:	3f ef       	ldi	r19, 0xFF	; 255
    548a:	4f e7       	ldi	r20, 0x7F	; 127
    548c:	57 e4       	ldi	r21, 0x47	; 71
    548e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5492:	18 16       	cp	r1, r24
    5494:	0c f0       	brlt	.+2      	; 0x5498 <main+0x3144>
    5496:	43 c0       	rjmp	.+134    	; 0x551e <main+0x31ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5498:	fe 01       	movw	r30, r28
    549a:	e1 5a       	subi	r30, 0xA1	; 161
    549c:	ff 4f       	sbci	r31, 0xFF	; 255
    549e:	60 81       	ld	r22, Z
    54a0:	71 81       	ldd	r23, Z+1	; 0x01
    54a2:	82 81       	ldd	r24, Z+2	; 0x02
    54a4:	93 81       	ldd	r25, Z+3	; 0x03
    54a6:	20 e0       	ldi	r18, 0x00	; 0
    54a8:	30 e0       	ldi	r19, 0x00	; 0
    54aa:	40 e2       	ldi	r20, 0x20	; 32
    54ac:	51 e4       	ldi	r21, 0x41	; 65
    54ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b2:	dc 01       	movw	r26, r24
    54b4:	cb 01       	movw	r24, r22
    54b6:	8e 01       	movw	r16, r28
    54b8:	07 5a       	subi	r16, 0xA7	; 167
    54ba:	1f 4f       	sbci	r17, 0xFF	; 255
    54bc:	bc 01       	movw	r22, r24
    54be:	cd 01       	movw	r24, r26
    54c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	f8 01       	movw	r30, r16
    54ca:	91 83       	std	Z+1, r25	; 0x01
    54cc:	80 83       	st	Z, r24
    54ce:	1f c0       	rjmp	.+62     	; 0x550e <main+0x31ba>
    54d0:	fe 01       	movw	r30, r28
    54d2:	e9 5a       	subi	r30, 0xA9	; 169
    54d4:	ff 4f       	sbci	r31, 0xFF	; 255
    54d6:	80 e9       	ldi	r24, 0x90	; 144
    54d8:	91 e0       	ldi	r25, 0x01	; 1
    54da:	91 83       	std	Z+1, r25	; 0x01
    54dc:	80 83       	st	Z, r24
    54de:	fe 01       	movw	r30, r28
    54e0:	e9 5a       	subi	r30, 0xA9	; 169
    54e2:	ff 4f       	sbci	r31, 0xFF	; 255
    54e4:	80 81       	ld	r24, Z
    54e6:	91 81       	ldd	r25, Z+1	; 0x01
    54e8:	01 97       	sbiw	r24, 0x01	; 1
    54ea:	f1 f7       	brne	.-4      	; 0x54e8 <main+0x3194>
    54ec:	fe 01       	movw	r30, r28
    54ee:	e9 5a       	subi	r30, 0xA9	; 169
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
    54f2:	91 83       	std	Z+1, r25	; 0x01
    54f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54f6:	de 01       	movw	r26, r28
    54f8:	a7 5a       	subi	r26, 0xA7	; 167
    54fa:	bf 4f       	sbci	r27, 0xFF	; 255
    54fc:	fe 01       	movw	r30, r28
    54fe:	e7 5a       	subi	r30, 0xA7	; 167
    5500:	ff 4f       	sbci	r31, 0xFF	; 255
    5502:	80 81       	ld	r24, Z
    5504:	91 81       	ldd	r25, Z+1	; 0x01
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	11 96       	adiw	r26, 0x01	; 1
    550a:	9c 93       	st	X, r25
    550c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550e:	fe 01       	movw	r30, r28
    5510:	e7 5a       	subi	r30, 0xA7	; 167
    5512:	ff 4f       	sbci	r31, 0xFF	; 255
    5514:	80 81       	ld	r24, Z
    5516:	91 81       	ldd	r25, Z+1	; 0x01
    5518:	00 97       	sbiw	r24, 0x00	; 0
    551a:	d1 f6       	brne	.-76     	; 0x54d0 <main+0x317c>
    551c:	27 c0       	rjmp	.+78     	; 0x556c <main+0x3218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    551e:	8e 01       	movw	r16, r28
    5520:	07 5a       	subi	r16, 0xA7	; 167
    5522:	1f 4f       	sbci	r17, 0xFF	; 255
    5524:	fe 01       	movw	r30, r28
    5526:	e5 5a       	subi	r30, 0xA5	; 165
    5528:	ff 4f       	sbci	r31, 0xFF	; 255
    552a:	60 81       	ld	r22, Z
    552c:	71 81       	ldd	r23, Z+1	; 0x01
    552e:	82 81       	ldd	r24, Z+2	; 0x02
    5530:	93 81       	ldd	r25, Z+3	; 0x03
    5532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5536:	dc 01       	movw	r26, r24
    5538:	cb 01       	movw	r24, r22
    553a:	f8 01       	movw	r30, r16
    553c:	91 83       	std	Z+1, r25	; 0x01
    553e:	80 83       	st	Z, r24
    5540:	de 01       	movw	r26, r28
    5542:	ab 5a       	subi	r26, 0xAB	; 171
    5544:	bf 4f       	sbci	r27, 0xFF	; 255
    5546:	fe 01       	movw	r30, r28
    5548:	e7 5a       	subi	r30, 0xA7	; 167
    554a:	ff 4f       	sbci	r31, 0xFF	; 255
    554c:	80 81       	ld	r24, Z
    554e:	91 81       	ldd	r25, Z+1	; 0x01
    5550:	8d 93       	st	X+, r24
    5552:	9c 93       	st	X, r25
    5554:	fe 01       	movw	r30, r28
    5556:	eb 5a       	subi	r30, 0xAB	; 171
    5558:	ff 4f       	sbci	r31, 0xFF	; 255
    555a:	80 81       	ld	r24, Z
    555c:	91 81       	ldd	r25, Z+1	; 0x01
    555e:	01 97       	sbiw	r24, 0x01	; 1
    5560:	f1 f7       	brne	.-4      	; 0x555e <main+0x320a>
    5562:	fe 01       	movw	r30, r28
    5564:	eb 5a       	subi	r30, 0xAB	; 171
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	91 83       	std	Z+1, r25	; 0x01
    556a:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(1, Sit, 3, 8);
    556c:	2c e5       	ldi	r18, 0x5C	; 92
    556e:	33 e0       	ldi	r19, 0x03	; 3
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	b9 01       	movw	r22, r18
    5574:	43 e0       	ldi	r20, 0x03	; 3
    5576:	28 e0       	ldi	r18, 0x08	; 8
    5578:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sit, 3, 9);
    557c:	2c e5       	ldi	r18, 0x5C	; 92
    557e:	33 e0       	ldi	r19, 0x03	; 3
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	b9 01       	movw	r22, r18
    5584:	43 e0       	ldi	r20, 0x03	; 3
    5586:	29 e0       	ldi	r18, 0x09	; 9
    5588:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sit, 3, 10);
    558c:	2c e5       	ldi	r18, 0x5C	; 92
    558e:	33 e0       	ldi	r19, 0x03	; 3
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	b9 01       	movw	r22, r18
    5594:	43 e0       	ldi	r20, 0x03	; 3
    5596:	2a e0       	ldi	r18, 0x0A	; 10
    5598:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sit, 3, 11);
    559c:	2c e5       	ldi	r18, 0x5C	; 92
    559e:	33 e0       	ldi	r19, 0x03	; 3
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	b9 01       	movw	r22, r18
    55a4:	43 e0       	ldi	r20, 0x03	; 3
    55a6:	2b e0       	ldi	r18, 0x0B	; 11
    55a8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    55ac:	fe 01       	movw	r30, r28
    55ae:	ef 5a       	subi	r30, 0xAF	; 175
    55b0:	ff 4f       	sbci	r31, 0xFF	; 255
    55b2:	80 e0       	ldi	r24, 0x00	; 0
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	a8 ec       	ldi	r26, 0xC8	; 200
    55b8:	b2 e4       	ldi	r27, 0x42	; 66
    55ba:	80 83       	st	Z, r24
    55bc:	91 83       	std	Z+1, r25	; 0x01
    55be:	a2 83       	std	Z+2, r26	; 0x02
    55c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55c2:	8e 01       	movw	r16, r28
    55c4:	03 5b       	subi	r16, 0xB3	; 179
    55c6:	1f 4f       	sbci	r17, 0xFF	; 255
    55c8:	fe 01       	movw	r30, r28
    55ca:	ef 5a       	subi	r30, 0xAF	; 175
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	60 81       	ld	r22, Z
    55d0:	71 81       	ldd	r23, Z+1	; 0x01
    55d2:	82 81       	ldd	r24, Z+2	; 0x02
    55d4:	93 81       	ldd	r25, Z+3	; 0x03
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	4a e7       	ldi	r20, 0x7A	; 122
    55dc:	55 e4       	ldi	r21, 0x45	; 69
    55de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	f8 01       	movw	r30, r16
    55e8:	80 83       	st	Z, r24
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	a2 83       	std	Z+2, r26	; 0x02
    55ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55f0:	fe 01       	movw	r30, r28
    55f2:	e3 5b       	subi	r30, 0xB3	; 179
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	60 81       	ld	r22, Z
    55f8:	71 81       	ldd	r23, Z+1	; 0x01
    55fa:	82 81       	ldd	r24, Z+2	; 0x02
    55fc:	93 81       	ldd	r25, Z+3	; 0x03
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	30 e0       	ldi	r19, 0x00	; 0
    5602:	40 e8       	ldi	r20, 0x80	; 128
    5604:	5f e3       	ldi	r21, 0x3F	; 63
    5606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    560a:	88 23       	and	r24, r24
    560c:	44 f4       	brge	.+16     	; 0x561e <main+0x32ca>
		__ticks = 1;
    560e:	fe 01       	movw	r30, r28
    5610:	e5 5b       	subi	r30, 0xB5	; 181
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
    5614:	81 e0       	ldi	r24, 0x01	; 1
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	91 83       	std	Z+1, r25	; 0x01
    561a:	80 83       	st	Z, r24
    561c:	64 c0       	rjmp	.+200    	; 0x56e6 <main+0x3392>
	else if (__tmp > 65535)
    561e:	fe 01       	movw	r30, r28
    5620:	e3 5b       	subi	r30, 0xB3	; 179
    5622:	ff 4f       	sbci	r31, 0xFF	; 255
    5624:	60 81       	ld	r22, Z
    5626:	71 81       	ldd	r23, Z+1	; 0x01
    5628:	82 81       	ldd	r24, Z+2	; 0x02
    562a:	93 81       	ldd	r25, Z+3	; 0x03
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	3f ef       	ldi	r19, 0xFF	; 255
    5630:	4f e7       	ldi	r20, 0x7F	; 127
    5632:	57 e4       	ldi	r21, 0x47	; 71
    5634:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5638:	18 16       	cp	r1, r24
    563a:	0c f0       	brlt	.+2      	; 0x563e <main+0x32ea>
    563c:	43 c0       	rjmp	.+134    	; 0x56c4 <main+0x3370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    563e:	fe 01       	movw	r30, r28
    5640:	ef 5a       	subi	r30, 0xAF	; 175
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	60 81       	ld	r22, Z
    5646:	71 81       	ldd	r23, Z+1	; 0x01
    5648:	82 81       	ldd	r24, Z+2	; 0x02
    564a:	93 81       	ldd	r25, Z+3	; 0x03
    564c:	20 e0       	ldi	r18, 0x00	; 0
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	40 e2       	ldi	r20, 0x20	; 32
    5652:	51 e4       	ldi	r21, 0x41	; 65
    5654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5658:	dc 01       	movw	r26, r24
    565a:	cb 01       	movw	r24, r22
    565c:	8e 01       	movw	r16, r28
    565e:	05 5b       	subi	r16, 0xB5	; 181
    5660:	1f 4f       	sbci	r17, 0xFF	; 255
    5662:	bc 01       	movw	r22, r24
    5664:	cd 01       	movw	r24, r26
    5666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	f8 01       	movw	r30, r16
    5670:	91 83       	std	Z+1, r25	; 0x01
    5672:	80 83       	st	Z, r24
    5674:	1f c0       	rjmp	.+62     	; 0x56b4 <main+0x3360>
    5676:	fe 01       	movw	r30, r28
    5678:	e7 5b       	subi	r30, 0xB7	; 183
    567a:	ff 4f       	sbci	r31, 0xFF	; 255
    567c:	80 e9       	ldi	r24, 0x90	; 144
    567e:	91 e0       	ldi	r25, 0x01	; 1
    5680:	91 83       	std	Z+1, r25	; 0x01
    5682:	80 83       	st	Z, r24
    5684:	fe 01       	movw	r30, r28
    5686:	e7 5b       	subi	r30, 0xB7	; 183
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	80 81       	ld	r24, Z
    568c:	91 81       	ldd	r25, Z+1	; 0x01
    568e:	01 97       	sbiw	r24, 0x01	; 1
    5690:	f1 f7       	brne	.-4      	; 0x568e <main+0x333a>
    5692:	fe 01       	movw	r30, r28
    5694:	e7 5b       	subi	r30, 0xB7	; 183
    5696:	ff 4f       	sbci	r31, 0xFF	; 255
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    569c:	de 01       	movw	r26, r28
    569e:	a5 5b       	subi	r26, 0xB5	; 181
    56a0:	bf 4f       	sbci	r27, 0xFF	; 255
    56a2:	fe 01       	movw	r30, r28
    56a4:	e5 5b       	subi	r30, 0xB5	; 181
    56a6:	ff 4f       	sbci	r31, 0xFF	; 255
    56a8:	80 81       	ld	r24, Z
    56aa:	91 81       	ldd	r25, Z+1	; 0x01
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	11 96       	adiw	r26, 0x01	; 1
    56b0:	9c 93       	st	X, r25
    56b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b4:	fe 01       	movw	r30, r28
    56b6:	e5 5b       	subi	r30, 0xB5	; 181
    56b8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ba:	80 81       	ld	r24, Z
    56bc:	91 81       	ldd	r25, Z+1	; 0x01
    56be:	00 97       	sbiw	r24, 0x00	; 0
    56c0:	d1 f6       	brne	.-76     	; 0x5676 <main+0x3322>
    56c2:	27 c0       	rjmp	.+78     	; 0x5712 <main+0x33be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c4:	8e 01       	movw	r16, r28
    56c6:	05 5b       	subi	r16, 0xB5	; 181
    56c8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ca:	fe 01       	movw	r30, r28
    56cc:	e3 5b       	subi	r30, 0xB3	; 179
    56ce:	ff 4f       	sbci	r31, 0xFF	; 255
    56d0:	60 81       	ld	r22, Z
    56d2:	71 81       	ldd	r23, Z+1	; 0x01
    56d4:	82 81       	ldd	r24, Z+2	; 0x02
    56d6:	93 81       	ldd	r25, Z+3	; 0x03
    56d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56dc:	dc 01       	movw	r26, r24
    56de:	cb 01       	movw	r24, r22
    56e0:	f8 01       	movw	r30, r16
    56e2:	91 83       	std	Z+1, r25	; 0x01
    56e4:	80 83       	st	Z, r24
    56e6:	de 01       	movw	r26, r28
    56e8:	a9 5b       	subi	r26, 0xB9	; 185
    56ea:	bf 4f       	sbci	r27, 0xFF	; 255
    56ec:	fe 01       	movw	r30, r28
    56ee:	e5 5b       	subi	r30, 0xB5	; 181
    56f0:	ff 4f       	sbci	r31, 0xFF	; 255
    56f2:	80 81       	ld	r24, Z
    56f4:	91 81       	ldd	r25, Z+1	; 0x01
    56f6:	8d 93       	st	X+, r24
    56f8:	9c 93       	st	X, r25
    56fa:	fe 01       	movw	r30, r28
    56fc:	e9 5b       	subi	r30, 0xB9	; 185
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	80 81       	ld	r24, Z
    5702:	91 81       	ldd	r25, Z+1	; 0x01
    5704:	01 97       	sbiw	r24, 0x01	; 1
    5706:	f1 f7       	brne	.-4      	; 0x5704 <main+0x33b0>
    5708:	fe 01       	movw	r30, r28
    570a:	e9 5b       	subi	r30, 0xB9	; 185
    570c:	ff 4f       	sbci	r31, 0xFF	; 255
    570e:	91 83       	std	Z+1, r25	; 0x01
    5710:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 8);
    5712:	2c e4       	ldi	r18, 0x4C	; 76
    5714:	33 e0       	ldi	r19, 0x03	; 3
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	b9 01       	movw	r22, r18
    571a:	43 e0       	ldi	r20, 0x03	; 3
    571c:	28 e0       	ldi	r18, 0x08	; 8
    571e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 9);
    5722:	2c e4       	ldi	r18, 0x4C	; 76
    5724:	33 e0       	ldi	r19, 0x03	; 3
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	b9 01       	movw	r22, r18
    572a:	43 e0       	ldi	r20, 0x03	; 3
    572c:	29 e0       	ldi	r18, 0x09	; 9
    572e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 10);
    5732:	2c e4       	ldi	r18, 0x4C	; 76
    5734:	33 e0       	ldi	r19, 0x03	; 3
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	b9 01       	movw	r22, r18
    573a:	43 e0       	ldi	r20, 0x03	; 3
    573c:	2a e0       	ldi	r18, 0x0A	; 10
    573e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Hazalkom, 3, 11);
    5742:	2c e4       	ldi	r18, 0x4C	; 76
    5744:	33 e0       	ldi	r19, 0x03	; 3
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	b9 01       	movw	r22, r18
    574a:	43 e0       	ldi	r20, 0x03	; 3
    574c:	2b e0       	ldi	r18, 0x0B	; 11
    574e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    5752:	fe 01       	movw	r30, r28
    5754:	ed 5b       	subi	r30, 0xBD	; 189
    5756:	ff 4f       	sbci	r31, 0xFF	; 255
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	a8 ec       	ldi	r26, 0xC8	; 200
    575e:	b2 e4       	ldi	r27, 0x42	; 66
    5760:	80 83       	st	Z, r24
    5762:	91 83       	std	Z+1, r25	; 0x01
    5764:	a2 83       	std	Z+2, r26	; 0x02
    5766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5768:	8e 01       	movw	r16, r28
    576a:	01 5c       	subi	r16, 0xC1	; 193
    576c:	1f 4f       	sbci	r17, 0xFF	; 255
    576e:	fe 01       	movw	r30, r28
    5770:	ed 5b       	subi	r30, 0xBD	; 189
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	60 81       	ld	r22, Z
    5776:	71 81       	ldd	r23, Z+1	; 0x01
    5778:	82 81       	ldd	r24, Z+2	; 0x02
    577a:	93 81       	ldd	r25, Z+3	; 0x03
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	4a e7       	ldi	r20, 0x7A	; 122
    5782:	55 e4       	ldi	r21, 0x45	; 69
    5784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5788:	dc 01       	movw	r26, r24
    578a:	cb 01       	movw	r24, r22
    578c:	f8 01       	movw	r30, r16
    578e:	80 83       	st	Z, r24
    5790:	91 83       	std	Z+1, r25	; 0x01
    5792:	a2 83       	std	Z+2, r26	; 0x02
    5794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5796:	fe 01       	movw	r30, r28
    5798:	ff 96       	adiw	r30, 0x3f	; 63
    579a:	60 81       	ld	r22, Z
    579c:	71 81       	ldd	r23, Z+1	; 0x01
    579e:	82 81       	ldd	r24, Z+2	; 0x02
    57a0:	93 81       	ldd	r25, Z+3	; 0x03
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	40 e8       	ldi	r20, 0x80	; 128
    57a8:	5f e3       	ldi	r21, 0x3F	; 63
    57aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ae:	88 23       	and	r24, r24
    57b0:	2c f4       	brge	.+10     	; 0x57bc <main+0x3468>
		__ticks = 1;
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	9e af       	std	Y+62, r25	; 0x3e
    57b8:	8d af       	std	Y+61, r24	; 0x3d
    57ba:	46 c0       	rjmp	.+140    	; 0x5848 <main+0x34f4>
	else if (__tmp > 65535)
    57bc:	fe 01       	movw	r30, r28
    57be:	ff 96       	adiw	r30, 0x3f	; 63
    57c0:	60 81       	ld	r22, Z
    57c2:	71 81       	ldd	r23, Z+1	; 0x01
    57c4:	82 81       	ldd	r24, Z+2	; 0x02
    57c6:	93 81       	ldd	r25, Z+3	; 0x03
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	3f ef       	ldi	r19, 0xFF	; 255
    57cc:	4f e7       	ldi	r20, 0x7F	; 127
    57ce:	57 e4       	ldi	r21, 0x47	; 71
    57d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57d4:	18 16       	cp	r1, r24
    57d6:	64 f5       	brge	.+88     	; 0x5830 <main+0x34dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d8:	fe 01       	movw	r30, r28
    57da:	ed 5b       	subi	r30, 0xBD	; 189
    57dc:	ff 4f       	sbci	r31, 0xFF	; 255
    57de:	60 81       	ld	r22, Z
    57e0:	71 81       	ldd	r23, Z+1	; 0x01
    57e2:	82 81       	ldd	r24, Z+2	; 0x02
    57e4:	93 81       	ldd	r25, Z+3	; 0x03
    57e6:	20 e0       	ldi	r18, 0x00	; 0
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	40 e2       	ldi	r20, 0x20	; 32
    57ec:	51 e4       	ldi	r21, 0x41	; 65
    57ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f2:	dc 01       	movw	r26, r24
    57f4:	cb 01       	movw	r24, r22
    57f6:	bc 01       	movw	r22, r24
    57f8:	cd 01       	movw	r24, r26
    57fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	9e af       	std	Y+62, r25	; 0x3e
    5804:	8d af       	std	Y+61, r24	; 0x3d
    5806:	0f c0       	rjmp	.+30     	; 0x5826 <main+0x34d2>
    5808:	80 e9       	ldi	r24, 0x90	; 144
    580a:	91 e0       	ldi	r25, 0x01	; 1
    580c:	9c af       	std	Y+60, r25	; 0x3c
    580e:	8b af       	std	Y+59, r24	; 0x3b
    5810:	8b ad       	ldd	r24, Y+59	; 0x3b
    5812:	9c ad       	ldd	r25, Y+60	; 0x3c
    5814:	01 97       	sbiw	r24, 0x01	; 1
    5816:	f1 f7       	brne	.-4      	; 0x5814 <main+0x34c0>
    5818:	9c af       	std	Y+60, r25	; 0x3c
    581a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    581c:	8d ad       	ldd	r24, Y+61	; 0x3d
    581e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	9e af       	std	Y+62, r25	; 0x3e
    5824:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5826:	8d ad       	ldd	r24, Y+61	; 0x3d
    5828:	9e ad       	ldd	r25, Y+62	; 0x3e
    582a:	00 97       	sbiw	r24, 0x00	; 0
    582c:	69 f7       	brne	.-38     	; 0x5808 <main+0x34b4>
    582e:	16 c0       	rjmp	.+44     	; 0x585c <main+0x3508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5830:	fe 01       	movw	r30, r28
    5832:	ff 96       	adiw	r30, 0x3f	; 63
    5834:	60 81       	ld	r22, Z
    5836:	71 81       	ldd	r23, Z+1	; 0x01
    5838:	82 81       	ldd	r24, Z+2	; 0x02
    583a:	93 81       	ldd	r25, Z+3	; 0x03
    583c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	9e af       	std	Y+62, r25	; 0x3e
    5846:	8d af       	std	Y+61, r24	; 0x3d
    5848:	8d ad       	ldd	r24, Y+61	; 0x3d
    584a:	9e ad       	ldd	r25, Y+62	; 0x3e
    584c:	9a af       	std	Y+58, r25	; 0x3a
    584e:	89 af       	std	Y+57, r24	; 0x39
    5850:	89 ad       	ldd	r24, Y+57	; 0x39
    5852:	9a ad       	ldd	r25, Y+58	; 0x3a
    5854:	01 97       	sbiw	r24, 0x01	; 1
    5856:	f1 f7       	brne	.-4      	; 0x5854 <main+0x3500>
    5858:	9a af       	std	Y+58, r25	; 0x3a
    585a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(1, Sad, 3, 8);
    585c:	24 e5       	ldi	r18, 0x54	; 84
    585e:	33 e0       	ldi	r19, 0x03	; 3
    5860:	81 e0       	ldi	r24, 0x01	; 1
    5862:	b9 01       	movw	r22, r18
    5864:	43 e0       	ldi	r20, 0x03	; 3
    5866:	28 e0       	ldi	r18, 0x08	; 8
    5868:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sad, 3, 9);
    586c:	24 e5       	ldi	r18, 0x54	; 84
    586e:	33 e0       	ldi	r19, 0x03	; 3
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	b9 01       	movw	r22, r18
    5874:	43 e0       	ldi	r20, 0x03	; 3
    5876:	29 e0       	ldi	r18, 0x09	; 9
    5878:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sad, 3, 10);
    587c:	24 e5       	ldi	r18, 0x54	; 84
    587e:	33 e0       	ldi	r19, 0x03	; 3
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	b9 01       	movw	r22, r18
    5884:	43 e0       	ldi	r20, 0x03	; 3
    5886:	2a e0       	ldi	r18, 0x0A	; 10
    5888:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sad, 3, 11);
    588c:	24 e5       	ldi	r18, 0x54	; 84
    588e:	33 e0       	ldi	r19, 0x03	; 3
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	b9 01       	movw	r22, r18
    5894:	43 e0       	ldi	r20, 0x03	; 3
    5896:	2b e0       	ldi	r18, 0x0B	; 11
    5898:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	a8 ec       	ldi	r26, 0xC8	; 200
    58a2:	b2 e4       	ldi	r27, 0x42	; 66
    58a4:	8d ab       	std	Y+53, r24	; 0x35
    58a6:	9e ab       	std	Y+54, r25	; 0x36
    58a8:	af ab       	std	Y+55, r26	; 0x37
    58aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58ac:	6d a9       	ldd	r22, Y+53	; 0x35
    58ae:	7e a9       	ldd	r23, Y+54	; 0x36
    58b0:	8f a9       	ldd	r24, Y+55	; 0x37
    58b2:	98 ad       	ldd	r25, Y+56	; 0x38
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	30 e0       	ldi	r19, 0x00	; 0
    58b8:	4a e7       	ldi	r20, 0x7A	; 122
    58ba:	55 e4       	ldi	r21, 0x45	; 69
    58bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58c0:	dc 01       	movw	r26, r24
    58c2:	cb 01       	movw	r24, r22
    58c4:	89 ab       	std	Y+49, r24	; 0x31
    58c6:	9a ab       	std	Y+50, r25	; 0x32
    58c8:	ab ab       	std	Y+51, r26	; 0x33
    58ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    58cc:	69 a9       	ldd	r22, Y+49	; 0x31
    58ce:	7a a9       	ldd	r23, Y+50	; 0x32
    58d0:	8b a9       	ldd	r24, Y+51	; 0x33
    58d2:	9c a9       	ldd	r25, Y+52	; 0x34
    58d4:	20 e0       	ldi	r18, 0x00	; 0
    58d6:	30 e0       	ldi	r19, 0x00	; 0
    58d8:	40 e8       	ldi	r20, 0x80	; 128
    58da:	5f e3       	ldi	r21, 0x3F	; 63
    58dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58e0:	88 23       	and	r24, r24
    58e2:	2c f4       	brge	.+10     	; 0x58ee <main+0x359a>
		__ticks = 1;
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	98 ab       	std	Y+48, r25	; 0x30
    58ea:	8f a7       	std	Y+47, r24	; 0x2f
    58ec:	3f c0       	rjmp	.+126    	; 0x596c <main+0x3618>
	else if (__tmp > 65535)
    58ee:	69 a9       	ldd	r22, Y+49	; 0x31
    58f0:	7a a9       	ldd	r23, Y+50	; 0x32
    58f2:	8b a9       	ldd	r24, Y+51	; 0x33
    58f4:	9c a9       	ldd	r25, Y+52	; 0x34
    58f6:	20 e0       	ldi	r18, 0x00	; 0
    58f8:	3f ef       	ldi	r19, 0xFF	; 255
    58fa:	4f e7       	ldi	r20, 0x7F	; 127
    58fc:	57 e4       	ldi	r21, 0x47	; 71
    58fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5902:	18 16       	cp	r1, r24
    5904:	4c f5       	brge	.+82     	; 0x5958 <main+0x3604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5906:	6d a9       	ldd	r22, Y+53	; 0x35
    5908:	7e a9       	ldd	r23, Y+54	; 0x36
    590a:	8f a9       	ldd	r24, Y+55	; 0x37
    590c:	98 ad       	ldd	r25, Y+56	; 0x38
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	40 e2       	ldi	r20, 0x20	; 32
    5914:	51 e4       	ldi	r21, 0x41	; 65
    5916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    591a:	dc 01       	movw	r26, r24
    591c:	cb 01       	movw	r24, r22
    591e:	bc 01       	movw	r22, r24
    5920:	cd 01       	movw	r24, r26
    5922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5926:	dc 01       	movw	r26, r24
    5928:	cb 01       	movw	r24, r22
    592a:	98 ab       	std	Y+48, r25	; 0x30
    592c:	8f a7       	std	Y+47, r24	; 0x2f
    592e:	0f c0       	rjmp	.+30     	; 0x594e <main+0x35fa>
    5930:	80 e9       	ldi	r24, 0x90	; 144
    5932:	91 e0       	ldi	r25, 0x01	; 1
    5934:	9e a7       	std	Y+46, r25	; 0x2e
    5936:	8d a7       	std	Y+45, r24	; 0x2d
    5938:	8d a5       	ldd	r24, Y+45	; 0x2d
    593a:	9e a5       	ldd	r25, Y+46	; 0x2e
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	f1 f7       	brne	.-4      	; 0x593c <main+0x35e8>
    5940:	9e a7       	std	Y+46, r25	; 0x2e
    5942:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5944:	8f a5       	ldd	r24, Y+47	; 0x2f
    5946:	98 a9       	ldd	r25, Y+48	; 0x30
    5948:	01 97       	sbiw	r24, 0x01	; 1
    594a:	98 ab       	std	Y+48, r25	; 0x30
    594c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    594e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5950:	98 a9       	ldd	r25, Y+48	; 0x30
    5952:	00 97       	sbiw	r24, 0x00	; 0
    5954:	69 f7       	brne	.-38     	; 0x5930 <main+0x35dc>
    5956:	14 c0       	rjmp	.+40     	; 0x5980 <main+0x362c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5958:	69 a9       	ldd	r22, Y+49	; 0x31
    595a:	7a a9       	ldd	r23, Y+50	; 0x32
    595c:	8b a9       	ldd	r24, Y+51	; 0x33
    595e:	9c a9       	ldd	r25, Y+52	; 0x34
    5960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5964:	dc 01       	movw	r26, r24
    5966:	cb 01       	movw	r24, r22
    5968:	98 ab       	std	Y+48, r25	; 0x30
    596a:	8f a7       	std	Y+47, r24	; 0x2f
    596c:	8f a5       	ldd	r24, Y+47	; 0x2f
    596e:	98 a9       	ldd	r25, Y+48	; 0x30
    5970:	9c a7       	std	Y+44, r25	; 0x2c
    5972:	8b a7       	std	Y+43, r24	; 0x2b
    5974:	8b a5       	ldd	r24, Y+43	; 0x2b
    5976:	9c a5       	ldd	r25, Y+44	; 0x2c
    5978:	01 97       	sbiw	r24, 0x01	; 1
    597a:	f1 f7       	brne	.-4      	; 0x5978 <main+0x3624>
    597c:	9c a7       	std	Y+44, r25	; 0x2c
    597e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	LCD_voidWriteCustomCharacter(1, Sit, 3, 8);
    5980:	2c e5       	ldi	r18, 0x5C	; 92
    5982:	33 e0       	ldi	r19, 0x03	; 3
    5984:	81 e0       	ldi	r24, 0x01	; 1
    5986:	b9 01       	movw	r22, r18
    5988:	43 e0       	ldi	r20, 0x03	; 3
    598a:	28 e0       	ldi	r18, 0x08	; 8
    598c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sit, 3, 9);
    5990:	2c e5       	ldi	r18, 0x5C	; 92
    5992:	33 e0       	ldi	r19, 0x03	; 3
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	b9 01       	movw	r22, r18
    5998:	43 e0       	ldi	r20, 0x03	; 3
    599a:	29 e0       	ldi	r18, 0x09	; 9
    599c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sit, 3, 10);
    59a0:	2c e5       	ldi	r18, 0x5C	; 92
    59a2:	33 e0       	ldi	r19, 0x03	; 3
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	b9 01       	movw	r22, r18
    59a8:	43 e0       	ldi	r20, 0x03	; 3
    59aa:	2a e0       	ldi	r18, 0x0A	; 10
    59ac:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(1, Sit, 3, 11);
    59b0:	2c e5       	ldi	r18, 0x5C	; 92
    59b2:	33 e0       	ldi	r19, 0x03	; 3
    59b4:	81 e0       	ldi	r24, 0x01	; 1
    59b6:	b9 01       	movw	r22, r18
    59b8:	43 e0       	ldi	r20, 0x03	; 3
    59ba:	2b e0       	ldi	r18, 0x0B	; 11
    59bc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
    59c0:	80 e0       	ldi	r24, 0x00	; 0
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	aa e7       	ldi	r26, 0x7A	; 122
    59c6:	b4 e4       	ldi	r27, 0x44	; 68
    59c8:	8f a3       	std	Y+39, r24	; 0x27
    59ca:	98 a7       	std	Y+40, r25	; 0x28
    59cc:	a9 a7       	std	Y+41, r26	; 0x29
    59ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59d0:	6f a1       	ldd	r22, Y+39	; 0x27
    59d2:	78 a5       	ldd	r23, Y+40	; 0x28
    59d4:	89 a5       	ldd	r24, Y+41	; 0x29
    59d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    59d8:	20 e0       	ldi	r18, 0x00	; 0
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	4a e7       	ldi	r20, 0x7A	; 122
    59de:	55 e4       	ldi	r21, 0x45	; 69
    59e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59e4:	dc 01       	movw	r26, r24
    59e6:	cb 01       	movw	r24, r22
    59e8:	8b a3       	std	Y+35, r24	; 0x23
    59ea:	9c a3       	std	Y+36, r25	; 0x24
    59ec:	ad a3       	std	Y+37, r26	; 0x25
    59ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    59f0:	6b a1       	ldd	r22, Y+35	; 0x23
    59f2:	7c a1       	ldd	r23, Y+36	; 0x24
    59f4:	8d a1       	ldd	r24, Y+37	; 0x25
    59f6:	9e a1       	ldd	r25, Y+38	; 0x26
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	40 e8       	ldi	r20, 0x80	; 128
    59fe:	5f e3       	ldi	r21, 0x3F	; 63
    5a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a04:	88 23       	and	r24, r24
    5a06:	2c f4       	brge	.+10     	; 0x5a12 <main+0x36be>
		__ticks = 1;
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	9a a3       	std	Y+34, r25	; 0x22
    5a0e:	89 a3       	std	Y+33, r24	; 0x21
    5a10:	3f c0       	rjmp	.+126    	; 0x5a90 <main+0x373c>
	else if (__tmp > 65535)
    5a12:	6b a1       	ldd	r22, Y+35	; 0x23
    5a14:	7c a1       	ldd	r23, Y+36	; 0x24
    5a16:	8d a1       	ldd	r24, Y+37	; 0x25
    5a18:	9e a1       	ldd	r25, Y+38	; 0x26
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	3f ef       	ldi	r19, 0xFF	; 255
    5a1e:	4f e7       	ldi	r20, 0x7F	; 127
    5a20:	57 e4       	ldi	r21, 0x47	; 71
    5a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a26:	18 16       	cp	r1, r24
    5a28:	4c f5       	brge	.+82     	; 0x5a7c <main+0x3728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a2a:	6f a1       	ldd	r22, Y+39	; 0x27
    5a2c:	78 a5       	ldd	r23, Y+40	; 0x28
    5a2e:	89 a5       	ldd	r24, Y+41	; 0x29
    5a30:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a32:	20 e0       	ldi	r18, 0x00	; 0
    5a34:	30 e0       	ldi	r19, 0x00	; 0
    5a36:	40 e2       	ldi	r20, 0x20	; 32
    5a38:	51 e4       	ldi	r21, 0x41	; 65
    5a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a3e:	dc 01       	movw	r26, r24
    5a40:	cb 01       	movw	r24, r22
    5a42:	bc 01       	movw	r22, r24
    5a44:	cd 01       	movw	r24, r26
    5a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	cb 01       	movw	r24, r22
    5a4e:	9a a3       	std	Y+34, r25	; 0x22
    5a50:	89 a3       	std	Y+33, r24	; 0x21
    5a52:	0f c0       	rjmp	.+30     	; 0x5a72 <main+0x371e>
    5a54:	80 e9       	ldi	r24, 0x90	; 144
    5a56:	91 e0       	ldi	r25, 0x01	; 1
    5a58:	98 a3       	std	Y+32, r25	; 0x20
    5a5a:	8f 8f       	std	Y+31, r24	; 0x1f
    5a5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a5e:	98 a1       	ldd	r25, Y+32	; 0x20
    5a60:	01 97       	sbiw	r24, 0x01	; 1
    5a62:	f1 f7       	brne	.-4      	; 0x5a60 <main+0x370c>
    5a64:	98 a3       	std	Y+32, r25	; 0x20
    5a66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a68:	89 a1       	ldd	r24, Y+33	; 0x21
    5a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    5a6c:	01 97       	sbiw	r24, 0x01	; 1
    5a6e:	9a a3       	std	Y+34, r25	; 0x22
    5a70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a72:	89 a1       	ldd	r24, Y+33	; 0x21
    5a74:	9a a1       	ldd	r25, Y+34	; 0x22
    5a76:	00 97       	sbiw	r24, 0x00	; 0
    5a78:	69 f7       	brne	.-38     	; 0x5a54 <main+0x3700>
    5a7a:	14 c0       	rjmp	.+40     	; 0x5aa4 <main+0x3750>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    5a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    5a80:	8d a1       	ldd	r24, Y+37	; 0x25
    5a82:	9e a1       	ldd	r25, Y+38	; 0x26
    5a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a88:	dc 01       	movw	r26, r24
    5a8a:	cb 01       	movw	r24, r22
    5a8c:	9a a3       	std	Y+34, r25	; 0x22
    5a8e:	89 a3       	std	Y+33, r24	; 0x21
    5a90:	89 a1       	ldd	r24, Y+33	; 0x21
    5a92:	9a a1       	ldd	r25, Y+34	; 0x22
    5a94:	9e 8f       	std	Y+30, r25	; 0x1e
    5a96:	8d 8f       	std	Y+29, r24	; 0x1d
    5a98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a9c:	01 97       	sbiw	r24, 0x01	; 1
    5a9e:	f1 f7       	brne	.-4      	; 0x5a9c <main+0x3748>
    5aa0:	9e 8f       	std	Y+30, r25	; 0x1e
    5aa2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_voidClear();
    5aa4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>


	/*The End*/
	LCD_voidWriteStringAtXY("What is your advice", 0, 0);
    5aa8:	8e e7       	ldi	r24, 0x7E	; 126
    5aaa:	91 e0       	ldi	r25, 0x01	; 1
    5aac:	60 e0       	ldi	r22, 0x00	; 0
    5aae:	40 e0       	ldi	r20, 0x00	; 0
    5ab0:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("to both of them .. ?", 2, 0);
    5ab4:	82 e9       	ldi	r24, 0x92	; 146
    5ab6:	91 e0       	ldi	r25, 0x01	; 1
    5ab8:	62 e0       	ldi	r22, 0x02	; 2
    5aba:	40 e0       	ldi	r20, 0x00	; 0
    5abc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
    5ac2:	90 e8       	ldi	r25, 0x80	; 128
    5ac4:	ab eb       	ldi	r26, 0xBB	; 187
    5ac6:	b4 e4       	ldi	r27, 0x44	; 68
    5ac8:	89 8f       	std	Y+25, r24	; 0x19
    5aca:	9a 8f       	std	Y+26, r25	; 0x1a
    5acc:	ab 8f       	std	Y+27, r26	; 0x1b
    5ace:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ad0:	69 8d       	ldd	r22, Y+25	; 0x19
    5ad2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ad6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ad8:	20 e0       	ldi	r18, 0x00	; 0
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	4a e7       	ldi	r20, 0x7A	; 122
    5ade:	55 e4       	ldi	r21, 0x45	; 69
    5ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae4:	dc 01       	movw	r26, r24
    5ae6:	cb 01       	movw	r24, r22
    5ae8:	8d 8b       	std	Y+21, r24	; 0x15
    5aea:	9e 8b       	std	Y+22, r25	; 0x16
    5aec:	af 8b       	std	Y+23, r26	; 0x17
    5aee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5af0:	6d 89       	ldd	r22, Y+21	; 0x15
    5af2:	7e 89       	ldd	r23, Y+22	; 0x16
    5af4:	8f 89       	ldd	r24, Y+23	; 0x17
    5af6:	98 8d       	ldd	r25, Y+24	; 0x18
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	40 e8       	ldi	r20, 0x80	; 128
    5afe:	5f e3       	ldi	r21, 0x3F	; 63
    5b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b04:	88 23       	and	r24, r24
    5b06:	2c f4       	brge	.+10     	; 0x5b12 <main+0x37be>
		__ticks = 1;
    5b08:	81 e0       	ldi	r24, 0x01	; 1
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	9c 8b       	std	Y+20, r25	; 0x14
    5b0e:	8b 8b       	std	Y+19, r24	; 0x13
    5b10:	3f c0       	rjmp	.+126    	; 0x5b90 <main+0x383c>
	else if (__tmp > 65535)
    5b12:	6d 89       	ldd	r22, Y+21	; 0x15
    5b14:	7e 89       	ldd	r23, Y+22	; 0x16
    5b16:	8f 89       	ldd	r24, Y+23	; 0x17
    5b18:	98 8d       	ldd	r25, Y+24	; 0x18
    5b1a:	20 e0       	ldi	r18, 0x00	; 0
    5b1c:	3f ef       	ldi	r19, 0xFF	; 255
    5b1e:	4f e7       	ldi	r20, 0x7F	; 127
    5b20:	57 e4       	ldi	r21, 0x47	; 71
    5b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b26:	18 16       	cp	r1, r24
    5b28:	4c f5       	brge	.+82     	; 0x5b7c <main+0x3828>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b2a:	69 8d       	ldd	r22, Y+25	; 0x19
    5b2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b32:	20 e0       	ldi	r18, 0x00	; 0
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	40 e2       	ldi	r20, 0x20	; 32
    5b38:	51 e4       	ldi	r21, 0x41	; 65
    5b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b3e:	dc 01       	movw	r26, r24
    5b40:	cb 01       	movw	r24, r22
    5b42:	bc 01       	movw	r22, r24
    5b44:	cd 01       	movw	r24, r26
    5b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b4a:	dc 01       	movw	r26, r24
    5b4c:	cb 01       	movw	r24, r22
    5b4e:	9c 8b       	std	Y+20, r25	; 0x14
    5b50:	8b 8b       	std	Y+19, r24	; 0x13
    5b52:	0f c0       	rjmp	.+30     	; 0x5b72 <main+0x381e>
    5b54:	80 e9       	ldi	r24, 0x90	; 144
    5b56:	91 e0       	ldi	r25, 0x01	; 1
    5b58:	9a 8b       	std	Y+18, r25	; 0x12
    5b5a:	89 8b       	std	Y+17, r24	; 0x11
    5b5c:	89 89       	ldd	r24, Y+17	; 0x11
    5b5e:	9a 89       	ldd	r25, Y+18	; 0x12
    5b60:	01 97       	sbiw	r24, 0x01	; 1
    5b62:	f1 f7       	brne	.-4      	; 0x5b60 <main+0x380c>
    5b64:	9a 8b       	std	Y+18, r25	; 0x12
    5b66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b68:	8b 89       	ldd	r24, Y+19	; 0x13
    5b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    5b6c:	01 97       	sbiw	r24, 0x01	; 1
    5b6e:	9c 8b       	std	Y+20, r25	; 0x14
    5b70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b72:	8b 89       	ldd	r24, Y+19	; 0x13
    5b74:	9c 89       	ldd	r25, Y+20	; 0x14
    5b76:	00 97       	sbiw	r24, 0x00	; 0
    5b78:	69 f7       	brne	.-38     	; 0x5b54 <main+0x3800>
    5b7a:	14 c0       	rjmp	.+40     	; 0x5ba4 <main+0x3850>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    5b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    5b80:	8f 89       	ldd	r24, Y+23	; 0x17
    5b82:	98 8d       	ldd	r25, Y+24	; 0x18
    5b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b88:	dc 01       	movw	r26, r24
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	9c 8b       	std	Y+20, r25	; 0x14
    5b8e:	8b 8b       	std	Y+19, r24	; 0x13
    5b90:	8b 89       	ldd	r24, Y+19	; 0x13
    5b92:	9c 89       	ldd	r25, Y+20	; 0x14
    5b94:	98 8b       	std	Y+16, r25	; 0x10
    5b96:	8f 87       	std	Y+15, r24	; 0x0f
    5b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b9a:	98 89       	ldd	r25, Y+16	; 0x10
    5b9c:	01 97       	sbiw	r24, 0x01	; 1
    5b9e:	f1 f7       	brne	.-4      	; 0x5b9c <main+0x3848>
    5ba0:	98 8b       	std	Y+16, r25	; 0x10
    5ba2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	LCD_voidClear();
    5ba4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>

	/*comment*/
	LCD_voidWriteStringAtXY("Please leave your", 0, 0);
    5ba8:	87 ea       	ldi	r24, 0xA7	; 167
    5baa:	91 e0       	ldi	r25, 0x01	; 1
    5bac:	60 e0       	ldi	r22, 0x00	; 0
    5bae:	40 e0       	ldi	r20, 0x00	; 0
    5bb0:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("comment under this", 1, 0);
    5bb4:	89 eb       	ldi	r24, 0xB9	; 185
    5bb6:	91 e0       	ldi	r25, 0x01	; 1
    5bb8:	61 e0       	ldi	r22, 0x01	; 1
    5bba:	40 e0       	ldi	r20, 0x00	; 0
    5bbc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
	LCD_voidWriteStringAtXY("Video ... ", 2, 0);
    5bc0:	8c ec       	ldi	r24, 0xCC	; 204
    5bc2:	91 e0       	ldi	r25, 0x01	; 1
    5bc4:	62 e0       	ldi	r22, 0x02	; 2
    5bc6:	40 e0       	ldi	r20, 0x00	; 0
    5bc8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>
    5bcc:	80 e0       	ldi	r24, 0x00	; 0
    5bce:	90 e8       	ldi	r25, 0x80	; 128
    5bd0:	ab eb       	ldi	r26, 0xBB	; 187
    5bd2:	b4 e4       	ldi	r27, 0x44	; 68
    5bd4:	8b 87       	std	Y+11, r24	; 0x0b
    5bd6:	9c 87       	std	Y+12, r25	; 0x0c
    5bd8:	ad 87       	std	Y+13, r26	; 0x0d
    5bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    5be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5be4:	20 e0       	ldi	r18, 0x00	; 0
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	4a e7       	ldi	r20, 0x7A	; 122
    5bea:	55 e4       	ldi	r21, 0x45	; 69
    5bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	8f 83       	std	Y+7, r24	; 0x07
    5bf6:	98 87       	std	Y+8, r25	; 0x08
    5bf8:	a9 87       	std	Y+9, r26	; 0x09
    5bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    5bfe:	78 85       	ldd	r23, Y+8	; 0x08
    5c00:	89 85       	ldd	r24, Y+9	; 0x09
    5c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c04:	20 e0       	ldi	r18, 0x00	; 0
    5c06:	30 e0       	ldi	r19, 0x00	; 0
    5c08:	40 e8       	ldi	r20, 0x80	; 128
    5c0a:	5f e3       	ldi	r21, 0x3F	; 63
    5c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c10:	88 23       	and	r24, r24
    5c12:	2c f4       	brge	.+10     	; 0x5c1e <main+0x38ca>
		__ticks = 1;
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	9e 83       	std	Y+6, r25	; 0x06
    5c1a:	8d 83       	std	Y+5, r24	; 0x05
    5c1c:	3f c0       	rjmp	.+126    	; 0x5c9c <main+0x3948>
	else if (__tmp > 65535)
    5c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c20:	78 85       	ldd	r23, Y+8	; 0x08
    5c22:	89 85       	ldd	r24, Y+9	; 0x09
    5c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	3f ef       	ldi	r19, 0xFF	; 255
    5c2a:	4f e7       	ldi	r20, 0x7F	; 127
    5c2c:	57 e4       	ldi	r21, 0x47	; 71
    5c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c32:	18 16       	cp	r1, r24
    5c34:	4c f5       	brge	.+82     	; 0x5c88 <main+0x3934>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c3e:	20 e0       	ldi	r18, 0x00	; 0
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	40 e2       	ldi	r20, 0x20	; 32
    5c44:	51 e4       	ldi	r21, 0x41	; 65
    5c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c4a:	dc 01       	movw	r26, r24
    5c4c:	cb 01       	movw	r24, r22
    5c4e:	bc 01       	movw	r22, r24
    5c50:	cd 01       	movw	r24, r26
    5c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	9e 83       	std	Y+6, r25	; 0x06
    5c5c:	8d 83       	std	Y+5, r24	; 0x05
    5c5e:	0f c0       	rjmp	.+30     	; 0x5c7e <main+0x392a>
    5c60:	80 e9       	ldi	r24, 0x90	; 144
    5c62:	91 e0       	ldi	r25, 0x01	; 1
    5c64:	9c 83       	std	Y+4, r25	; 0x04
    5c66:	8b 83       	std	Y+3, r24	; 0x03
    5c68:	8b 81       	ldd	r24, Y+3	; 0x03
    5c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c6c:	01 97       	sbiw	r24, 0x01	; 1
    5c6e:	f1 f7       	brne	.-4      	; 0x5c6c <main+0x3918>
    5c70:	9c 83       	std	Y+4, r25	; 0x04
    5c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c74:	8d 81       	ldd	r24, Y+5	; 0x05
    5c76:	9e 81       	ldd	r25, Y+6	; 0x06
    5c78:	01 97       	sbiw	r24, 0x01	; 1
    5c7a:	9e 83       	std	Y+6, r25	; 0x06
    5c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c80:	9e 81       	ldd	r25, Y+6	; 0x06
    5c82:	00 97       	sbiw	r24, 0x00	; 0
    5c84:	69 f7       	brne	.-38     	; 0x5c60 <main+0x390c>
    5c86:	14 c0       	rjmp	.+40     	; 0x5cb0 <main+0x395c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c88:	6f 81       	ldd	r22, Y+7	; 0x07
    5c8a:	78 85       	ldd	r23, Y+8	; 0x08
    5c8c:	89 85       	ldd	r24, Y+9	; 0x09
    5c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	9e 83       	std	Y+6, r25	; 0x06
    5c9a:	8d 83       	std	Y+5, r24	; 0x05
    5c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ca0:	9a 83       	std	Y+2, r25	; 0x02
    5ca2:	89 83       	std	Y+1, r24	; 0x01
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca8:	01 97       	sbiw	r24, 0x01	; 1
    5caa:	f1 f7       	brne	.-4      	; 0x5ca8 <main+0x3954>
    5cac:	9a 83       	std	Y+2, r25	; 0x02
    5cae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_voidClear();
    5cb0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_voidClear>

	/*Thanks*/
	LCD_voidWriteStringAtXY("Thanks for your help", 1, 0);
    5cb4:	87 ed       	ldi	r24, 0xD7	; 215
    5cb6:	91 e0       	ldi	r25, 0x01	; 1
    5cb8:	61 e0       	ldi	r22, 0x01	; 1
    5cba:	40 e0       	ldi	r20, 0x00	; 0
    5cbc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_voidWriteStringAtXY>

	LCD_voidWriteCustomCharacter(7, Heart, 3, 7);
    5cc0:	2c e3       	ldi	r18, 0x3C	; 60
    5cc2:	33 e0       	ldi	r19, 0x03	; 3
    5cc4:	87 e0       	ldi	r24, 0x07	; 7
    5cc6:	b9 01       	movw	r22, r18
    5cc8:	43 e0       	ldi	r20, 0x03	; 3
    5cca:	27 e0       	ldi	r18, 0x07	; 7
    5ccc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(7, Heart, 3, 9);
    5cd0:	2c e3       	ldi	r18, 0x3C	; 60
    5cd2:	33 e0       	ldi	r19, 0x03	; 3
    5cd4:	87 e0       	ldi	r24, 0x07	; 7
    5cd6:	b9 01       	movw	r22, r18
    5cd8:	43 e0       	ldi	r20, 0x03	; 3
    5cda:	29 e0       	ldi	r18, 0x09	; 9
    5cdc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	LCD_voidWriteCustomCharacter(7, Heart, 3, 11);
    5ce0:	2c e3       	ldi	r18, 0x3C	; 60
    5ce2:	33 e0       	ldi	r19, 0x03	; 3
    5ce4:	87 e0       	ldi	r24, 0x07	; 7
    5ce6:	b9 01       	movw	r22, r18
    5ce8:	43 e0       	ldi	r20, 0x03	; 3
    5cea:	2b e0       	ldi	r18, 0x0B	; 11
    5cec:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_voidWriteCustomCharacter>
	//_delay_ms(1000);
	//LCD_voidClear();

	return 0;
    5cf0:	80 e0       	ldi	r24, 0x00	; 0
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
}
    5cf4:	ca 5f       	subi	r28, 0xFA	; 250
    5cf6:	dd 4f       	sbci	r29, 0xFD	; 253
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	f8 94       	cli
    5cfc:	de bf       	out	0x3e, r29	; 62
    5cfe:	0f be       	out	0x3f, r0	; 63
    5d00:	cd bf       	out	0x3d, r28	; 61
    5d02:	cf 91       	pop	r28
    5d04:	df 91       	pop	r29
    5d06:	1f 91       	pop	r17
    5d08:	0f 91       	pop	r16
    5d0a:	08 95       	ret

00005d0c <__divmodsi4>:
    5d0c:	97 fb       	bst	r25, 7
    5d0e:	09 2e       	mov	r0, r25
    5d10:	05 26       	eor	r0, r21
    5d12:	0e d0       	rcall	.+28     	; 0x5d30 <__divmodsi4_neg1>
    5d14:	57 fd       	sbrc	r21, 7
    5d16:	04 d0       	rcall	.+8      	; 0x5d20 <__divmodsi4_neg2>
    5d18:	14 d0       	rcall	.+40     	; 0x5d42 <__udivmodsi4>
    5d1a:	0a d0       	rcall	.+20     	; 0x5d30 <__divmodsi4_neg1>
    5d1c:	00 1c       	adc	r0, r0
    5d1e:	38 f4       	brcc	.+14     	; 0x5d2e <__divmodsi4_exit>

00005d20 <__divmodsi4_neg2>:
    5d20:	50 95       	com	r21
    5d22:	40 95       	com	r20
    5d24:	30 95       	com	r19
    5d26:	21 95       	neg	r18
    5d28:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2a:	4f 4f       	sbci	r20, 0xFF	; 255
    5d2c:	5f 4f       	sbci	r21, 0xFF	; 255

00005d2e <__divmodsi4_exit>:
    5d2e:	08 95       	ret

00005d30 <__divmodsi4_neg1>:
    5d30:	f6 f7       	brtc	.-4      	; 0x5d2e <__divmodsi4_exit>
    5d32:	90 95       	com	r25
    5d34:	80 95       	com	r24
    5d36:	70 95       	com	r23
    5d38:	61 95       	neg	r22
    5d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d40:	08 95       	ret

00005d42 <__udivmodsi4>:
    5d42:	a1 e2       	ldi	r26, 0x21	; 33
    5d44:	1a 2e       	mov	r1, r26
    5d46:	aa 1b       	sub	r26, r26
    5d48:	bb 1b       	sub	r27, r27
    5d4a:	fd 01       	movw	r30, r26
    5d4c:	0d c0       	rjmp	.+26     	; 0x5d68 <__udivmodsi4_ep>

00005d4e <__udivmodsi4_loop>:
    5d4e:	aa 1f       	adc	r26, r26
    5d50:	bb 1f       	adc	r27, r27
    5d52:	ee 1f       	adc	r30, r30
    5d54:	ff 1f       	adc	r31, r31
    5d56:	a2 17       	cp	r26, r18
    5d58:	b3 07       	cpc	r27, r19
    5d5a:	e4 07       	cpc	r30, r20
    5d5c:	f5 07       	cpc	r31, r21
    5d5e:	20 f0       	brcs	.+8      	; 0x5d68 <__udivmodsi4_ep>
    5d60:	a2 1b       	sub	r26, r18
    5d62:	b3 0b       	sbc	r27, r19
    5d64:	e4 0b       	sbc	r30, r20
    5d66:	f5 0b       	sbc	r31, r21

00005d68 <__udivmodsi4_ep>:
    5d68:	66 1f       	adc	r22, r22
    5d6a:	77 1f       	adc	r23, r23
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	1a 94       	dec	r1
    5d72:	69 f7       	brne	.-38     	; 0x5d4e <__udivmodsi4_loop>
    5d74:	60 95       	com	r22
    5d76:	70 95       	com	r23
    5d78:	80 95       	com	r24
    5d7a:	90 95       	com	r25
    5d7c:	9b 01       	movw	r18, r22
    5d7e:	ac 01       	movw	r20, r24
    5d80:	bd 01       	movw	r22, r26
    5d82:	cf 01       	movw	r24, r30
    5d84:	08 95       	ret

00005d86 <__prologue_saves__>:
    5d86:	2f 92       	push	r2
    5d88:	3f 92       	push	r3
    5d8a:	4f 92       	push	r4
    5d8c:	5f 92       	push	r5
    5d8e:	6f 92       	push	r6
    5d90:	7f 92       	push	r7
    5d92:	8f 92       	push	r8
    5d94:	9f 92       	push	r9
    5d96:	af 92       	push	r10
    5d98:	bf 92       	push	r11
    5d9a:	cf 92       	push	r12
    5d9c:	df 92       	push	r13
    5d9e:	ef 92       	push	r14
    5da0:	ff 92       	push	r15
    5da2:	0f 93       	push	r16
    5da4:	1f 93       	push	r17
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	cd b7       	in	r28, 0x3d	; 61
    5dac:	de b7       	in	r29, 0x3e	; 62
    5dae:	ca 1b       	sub	r28, r26
    5db0:	db 0b       	sbc	r29, r27
    5db2:	0f b6       	in	r0, 0x3f	; 63
    5db4:	f8 94       	cli
    5db6:	de bf       	out	0x3e, r29	; 62
    5db8:	0f be       	out	0x3f, r0	; 63
    5dba:	cd bf       	out	0x3d, r28	; 61
    5dbc:	09 94       	ijmp

00005dbe <__epilogue_restores__>:
    5dbe:	2a 88       	ldd	r2, Y+18	; 0x12
    5dc0:	39 88       	ldd	r3, Y+17	; 0x11
    5dc2:	48 88       	ldd	r4, Y+16	; 0x10
    5dc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5dc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5dc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5dca:	8c 84       	ldd	r8, Y+12	; 0x0c
    5dcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    5dce:	aa 84       	ldd	r10, Y+10	; 0x0a
    5dd0:	b9 84       	ldd	r11, Y+9	; 0x09
    5dd2:	c8 84       	ldd	r12, Y+8	; 0x08
    5dd4:	df 80       	ldd	r13, Y+7	; 0x07
    5dd6:	ee 80       	ldd	r14, Y+6	; 0x06
    5dd8:	fd 80       	ldd	r15, Y+5	; 0x05
    5dda:	0c 81       	ldd	r16, Y+4	; 0x04
    5ddc:	1b 81       	ldd	r17, Y+3	; 0x03
    5dde:	aa 81       	ldd	r26, Y+2	; 0x02
    5de0:	b9 81       	ldd	r27, Y+1	; 0x01
    5de2:	ce 0f       	add	r28, r30
    5de4:	d1 1d       	adc	r29, r1
    5de6:	0f b6       	in	r0, 0x3f	; 63
    5de8:	f8 94       	cli
    5dea:	de bf       	out	0x3e, r29	; 62
    5dec:	0f be       	out	0x3f, r0	; 63
    5dee:	cd bf       	out	0x3d, r28	; 61
    5df0:	ed 01       	movw	r28, r26
    5df2:	08 95       	ret

00005df4 <_exit>:
    5df4:	f8 94       	cli

00005df6 <__stop_program>:
    5df6:	ff cf       	rjmp	.-2      	; 0x5df6 <__stop_program>
